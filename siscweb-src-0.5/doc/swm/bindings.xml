<chapter id="bindings">
  <title>Request Bindings</title>

  <para>
    Bindings associated with the request returned by the
    <function>send-*/(suspend|forward)</function> functions, or passed
    as parameters to procedures that are either published or the
    target of a dispatch, can be extracted and associated to
    language-level variables.
  </para>

  <para>
    Bindings, as returned by the function
    <function>get-bindings</function> are contained in an opaque
    object. This object can be converted to an association list via
    <function>bindings->alist</function>, or queried in constant time
    using the <function>extract-bindings</function> or
    <function>extract-single-binding</function> functions. The object
    is guaranteed to be serializable, but code should not rely on its
    specific implementation.
  </para>

  <section id="extracting-bindings">
    <title>Extracting Bindings</title>

    <para>
      &requires;
      <emphasis role="bold">
        (import <emphasis>siscweb/bindings</emphasis>)
      </emphasis>
      <sbr/>
      &locatedin;
      <emphasis role="bold">
        siscweb.jar
      </emphasis>
    </para>

    <para>
      This module assists developers in obtaining values of parameters
      passed in a request.
    </para>

    <blockquote>
      <para>
        <indexterm>
          <primary>get-bindings</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>bindings</type>
          <methodname>get-bindings</methodname>
          <methodparam choice="opt">
            <parameter>char-set</parameter>
          </methodparam>
          <methodparam>
            <parameter>request</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Given a request object, this procedure returns an opaque
            object representing the request parameters as key-value(s)
            pairs.
          </para>
          <para>
            The optional <parameter>char-set</parameter> parameter can
            be used to override the character encoding of the request.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>exists-binding?</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>&t;/&f;</type>
          <methodname>exists-binding?</methodname>
          <methodparam>
            <parameter>name</parameter>
          </methodparam>
          <methodparam>
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Returns a boolean indicating whether a parameter with the
            given <parameter>name</parameter> contained in the request
            object. <parameter>name</parameter> can be either a string
            or a symbol.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>extract-single-binding</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>string/&f;</type>
          <methodname>extract-single-binding</methodname>
          <methodparam>
            <parameter>name</parameter>
          </methodparam>
          <methodparam>
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Returns the value associated to the given
            <parameter>name</parameter> or &f; if
            <parameter>name</parameter> is not present in the request
            object. If more than one value is bound to
            <parameter>name</parameter>, only the first one is
            returned.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>extract-bindings</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>list</type>
          <methodname>extract-bindings</methodname>
          <methodparam>
            <parameter>name</parameter>
          </methodparam>
          <methodparam>
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Returns the values bound to the given
            <parameter>name</parameter> in a list. Even if only one
            value is bound to the request parameter
            <parameter>name</parameter>, a list will still be
            returned.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>bindings-&gt;alist</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>((name . value) ...)</type>
          <methodname>bindings-&gt;alist</methodname>
          <methodparam>
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Returns an association list corresponding to the
            bindings. The <parameter>name</parameter> returned is
            always a string to maintain its casing, while the
            <parameter>value</parameter> returned is an atom or a list
            if <parameter>name</parameter> is associated to multiple
            values.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>let-bindings</primary>
        </indexterm>
        &syntax;
        <methodsynopsis language="scheme">
          <type>value</type>
          <methodname>let-bindings</methodname>
          <methodparam>
            <parameter>((variable name) ... ) bindings body ...)</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Behaves like (let ...), but
            <parameter>variable</parameter>s are set to the values
            corresponding to the <parameter>name</parameter>s in the
            <parameter>bindings</parameter> object. The
            <parameter>value</parameter> returned is that of the last
            expression in the <parameter>body</parameter>.  A typical
            usage scenario could be:
          </para>
        </blockquote>

        <informalexample>
          <programlisting>
            <![CDATA[
(let-bindings ((name "name"))
     (get-bindings
       (send-html/suspend
         (lambda (k-url)
           `(html
              (body
                (form (@ (action ,k-url))
                  (input (@ (type "text") (name "name")))))))))
  (send-html/back
    `(html
       (body
         (p "You typed: " ,name)))))
            ]]>
          </programlisting>
        </informalexample>
      </para>
    </blockquote>
  </section>

  <section id="bindings-java">
    <title>Extracting Bindings from Java</title>

    <para>
      Bindings specified in the <function>send-forward/*</function>
      functions are assigned to request attributes. This method
      supercedes the previous <literal>request.getBinding*()</literal>
      API, which is now deprecated and will be removed in the
      next release.
    </para>

    <para>
      Multi-valued bindings, as in <literal>'((messages "hello"
      "there"))</literal>, are turned into a
      <literal>java.util.List</literal> and can be easily scanned
      using such tools as JSTL's
      <literal>&lt;c:forEach&gt;</literal>. Single-valued bindings,
      such as <literal>'((message . "hello"))</literal> are simply
      assigned to the attribute.
    </para>

    <para>
      Multi-valued bindings originating from a Scheme list are also
      marked as such, so that they can be converted back to a list of
      values rather than to an object of type
      <literal>java.util.List</literal>.
    </para>

    <para>
      A minimal amount of type conversion is performed. Scheme values
      are passed as &SISC; objects, except for Scheme strings, which
      are converted to Java strings. Java objects are left
      untouched. This also applies to the individual values of
      multi-valued bindings.
    </para>

    <para>
      For instance, below is the Polyglot Hello World example using
      JSP/JSTL as the presentation layer. This example is not included
      in the distribution because of its external dependencies on the
      JSTL libraries.
    </para>

    <informalexample>
      <programlisting>
        <![CDATA[
;; file: hello.scm
(require-library 'siscweb/forward)

(module examples/hello-world
  (hello-world)

  (import siscweb/forward)

  (define messages '("Hello, world!" "Salve, mundo!" "Hallo, Welt!" "Salve, mondo!" "Bonjour, monde!" "Hola, mundo!"))

  (define (hello-world req)
    (let loop ()
      (for-each
       (lambda (message)
         (send-forward/suspend "/jsp/hello.jsp" `((message . ,message))))
       messages)
      (loop)))
  )


<%-- File: jsp/hello.jsp
--%><%@ page contentType="text/html" %><%--
--%><%@ page isELIgnored="false" %><%-- just for servlet v2.3 containers
--%><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%><%--
--%><%@ taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml"%><%--
--%><%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%><%--
--%><%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql"%><%--
--%><%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%><%--
--%><?xml version="1.0"?>

<!DOCTYPE html
     PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title><c:out value="${requestScope.message}"/></title>

    <c:url var="cssUrl" value="/css/default.css"/>
    <link href="${cssUrl}"
          rel="stylesheet"
          type="text/css"/>
  </head>

  <body>
      <h3>Polyglot hello world</h3>
      <p>${requestScope.message}</p>

    <p><a href="${requestScope["siscweb.kURL"]}">Next language &gt;</a></p>
    <p><a href="${requestScope["siscweb.kURL"]}" target="_blank">Next language in new window</a></p>
    <c:url var="homeUrl" value="/"/>
    <p><a href="${homeUrl}">^ Home</a></p>
  </body>
</html>
        ]]>
      </programlisting>
    </informalexample>
  </section>

  <section id="security-bindings">
    <title>Bindings and Security</title>

    <para>
      At the lower level, bindings are looked up in the request scope
      first (i.e. from request attributes) and then from request
      parameters. This behavior allows a more natural integration with
      standard J2EE components such as JSPs, but can be unsafe during
      forwards.
    </para>

    <para>
      Specifically, if the application performs a server-side forward
      to Scheme code that relies on the absence of a binding to
      determine a course of action, a malicious user can inject a
      parameter by the same name into the request (provided they can
      guess the name), and upset the application's behavior. The best
      options in this case are:
    </para>

    <orderedlist>
      <listitem>
        <para>
          When forwarding from Scheme, pass bindings to the
          <function>forward/*</function> and
          <function>send-forward/*</function> functions even if they
          are #f or the empty list. SISCweb will add the name to a
          per-request blacklist, and will not look up the binding
          among the request parameters.
        </para>
      </listitem>

      <listitem>
        <para>
          When forwarding from Java to Scheme, set the attributes to
          <literal>null</literal>. Again, the name will be
          blacklisted.
        </para>
      </listitem>

      <listitem>
        <para>
          If the Java code that forwards to the Scheme code cannot be
          trusted or modified for some reason, the Scheme side can
          always use the <literal>java/get-request-attribute</literal>
          function described in <xref linkend="request"/>.
        </para>
      </listitem>
    </orderedlist>
  </section>
</chapter>
