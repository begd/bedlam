;(import s2j)
;(import generic-procedures)
;(define <PQueue> (java-class "PQueue"))
;(define-generic put)
;(define-generic get)
;(define-generic empty)
;(define (pq-create) (make <PQueue>))
;(define (pq-add! pq item value)
;  (put pq (java-wrap item) (->jfloat value)))
;(define (pq-remove-max! pq)
;  (java-unwrap (get pq)))
;(define (pq-empty? pq)
;  (->boolean (empty pq)))
;(define pq-delete! 
;  (let ()
;    (define-generic remove)
;    (lambda (pq item)
;      (remove pq (java-wrap item)))))
;(trace 'empty 'put 'get 'remove )
(define (pq-create) (cons 'priority-queue '()))
(define (pq-add! pq item value)
  (set-cdr! pq (pq-add-h (cdr pq) item value)))
(define (pq-add-h pq item value)
  (cond [(null? pq) (list (cons value item))]
	[(> (caar pq) value)
	 (cons (car pq) (pq-add-h (cdr pq) item value))]
	[else (cons (cons value item) pq)]))
(define (pq-remove-max! pq)
  (let ((v (cdadr pq)))
    (set-cdr! pq (cddr pq))
    v))
(define (pq-delete! pq item)
  (set-cdr! pq (pq-delete-h! (cdr pq) item)))
(define (pq-delete-h! pq item)
  #;(unless (null? pq)
    (debug "PQD ~a ~a" (cdr (cdadar pq)) (cddar item)))
  (cond [(null? pq) '()]
        [(equal? (cdr (cdadar pq)) (cddar item))
         (pq-delete-h! (cdr pq) item)]
        [else (cons (car pq) (pq-delete-h! (cdr pq) item))]))
(define (pq-empty? pq)
  (null? (cdr pq)))