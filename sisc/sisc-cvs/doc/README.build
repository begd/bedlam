Building SISC
-------------

Building a binary SISC distribution requires a few tricky steps due
to the manner in which SISC starts up.  Instead of loading numerous
scheme source files, syntactically expanding them, then compiling them
to internal SISC expressions, this entire process is done once for
what is considered the 'core' runtime, i.e. what is implicitly installed
in the environment when the REPL prompt appears.  The state of the 
interpreter (the heap) is saved into a heap file.  Then, when SISC loads, 
it loads the pre-processed heap file into memory and presents the prompt.

To build a SISC heap, change into the sisc/scheme-src directory, 
and execute the following command:

java sisc.boot.GenerateHeap -out <heapfile name> -files init.sce compat.sce
                            psyntax.sce
                            <additional scheme files to load>

The interpreter will expand and compile the code, then write to the
specified heap file.  The standard SISC heap is generated by:

java sisc.boot.GenerateHeap -out ../boot/sisc.heap init.sce compat.sce \
                                 psyntax.sce init2.scm pp.scm repl.scm \
                                 debug.scm 

The bare minumum required to build an R5RS compliant heap is
init.sce, compat.sce, psyntax.sce, init2.scm.  The other files loaded:

repl.scm  - The SISC REPL
pp.scm    - Pretty Printer
debug.scm - Debugging (stack traces, tracing, breakpoints, etc)
