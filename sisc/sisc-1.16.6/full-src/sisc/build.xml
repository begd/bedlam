<project name="sisc" default="all">

  <path id="classpath">
    <fileset dir="./lib">
      <include name="*.jar"/>
    </fileset>
<!--    <pathelement path=".."/> -->
  </path>

  <target name="prepare">
    <property name="specver" value="1.16.6"/>
    <property name="version" value="1.16.6"/>
    <property name="cvsversion" value="r1_16_6"/> 
    <property name="spectitle" value="Second Interpreter of Scheme Code"/>
    <!-- Got a better idea?: -->
    <property name="specvendor" value="SISC Development Group"/>
<!--	<property name="beta" value="yes"/>-->
    <property file="${basedir}/build.properties"/>    
    <property name="srcdir" value="${basedir}/src"/>
    <property name="classdir" value="${basedir}/classes"/>
    <property name="libdir" value="${basedir}/lib"/>
    <property name="libsrcdir" value="${srcdir}/sisc/libs"/>
    <property name="docdir" value="${basedir}/doc"/>
    <property name="gendocdir" value="${docdir}/generated"/>
    <property name="bootdir" value="${srcdir}/sisc/boot"/>
    <property name="srfidir" value="${srcdir}/sisc/modules/srfi"/>
    <property name="quantitydir" value="${srcdir}/sisc/data"/>
    <property name="tmpdir" value="${basedir}/tmp"/>
    <property name="packagename" value="sisc"/>
    <property name="basejar" value="sisc.jar"/>
<!--    <property name="classopt" value="yes"/>-->
    <property name="optjar" value="sisc-opt.jar"/>
    <property name="libjar" value="sisc-lib.jar"/>
    <property name="heapjar" value="sisc-heap.jar"/>
    <property name="heap" value="${basedir}/sisc.shp"/>
    <property name="quantity-type" value="64float"/>

    <!-- installation directories-->
    <condition property="prefix" value="/usr/local">
      <not><isset property="prefix"/></not>
    </condition>

    <condition property="debugging" value="on">
      <isset property="beta"/>
    </condition>
    <condition property="debugging" value="off">
      <not><isset property="beta"/></not>
    </condition>
    <condition property="siscDebugging" value="true">
      <isset property="beta"/>
    </condition>
    <condition property="siscDebugging" value="false">
      <not><isset property="beta"/></not>
    </condition>
    <property name="optimization" value="on"/>
    <property name="dist" value="${basedir}/dist"/>
    <property name="doc.style" value="/usr/share/xml/docbook/stylesheet/nwalsh/html/chunk.xsl"/>
    <available file="${doc.style}" property="docstyle.present"/>
    <mkdir dir="${libdir}"/>
    <available classname="junit.framework.TestCase"
               property="junit.present"
               classpathref="classpath"/>
    <property name="xmldcl" value="/usr/share/sgml/declaration/xml.dcl"/>
    <property name="sss" value="sss"/>
  </target>

  <target name="prepare-install" depends="prepare">
    <condition property="instlibdir" value="${prefix}/lib/sisc">
      <not><isset property="instlibdir"/></not>
    </condition>
    <condition property="instdocdir" value="${prefix}/share/doc/sisc">
      <not><isset property="instdocdir"/></not>
    </condition>
    <condition property="instmandir" value="${prefix}/share/man">
      <not><isset property="instmandir"/></not>
    </condition>
    <condition property="instbindir" value="${prefix}/bin">
      <not><isset property="instbindir"/></not>
    </condition>
  </target>

  <target name="clean" depends="prepare"
          description="Remove generated sources, class files and jar files">
    <delete dir="${classdir}"/>
    <delete dir="${gendocdir}"/>
    <delete dir="${tmpdir}"/>
    <delete file="${docdir}/sss/style.xsl"/>
    <delete file="${basedir}/${basejar}"/>
    <delete file="${basedir}/${optjar}"/>
    <delete file="${basedir}/${libjar}"/>
    <delete file="${basedir}/${heapjar}"/>
    <delete file="${heap}"/>
    <delete file="${quantitydir}/Quantity.java"/>
    <delete>
      <fileset dir="${quantitydir}"
               includes=".Quantity-*"/>
    </delete>
  </target> 

  <target name="quantity-uptodate" depends="prepare">
    <uptodate property="quantityUptodate"
              targetfile="${quantitydir}/.Quantity-${quantity-type}"
              srcfile="${quantitydir}/Quantity-${quantity-type}.java.tmpl"/>
  </target>

  <target name="quantity"
          depends="quantity-uptodate"
          unless="quantityUptodate">
    <copy file="${quantitydir}/Quantity-${quantity-type}.java.tmpl"
          tofile="${quantitydir}/Quantity.java"
          overwrite="yes"/>
    <delete>
      <fileset dir="${quantitydir}"
               includes=".Quantity-*"/>
    </delete>
    <touch file="${quantitydir}/.Quantity-${quantity-type}"/>
  </target>

  <target name="compile" depends="prepare">
    <antcall target="quantity"/>
    <mkdir dir="${classdir}"/>
    <javac srcdir="${srcdir}"
           destdir="${classdir}"
           classpathref="classpath"
           target="1.2"
    	  source="1.3"
           debug="${debugging}"
           optimize="${optimization}">
      <include name="${packagename}/**"/>
      <exclude name="${packagename}/dist/**"/>
      <exclude name="${packagename}/tests/**" unless="junit.present"/>
      <exclude name="${packagename}/modules/**" if="lite"/>
    </javac>
    <javac srcdir="${srcdir}"
           destdir="${classdir}"
           classpathref="classpath"
           debug="${debugging}"
           target="1.2"
    	  source="1.3"
           optimize="${optimization}">
      <include name="${packagename}/modules/io/IO.java"/>
      <include name="${packagename}/modules/io/StringIO.java"/>
      <include name="${packagename}/modules/Annotations.java"/>
      <include name="${packagename}/modules/Primitives.java"/>
      <include name="${packagename}/modules/SimplePrimitives.java"/>
      <include name="${packagename}/modules/ComplexPrimitives.java"/>
      <include name="${packagename}/modules/R5RS.java"/>
    </javac>      
  </target>
  
  <target name="class-opt" depends="compile" if="classopt">
    <delete>
      <fileset dir="${classdir}">
        <include name="**/*_o.class"/>
      </fileset>
    </delete>
    
    <fileset dir="${classdir}" id="allclasses">
      <include name="**/*.class"/>
    </fileset>
  
    <pathconvert pathsep=" " property="allclassfiles" refid="allclasses"/>

    <property name="allclasses" value="${classdir}/**/*.class"/>
    <java jar="/home/scgmille/lib/jopt.jar" fork="true">
      <arg line="${allclassfiles}"/>
    </java>   

    <move todir="${classdir}"> 
      <fileset dir="${classdir}">
        <include name="**/*_o.class"/>
      </fileset>
      <mapper type="glob" from="*_o.class" to="*.class"/>
    </move>   
  </target>

  <target name="i18n" depends="prepare">
    <mkdir dir="${classdir}/sisc"/>
    <copy todir="${classdir}">
      <fileset dir="${srcdir}" >
        <include name="**/*.properties"/>
      </fileset>
    </copy>
  </target>

  <target name="jars" depends="compile,class-opt,i18n"> 
    <jar jarfile="${basedir}/${basejar}"
         manifest="${srcdir}/Manifest">
      <fileset dir="${classdir}">
        <include name="*/**"/>
        <exclude name="sisc/boot/**"/>
        <exclude name="sisc/modules/**"/>
      </fileset>
      <fileset dir="${classdir}">
        <include name="sisc/modules/io/Messages.properties"/>
        <include name="sisc/modules/io/IO*.class"/>
        <include name="sisc/modules/io/StringIO*.class"/>
        <include name="sisc/modules/*Primitives*.class"/>
        <include name="sisc/modules/Annotations*.class"/>
        <include name="sisc/modules/R5RS*.class"/>
      </fileset>
      <manifest>
        <section name="sisc/">
          <attribute name="Specification-Title" value="${spectitle}"/>
          <attribute name="Specification-Version" value="${specver}"/>
          <attribute name="Specification-Vendor" value="${specvendor}"/>
          <attribute name="Implementation-Title" value="sisc"/>
          <attribute name="Implementation-Version" value="${version}"/>
          <attribute name="Implementation-Vendor" value="${specvendor}"/>
        </section>
      </manifest>
    </jar>
    <jar jarfile="${basedir}/${optjar}">
      <fileset dir="${classdir}">
        <include name="sisc/boot/**"/>
        <include name="sisc/modules/**"/>
        <exclude name="sisc/modules/io/IO*.class"/>
        <exclude name="sisc/modules/io/StringIO*.class"/>
        <exclude name="sisc/modules/*Primitives*.class"/>
        <exclude name="sisc/modules/R5RS*.class"/>
      </fileset>
      <manifest>
        <section name="SISC Optional">
          <attribute name="Specification-Title" value="${spectitle}"/>
          <attribute name="Specification-Version" value="${specver}"/>
          <attribute name="Specification-Vendor" value="${specvendor}"/>
          <attribute name="Implementation-Title" value="sisc-opt"/>
          <attribute name="Implementation-Version" value="${version}"/>
          <attribute name="Implementation-Vendor" value="${specvendor}"/>
        </section>
      </manifest>
    </jar>
  </target>

  <target name="srfi-scc" depends="full-heap" unless="lite">
    <mkdir dir="${tmpdir}/sisc/libs/srfi"/>
    <java classname="sisc.REPL"
          classpath="${classdir}"
          dir="${libsrcdir}/srfi"
          fork="yes">
      <jvmarg value="-Dsisc.emitAnnotations=${siscDebugging}"/>
      <jvmarg value="-Dsisc.emitDebuggingSymbols=${siscDebugging}"/>
      <!--
      the -server stops jdk1.4.2 on windows from throwing an
      StackOverflowError.
      <jvmarg value="-server"/>
      -->
      <arg value="-h"/>
      <arg value="${heap}"/>
      <arg value="-x"/>
      <arg value="${libsrcdir}/srfi/srfi-scc.scm"/>
    </java>
  </target>

  <target name="sisclib-uptodate" depends="prepare">
    <uptodate property="sisclibUptodate"
              targetfile="${basedir}/${libjar}">
      <srcfiles dir="${libsrcdir}" includes="**/*.scm"/>
      <srcfiles file="${heap}"/>
    </uptodate>
  </target>

  <target name="build-sisclib" depends="sisclib-uptodate">
    <condition property="buildSisclib">
      <and>
        <not><isset property="lite"/></not>
        <not><isset property="sisclibUptodate"/></not>
      </and>
    </condition>
  </target>

  <target name="sisc-lib" depends="build-sisclib" if="buildSisclib">
    <antcall target="heap"/>
    <antcall target="srfi-scc"/>
    <copy file="${libsrcdir}/slib.scm" tofile="${tmpdir}/sisc/libs/slib.scm"/>
    <jar jarfile="${basedir}/${libjar}">
      <fileset dir="${tmpdir}">
        <include name="*/**"/>
      </fileset>
    </jar>
  </target>

  <target name="heap-uptodate" depends="prepare">
    <uptodate property="heapUptodate"
              targetfile="${heap}">
      <srcfiles dir="${srcdir}" includes="**/*.scm" excludes="**/srfi/**"/>
      <srcfiles dir="${srcdir}" includes="**/*.sce"/>
      <srcfiles file="${basedir}/${basejar}"/>
      <srcfiles file="${basedir}/${optjar}"/>
    </uptodate>
  </target>

  <target name="build-full-heap" depends="heap-uptodate">
    <condition property="buildFullHeap">
      <and>
        <not><isset property="lite"/></not>
        <not><isset property="heapUptodate"/></not>
      </and>
    </condition>
  </target>

  <target name="build-lite-heap" depends="heap-uptodate">
    <condition property="buildLiteHeap">
      <and>
        <isset property="lite"/>
        <not><isset property="heapUptodate"/></not>
      </and>
    </condition>
  </target>

  <target name="full-heap" depends="jars,build-full-heap" if="buildFullHeap">
    <java classname="sisc.boot.GenerateHeap"
          dir="${bootdir}"
          fork="yes">
      <classpath>
        <pathelement location="${classdir}"/>
        <pathelement location="${srcdir}"/> <!-- for srfi libs -->
      </classpath>
      <jvmarg value="-Dsisc.debugging=${siscDebugging}"/>
      <arg value="-out"/>
      <arg value="${heap}"/>
      <arg value="-files"/>
      <arg value="file:init.sce"/>
      <arg value="file:compat.sce"/>
      <arg value="file:psyntax.sce"/>
      <arg value="file:analyzer.sce"/>
      <arg value="file:eval.sce"/>
      <arg value="file:init2.scm"/>
      <arg value="file:repl.scm"/>
    </java>
  </target>

  <target name="lite-heap" depends="jars,build-lite-heap" if="buildLiteHeap">
    <java classname="sisc.boot.GenerateHeap"
          classpath="${classdir}"
          dir="${bootdir}"
          fork="yes">
      <jvmarg value="-Dsisc.debugging=${siscDebugging}"/>
      <arg value="-out"/>
      <arg value="${heap}"/>
      <arg value="-files"/>
      <arg value="file:lite.sce"/>
      <arg value="file:init.sce"/>
      <arg value="file:compat.sce"/>
      <arg value="file:psyntax.sce"/>
      <arg value="file:analyzer.sce"/>
      <arg value="file:eval.sce"/>
      <arg value="file:init2.scm"/>
      <arg value="file:repl.scm"/>
    </java>
  </target>

  <target name="bootstrap" depends="prepare">
    <antcall target="full-heap"/>
    <java classname="sisc.REPL"
          classpath="${classdir}"
          dir="${bootdir}"
          fork="yes">
      <jvmarg value="-Dsisc.emitAnnotations=${siscDebugging}"/>
      <jvmarg value="-Dsisc.emitDebuggingSymbols=${siscDebugging}"/>
      <!--
      the -server stops jdk1.4.2 on windows from throwing an
      StackOverflowError.
      <jvmarg value="-server"/>
      -->
      <arg value="-h"/>
      <arg value="${heap}"/>
      <arg value="-x"/>
      <arg value="bootstrap.scm"/>
    </java>
  </target>
    
  <target name="heap">
    <antcall target="full-heap"/>
    <antcall target="lite-heap"/>
  </target>

  <target name="heap-jar"
    depends="prepare"
    description="Package the built heap into a JAR, accessible by sisc.boot.HeapAnchor">
    <antcall target="heap"/>
    <jar jarfile="${basedir}/${heapjar}">
      <fileset dir="${classdir}" includes="sisc/boot/HeapAnchor.class"/>
      <zipfileset dir="${basedir}"
        prefix="sisc/boot" includes="sisc.shp"/>
      <manifest>
        <section name="SISC Heap">
          <attribute name="Specification-Title" value="${spectitle}"/>
          <attribute name="Specification-Version" value="${specver}"/>
          <attribute name="Specification-Vendor" value="${specvendor}"/>
          <attribute name="Implementation-Title" value="sisc-heap"/>
          <attribute name="Implementation-Version" value="${version}"/>
          <attribute name="Implementation-Vendor" value="${specvendor}"/>
        </section>
      </manifest>
    </jar>
  </target>

  <target name="javadocs" depends="prepare"
          description="Generate javadocs" unless="lite">
    <mkdir dir="${gendocdir}/javadoc"/>
    <javadoc packagenames="${packagename}.*"
             use="yes"
             sourcepath="${srcdir}"
             destdir="${gendocdir}/javadoc">
      <excludepackage name="${packagename}/tests"/>
    </javadoc>
  </target>

  <target name="docstyletest" depends="prepare" unless="docstyle.present">
    <echo>
      The manual cannot be built because the doc.style property is set to ${doc.style} and that file does not exist.
    </echo>
  </target>
  
  <target name="manual" depends="docstyletest"
          description="Generate Manual" unless="lite" if="docstyle.present">
    <copy file="${docdir}/sss/html.xsl" tofile="${docdir}/sss/style.xsl"/>
    <replace file="${docdir}/sss/style.xsl"
             token="@@@doc.style@@@"
             value="${doc.style}"/>
    <mkdir dir="${gendocdir}/sss"/>
<!--
    The Java XSLT processors seem incapable of handling the docbook
    stylesheets

    <style basedir="${docdir}/sss"
           includes="${sss}.xml"
           destdir="${gendocdir}/sss"
           style="${docdir}/sss/style.xsl">
    </style>
-->
    <exec dir="${docdir}/sss" executable="xsltproc">
      <arg value="-o"/>
      <arg file="${gendocdir}/sss/${sss}.html"/>
      <arg file="${docdir}/sss/style.xsl"/>
      <arg file="${docdir}/sss/${sss}.xml"/>
    </exec>
    <copy file="${docdir}/sss/sss.css" tofile="${gendocdir}/sss/sss.css"/>
    <delete file="${gendocdir}/sss/sss.html"/>
  </target>

  <target name="docs" depends="javadocs,manual"
          description="Generate Documentation" unless="lite"/>

  <target name="all" depends="prepare"
    description="Build SISC, its heap, docs, and the standard library">
    <antcall target="heap-jar"/>
    <antcall target="sisc-lib"/>
    <antcall target="docs"/>
  </target>

  <target name="lite-dist" depends="all" if="lite">
<!--    <java jar="jarg.jar" fork="true">
      <arg line="-nobco sisc.jar"/>
    </java>
    <move file="sisc_s.jar" tofile="sisc.jar"/>-->
    <delete dir="${dist}/lite"/>
    <mkdir dir="${dist}/lite"/>
    <mkdir dir="${dist}/lite/sisc-lite-${specver}"/>

    <copy todir="${dist}/lite/sisc-lite-${specver}"
          file="${basedir}/${basejar}"/>
    <copy todir="${dist}/lite/sisc-lite-${specver}"
          file="${heap}"/>
    <copy todir="${dist}/lite/sisc-lite-${specver}">
      <fileset dir="${basedir}">
        <include name="ChangeLog"/>
        <include name="README"/>
        <include name="COPYING"/>
        <include name="GOALS"/>
        <include name="TODO"/>
        <include name="sisc.bat"/>
      </fileset>
    </copy>

    <copy file="${basedir}/sisc.sh"
          tofile="${dist}/lite/sisc-lite-${specver}/sisc"/>

    <tar tarfile="${dist}/sisc-lite-${version}.tar">
      <tarfileset dir="${dist}/lite" mode="755">
        <include name="sisc-lite-${specver}/sisc"/>
      </tarfileset>
      <tarfileset dir="${dist}/lite">
        <include name="sisc-lite-${specver}/*"/>
        <exclude name="sisc-lite-${specver}/sisc"/>
      </tarfileset>
    </tar>

    <gzip src="${dist}/sisc-lite-${version}.tar"
           zipfile="${dist}/sisc-lite-${version}.tar.gz" />
    <delete file="${dist}/sisc-lite-${version}.tar"/>
    <zip zipfile="${dist}/sisc-lite-${version}.zip"
         basedir="${dist}/lite"/>

  </target>

  <target name="full-dist" depends="all" unless="lite">
    <delete dir="${dist}/full"/>
    <mkdir dir="${dist}/full"/>
    <mkdir dir="${dist}/full/sisc-${specver}"/>
    <mkdir dir="${dist}/full/doc"/>
    <mkdir dir="${dist}/full/doc/man"/>
    <mkdir dir="${dist}/full/doc/javadoc"/>
    <mkdir dir="${dist}/full/sisc-${specver}/scheme-src"/>
    <mkdir dir="${dist}/full/sisc-${specver}/scheme-src/srfi-22"/>

    <copy todir="${dist}/full/sisc-${specver}/scheme-src"
          file="${libsrcdir}/slib.scm"/>
    <copy todir="${dist}/full/sisc-${specver}/scheme-src"
          file="${srfidir}/optional-args.scm"/>

    <copy todir="${dist}/full/sisc-${specver}/doc">
      <fileset dir="${gendocdir}/sss">
        <include name="*.html"/>
        <include name="*.css"/>
      </fileset>
    </copy>
    <copy todir="${dist}/full/sisc-${specver}/doc/javadoc">
      <fileset dir="${gendocdir}/javadoc">
        <include name="**/*"/>
      </fileset>
    </copy>    
    <copy todir="${dist}/full/sisc-${specver}/doc/man">
      <fileset dir="${docdir}/man">
        <include name="*.*"/>
      </fileset>
    </copy>
    <copy todir="${dist}/full/sisc-${specver}/scheme-src/srfi-22/"
          file="${srfidir}/srfi-22/srfi-22.sh"/>
    <copy todir="${dist}/full/sisc-${specver}/"
          file="${basedir}/install-srfi22.sh"/>
    <copy todir="${dist}/full/sisc-${specver}/scheme-src"
          file="${srcdir}/sisc/boot/build-heapjar.scm"/>

    <copy todir="${dist}/full/sisc-${specver}"
          file="${basedir}/${basejar}"/>
    <copy todir="${dist}/full/sisc-${specver}"
          file="${basedir}/${optjar}"/>
    <copy todir="${dist}/full/sisc-${specver}"
          file="${basedir}/${libjar}"/>
    <copy todir="${dist}/full/sisc-${specver}"
          file="${heap}"/>
    <copy todir="${dist}/full/sisc-${specver}">
      <fileset dir="${basedir}">
        <include name="ChangeLog"/>
        <include name="README"/>
        <include name="COPYING"/>
        <include name="GOALS"/>
        <include name="TODO"/>
        <include name="sisc.bat"/>
      </fileset>
    </copy>

    <copy file="${basedir}/sisc.sh"
          tofile="${dist}/full/sisc-${specver}/sisc"/>

    <tar tarfile="${dist}/sisc-${version}.tar">

      <tarfileset dir="${dist}/full" mode="755">
        <include name="sisc-${specver}/sisc"/>
        <include name="sisc-${specver}/install-srfi22.sh"/>
        <include name="sisc-${specver}/scheme-src/build-heapjar.scm"/>
      </tarfileset>
      <tarfileset dir="${dist}/full">
        <include name="sisc-${specver}/**"/>
        <exclude name="sisc-${specver}/sisc"/>
        <exclude name="sisc-${specver}/install-srfi22.sh"/>
        <exclude name="sisc-${specver}/scheme-src/build-heapjar.scm"/>
      </tarfileset>
    </tar>

    <gzip src="${dist}/sisc-${version}.tar"
          zipfile="${dist}/sisc-${version}.tar.gz" />
    <delete file="${dist}/sisc-${version}.tar"/>
    <zip zipfile="${dist}/sisc-${version}.zip"
         basedir="${dist}/full"/>
  </target>

  <target name="dist" depends="full-dist,lite-dist">
  </target>

  <target name="source-dist" depends="prepare">
    <delete dir="${dist}/sisc"/>
    <cvs command="export" dest="${dist}" tag="${cvsversion}" package="sisc"/>
    <jar jarfile="${dist}/sisc-${version}.jar" 
         basedir="${dist}"  
         includes="sisc/**"/>
  </target>

  <target name="junitcheck" depends="prepare" unless="junit.present">
    <echo>
      The tests cannot be run because JUnit is not present on this system.
    </echo>
  </target>

  <target name="check" depends="junitcheck" if="junit.present">
    <antcall target="heap"/>
    <junit fork="yes">
      <jvmarg value="-Xmx256M"/>
      <sysproperty key="HEAP" value="${heap}"/>
      <classpath>
        <pathelement location="${classdir}" />
        <pathelement path="${java.class.path}" />
      </classpath>
      <formatter type="brief"/>
      <test name="sisc.tests.TestR5RS"/>
    </junit>
  </target>

  <target name="manual-print" depends="prepare" unless="lite">
    <!-- Generate the index first -->
    <mkdir dir="${gendocdir}/tmp"/>
    <exec executable="collateindex.pl" dir="${docdir}/sss"
          output="${docdir}/sss/index.xml">
      <arg line="-N"/>
    </exec>
    <exec executable="jw" dir="${docdir}/sss"> 
      <arg line="-o ${gendocdir}/tmp -l ${xmldcl} -V html-index"/>
      <arg value="${sss}.xml"/>
    </exec>    
    <exec executable="collateindex.pl" dir="${docdir}/sss">
      <arg value="-t"/>
      <arg value="Index of Functions, Parameters, and Syntax"/>
      <arg line="-g -o index.xml ${gendocdir}/tmp/HTML.index"/>
    </exec>
    <delete dir="${gendocdir}/tmp"/>

    <!-- Generate the tex output -->
    <exec executable="jw" dir="${docdir}/sss"> 
      <arg line="-o ${gendocdir} -l ${xmldcl} -b tex"/>
      <arg value="${sss}.xml"/>
    </exec>
    <exec executable="jadetex" dir="${gendocdir}">
      <arg value="${sss}.tex"/>
    </exec>
    <exec executable="jadetex" dir="${gendocdir}">
      <arg value="${sss}.tex"/>
    </exec>
    <exec executable="jadetex" dir="${gendocdir}">
      <arg value="${sss}.tex"/>
    </exec>

    <!-- Convert to PS and PDF -->
    <exec executable="dvips" dir="${gendocdir}">
      <arg value="${sss}.dvi"/>
    </exec>
    <exec executable="dvipdfm" dir="${gendocdir}">
      <arg value="${sss}.dvi"/>
    </exec>
  </target>

  <!-- Handle releases --> 
  <target name="tag" depends="prepare">
    <cvs compression="true">
      <commandline>
        <argument line="tag -F"/>
        <argument value="${cvsversion}"/>
      </commandline>
    </cvs>
  </target> 

  <!-- Installation target -->
  <target name="debian-install" depends="prepare-install">
    <mkdir dir="${instlibdir}"/>
    <mkdir dir="${instdocdir}"/>
    <mkdir dir="${instmandir}"/>
    <mkdir dir="${instmandir}/man1"/>
    <copy todir="${instlibdir}">
      <fileset dir="${basedir}">
        <include name="*.jar"/>
        <include name="*.shp"/>
      </fileset>
    </copy>
    <copy todir="${instdocdir}">
      <fileset dir="${basedir}">
        <include name="ChangeLog"/>
        <include name="README"/>
        <include name="GOALS"/>
        <include name="TODO"/>
      </fileset>
      <fileset dir="${gendocdir}">
        <include name="sss/**"/>
      </fileset>
    </copy>
    <copy tofile="${instbindir}/sisc" 
          file="${basedir}/sisc.sh"/>
    <copy todir="${instbindir}" 
          file="${srfidir}/srfi-22/srfi-22.sh"/>
    <copy todir="${instbindir}" 
          file="${srcdir}/sisc/boot/build-heapjar.scm"/>
    <copy todir="${instmandir}/man1"
          file="${docdir}/man/sisc.1"/>
    <exec executable="bash">
      <arg value="${basedir}/install-srfi22.sh"/>
      <arg value="${instbindir}"/>
      <arg value="${srfidir}/srfi-22/"/>
    </exec>
    <chmod file="${instbindir}/srfi-22.sh" perm="0755"/>
    <chmod file="${instbindir}/build-heapjar.scm" perm="0755"/>
  </target>

  <target name="install" depends="debian-install">
    <copy todir="${instdocdir}">
      <fileset dir="${basedir}">
        <include name="COPYING"/>
      </fileset>
    </copy>
    <copy todir="${instbindir}" 
          file="${basedir}/sisc.bat"/>
    <chmod file="${instbindir}/sisc" perm="0755"/>
  </target>

  <target name="release-full-dist" depends="clean,dist"/> 
  <target name="release" depends="tag,source-dist"/> 
</project>
