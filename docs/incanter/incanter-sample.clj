; From https://gist.github.com/pingles/1160386
(defn exponential-smooth
	"
Smooths a sequence with an exponentially decreasing weight.
 
Arguments:
x -- a sequence of numbers
f -- the smoothing factor (between 0 and 1). close to 0 will produce
a stronger smoothing effect less responsive to recent values. closer
to 1 will have less of an effect and give greater weight to recent
values.
 
Examples:
(exponential-smooth (range 1 500) 0.9)
 
References:
http://en.wikipedia.org/wiki/Smoothing
http://en.wikipedia.org/wiki/Exponential_smoothing
"
[x f]
(letfn [
	(smooth
	  [alpha st xt]
	  (conj st
		(+
		 (* alpha xt)
		 (* (- 1 alpha) (last st)))))]
  (reduce (partial smooth f) [(first x)] (rest x))))

(use '(incanter core charts pdf stats io datasets))

(def zero '(0))
(def sp (xy-plot zero zero :title "Graph" :x-label "X" :y-label "Y" :series-label "Origin" :legend true :points true ))
(add-lines sp '(1 2 3) '(40 50 60) :series-label "Big")
(add-lines sp '(1 2 3) (exponential-smooth '(40 50 60) 0.9) :series-label "Big Smooth")
(add-lines sp '(1 2 3 17) '(20 55 60 18) :series-label "Small")
(add-lines sp (range 1 100) (range 1 100) :series-label "500n")
(add-lines sp (range 1 100) (exponential-smooth (range 1 100) 0.9) :series-label "500s")
(view sp)
(save-pdf (function-plot sin -4 4) "/tmp/incanter-sample.pdf")
(save-pdf sp "/tmp/incanter-sample2.pdf")

(def sp (xy-plot zero zero :title "Graph" :x-label "X" :y-label "Y" :series-label "Origin" :legend true :points true ))
(def x (range 1 124))
(def y '(110037.79 129339.24 107991.13 104663.33 121791.56 117404.57 99787.64 113333.58 105582.06 107038.34 106370.12 104274.88 76651.85 84340.84 94929.81 98283.50 94908.58 66321.24 86807.29 75568.31 100712.94 79386.93 93991.23 80598.22 77522.40 86441.63 68778.69 80069.78 75080.85 84561.45 84412.78 93952.75 101442.08 54485.30 83813.13 89306.17 110721.20 98308.10 91392.99 96493.24 82183.24 99937.03 79298.10 72851.50 72236.61 63931.69 89302.24 71595.11 71862.39 72791.01 68161.02 89189.86 56194.63 71004.84 62473.88 101096.61 78973.60 66804.82 70889.38 55372.44 64624.99 71957.51 104350.06 81390.16 77695.34 78743.36 72456.08 71477.51 72260.51 76007.18 72581.23 89345.90 70895.08 59929.43 62636.18 40228.01 70767.96 59389.82 64411.25 61430.89 50840.94 67449.67 43251.91 58080.28 58162.37 86748.88 58410.45 47789.01 44909.72 49865.12 52339.84 58013.43 72051.93 80497.70 53975.58 57271.57 53343.52 79258.35 71528.99 70323.53 65039.49 46880.28 62859.62 41578.78 44388.41 49093.82 47935.69 63191.25 42498.44 50636.03 46453.21 57764.63 48602.45 52348.20 62052.34 46252.56 76931.32 44980.00 52199.81 56754.63 57080.13 57507.24 31475.39 ))
(add-lines sp x y  :series-label "br")
;;(def lm (linear-model x y))(add-lines sp x (:fitted lm) :series-label "brlm")
(view sp)

(use '(clj-pdf [core :as clj-pdf-core]
               [svg :as clj-pdf-svg]
               [charting :as clj-pdf-charting]
               [graphics-2d :as clj-pdf-graphics-2d]))
               
;;;       core  as svg charting graphics-2d))

(defn test-plotx
 []
 (let [x '(1 2 3 4)
       y '(1 3 5 7)
       plot1 (scatter-plot x y)
       out (new java.io.ByteArrayOutputStream)]
    (org.jfree.chart.ChartUtilities/writeScaledChartAsPNG out plot1 300 200 1 1)    
    (.toByteArray out)))

(defn chart-to-byte-array-png-image 
  [crt width height]
  (let [out (new java.io.ByteArrayOutputStream)]
    (org.jfree.chart.ChartUtilities/writeScaledChartAsPNG out crt width height 1 1)
    (.toByteArray out)))


(pdf [{:title "Data" :size :b0 } [:table 
          [[:image (test-plotx)]                               [:image (chart-to-byte-array-png-image sp 500 500) b]]
          [[:image (test-plotx)]                               [:image (chart-to-byte-array-png-image sp 350 350) ]]
          [[:image (chart-to-byte-array-png-image sp 350 350) ][:image (test-plotx)]]
          ]]
     "/tmp/test7.pdf")

(def zero '(0))
(def sp (xy-plot zero zero :title "Graph" :x-label "X" :y-label "Y" :series-label "Origin" :legend true :points true ))
(def xaxis (range 1 128))
(def user '(2682 2911 3192 3407 3584 3797 4072 4357 4472 4579 4628 4708 4795 4937 5093 5112 5169 5321 5533 5733 5982 6259 6455 6595 6773 7001 7245 7593 7926 8138 8328 8525 8690 8907 9327 9704 9843 9945 9976 9948 10113 10634 11524 11934 12155 12357 12514 12763 12950 13261 13413 13512 13565 13714 13872 14129 14494 14552 14677 14754 14978 15190 15474 15899 15818 15926 15925 15950 15978 16109 16287 16296 16391 16528 16521 16573 16799 17038 17183 17327 17401 17523 17592 17694 17899 17752 17761 17820 17844 17882 17951 18127 18106 18098 18179 18294 18290 18406 18505 18574 18545 18514 18517 18474 18449 18408 18212 18121 17967 17671 17620 17602 17566 17477 17366 17256 17154 17054 17055 17044 16959 16897 16799 16665 16631 16618 16626 16481 16453 16417 16304 16253 16193 16118 15970 15903 15759 15597 15551 15549 15592 15547 15457 15401 15396 15405 15328 15230 15072 14933 14757 14528 14363 14315 14269 14215 14130 14105 14089 14123 14258 14471 14524 14540 14656 14727 14832 15040 15295 15436 15633 15893 16187 16477 16823 16939 16983 17107 17278 17456 17664 18029 18409 18600 18799 18924 19019 19072 19175 19241 19251 19228 19221 19218 19241 19290 19331 19286))
(def bill '(17 130 39 43 34 30 21 27 109 44 48 33 38 28 25 100 45 45 37 27 37 28 102 42 45 50 23 35 25 110 48 56 55 27 10 14 8 12 437 1625 1383 474 471 297 356 554 1216 1094 672 891 498 414 649 1053 1043 785 766 520 552 645 1119 1034 884 935 657 705 810 1161 1131 969 1002 691 679 824 1112 1073 933 976 640 796 873 650 1498 878 914 691 711 713 761 1308 863 1028 736 749 708 940 1342 1007 1072 761 849 785 923 1232 995 1076 752 750 776 885 1197 994 971 660 700 714 917 1155 908 958 690 733 837 989 1192 1027 975 709 728 843 954 1227 1007 915 715 735 831 962 1148 1016 1023 717 691 758 898 1113 935 930 652 663 734 863 1159 1004 959 712 709 813 896 1107 955 948 692 686 755 874 1137 988 964 681 501 642 656 964 905 893 624 482 674 687 974 858 872 548 535 630 792 934 1188 1134 811 746 640 806 1014 1127 758 860 ))
(def billing-rate '(0.6338553318 4.4658193061 1.2218045113 1.2621074259 0.9486607143 0.7900974454 0.5157170923 0.6196924489 2.4373881932 0.9609084953 1.0371650821 0.7009345794 0.7924921794 0.5671460401 0.4908698213 1.9561815336 0.8705745792 0.8457056944 0.6687149828 0.4709576138 0.6185222334 0.4473558076 1.5801704105 0.6368460955 0.6644027757 0.714183688 0.3174603175 0.4609508758 0.3154176129 1.3516834603 0.5763688761 0.6568914956 0.6329113924 0.3031323678 0.1072156106 0.144270404 0.0812760337 0.1206636501 4.3805132318 16.3349416968 13.6754672204 4.4574007899 4.0871225269 2.4886877828 2.92883587 4.4832888241 9.7171168292 8.5716524328 5.1891891892 6.7189503054 3.7128159248 3.0639431616 4.7843715444 7.6782849643 7.5187427912 5.5559487579 5.2849454947 3.5733919736 3.7609865776 4.3716958113 7.4709574042 6.8071099408 5.7128085821 5.8808730109 4.1534960172 4.4267235966 5.0863422292 7.2789968652 7.078482914 6.0152709665 6.1521458832 4.2403043692 4.1425172351 4.9854791868 6.7308274318 6.4743860496 5.553902018 5.7283718746 3.7246115347 4.5939862642 5.0169530487 3.7094104891 8.5152341974 4.9621340567 5.1064305268 3.8925191528 4.0031529756 4.0011223345 4.2647388478 7.3146180517 4.8075316138 5.6710983616 4.064950845 4.1385788485 3.8946036636 5.1382967093 7.3373428103 5.4710420515 5.7930289111 4.0971250135 4.5780533837 4.2400345684 4.9846087379 6.6688318718 5.3932462464 5.8452846588 4.1291456183 4.1388444346 4.3190293316 5.0082055345 6.7934165721 5.6470855585 5.5277240123 3.7763918293 4.0308649084 4.1376912378 5.3456919669 6.7726046675 5.3239519203 5.6207463037 4.0686361224 4.3380481742 4.9824394309 5.9345934593 7.1673381035 6.1800457335 5.8643089137 4.301923427 4.4247249742 5.1349211184 5.8513248283 7.5493754999 6.2187364911 5.676882988 4.4771446462 4.6217694775 5.2731772321 6.1678527922 7.3821619188 6.5341822625 6.5610569523 4.6118222165 4.4704664553 4.9217583274 5.832683814 7.2249269718 6.0999478079 6.1063690085 4.3259023355 4.4398312462 4.9739106865 5.940253304 8.0693448444 7.0136220747 6.7208634102 5.008793528 5.0176928521 5.7639135058 6.3595712968 7.8382779863 6.6979941086 6.5510331007 4.7645276783 4.7180192572 5.1514737991 5.9346778027 7.6658576052 6.5691489362 6.302713305 4.4117647059 3.2047591633 4.0395142516 4.0526348304 5.8505795958 5.3795399156 5.2718578428 3.6742624978 2.8175600631 3.9009144577 3.9356095325 5.5140398551 4.7589993899 4.7368135151 2.9462365591 2.8458960583 3.3291058973 4.1642567958 4.8972315436 6.1955671447 5.8936645704 4.2127681679 3.8797586853 3.3296914833 4.1939848059 5.2699963619 5.8424053914 3.921162899 4.4591931971 ))
;(add-lines sp xaxis user :series-label "Users")
;(add-lines sp xaxis bill :series-label "Bill")
(add-lines sp xaxis billing-rate :series-label "Billing Rate")
(view sp)
