head	1.1;
branch	1.1.1;
access;
symbols
	start:1.1.1.1 rel-0-1-dev:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.16.03.33.32;	author acolomba;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.16.03.33.32;	author acolomba;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.02.17.01.08.27;	author acolomba;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.03.02.03.24.40;	author acolomba;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.03.19.22.01.25;	author acolomba;	state dead;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@(require-library 'siscweb/k-hash)

(module siscweb/k-manager
  (<k-manager> store/k! fetch/k list/k clear-all/k)

  (import type-system)
  (import generic-procedures)
  (import oo)
  
  (import hashtable)

  (import siscweb/k-hash)

  (include "k-manager-inc.scm"))
@


1.1.1.1
log
@initial import
@
text
@@


1.1.1.2
log
@did away with the -inc business; i think it was a bad idea
@
text
@a0 31
;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.


d9 1
a9 1

d14 1
a14 38
  (define-generics :v :v! :i :i!)
  (define-class (<k-manager>)
    (v :v :v!)
    (i :i :i!))

  (define-method (initialize (<k-manager> mgr))
    (:v! mgr (make-vector 10))
    (:i! mgr 0))


  (define-generics store/k! fetch/k list/k clear-all/k)

  (define-method (store/k! (<k-manager> mgr) (<procedure> k))
    (let ((id (get-random-hash)))
      (vector-set! (:v mgr) (:i mgr) (cons id k))
      (:i! mgr (modulo (+ 1 (:i mgr)) (vector-length (:v mgr))))
      id))


  ;; man this is some ugly code
  (define-method (fetch/k (<k-manager> mgr) (<string> id))
    (call/cc (lambda (return-k)
               (do ((v (:v mgr))
                    (i 0 (+ 1 i)))
                   ((= i (vector-length v)) #f)
                 (when (and (pair? (vector-ref v i))
                            (equal? id (car (vector-ref v i))))
                   (return-k (cdr (vector-ref v i))))))))

  (define-method (list/k (<k-manager> mgr))
    (:v mgr))


  ;; this is so wrong
  (define-method (clear-all/k (<k-manager> mgr))
    (:v! mgr (make-vector 10)))

)
@


1.1.1.3
log
@implementation is now hash-based with very rudimentary continuation expiration
@
text
@a31 2
(require-library 'sisc/libs/srfi/srfi-19) ; time data types and procedures

d35 1
a35 1
  (<k-manager> store/k! fetch/k list/k clear-all/k!)
a40 2

  (import srfi-19)
d45 1
a45 1
  (define-generics :index :index!)
d47 2
a48 1
    (index :index :index!))
d51 2
a52 1
    (:index! mgr (make-hashtable equal? #f)))
d55 1
a55 1
  (define-generics store/k! fetch/k purge-expired/k! list/k clear-all/k!)
d57 4
a60 4
  (define-method (store/k! (<k-manager> mgr) (<procedure> k) (<number> ttl)) ; seconds
    (let ((id (get-random-hash))
          (expiration-time (add-duration (current-time) (make-time 'time-duration 0 ttl))))
      (hashtable/put! (:index mgr) id `((id ,id) (continuation ,k) (expiration-time ,expiration-time)))
a62 13
  (define-method (store/k! (<k-manager> mgr) (<procedure> k))
    (store/k! mgr k 300))


  (define-method (purge-expired/k! (<k-manager> mgr))
    (define (expired? k-tuple)
      (time<? (cadr (assq 'expiration-time k-tuple))
              (current-time)))
    (let ((now (current-time)))
      (hashtable/for-each (lambda (key value)
                            (if (expired? value)
                                (hashtable/remove! (:index mgr) key)))
                          (:index mgr))))
d64 1
d66 7
a72 5
    (purge-expired/k! mgr)
    (let ((k-tuple (hashtable/get (:index mgr) id)))
      (if k-tuple
          (cadr (assq 'continuation k-tuple))
          #f)))
d75 1
a75 4
    (hashtable/map (lambda (key value)
                     (cons key value))
                   (:index mgr)))

d78 3
a80 2
  (define-method (clear-all/k! (<k-manager> mgr))
    (hashtable/clear! (:index mgr)))
@


1.1.1.4
log
@removed and substituted with ContinuationManager
@
text
@@


