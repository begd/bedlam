head	1.3;
access;
symbols
	rel-0-6-dev:1.3.0.4
	rel-0-5-fix:1.3.0.2
	rel-0-5:1.3
	rel-0-5-dev-safe-frames:1.2.4.3.0.2
	Root_rel-0-5-dev-safe-frames:1.2.4.3
	rel-0-4-fix-0:1.2
	rel-0-5-dev:1.2.0.4
	rel-0-4-fix:1.2.0.2
	rel-0-3-fix-3:1.1.4.3
	rel-0-3-fix-2:1.1.4.2
	rel-0-3-fix:1.1.0.4
	rel-0-4-dev-sisc-1-11:1.1.2.6
	rel-0-4-dev:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2007.04.12.03.51.18;	author acolomba;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.03.01.42.22;	author acolomba;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2005.11.27.22.30.09;	author acolomba;	state Exp;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2005.12.01.01.37.32;	author acolomba;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.12.01.02.02.55;	author acolomba;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2005.12.01.04.25.38;	author acolomba;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2005.12.15.04.24.59;	author acolomba;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2006.01.13.02.47.55;	author acolomba;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2006.01.14.02.01.38;	author acolomba;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2006.04.09.18.48.59;	author acolomba;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2006.04.13.00.33.46;	author acolomba;	state Exp;
branches;
next	1.1.2.9;

1.1.2.9
date	2006.04.13.02.57.50;	author acolomba;	state Exp;
branches;
next	;

1.1.4.1
date	2005.11.27.22.30.09;	author acolomba;	state dead;
branches;
next	1.1.4.2;

1.1.4.2
date	2006.02.25.17.12.02;	author acolomba;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2006.04.15.15.55.23;	author acolomba;	state Exp;
branches;
next	;

1.2.4.1
date	2007.01.30.00.53.41;	author acolomba;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2007.01.30.01.05.11;	author acolomba;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2007.01.30.01.32.25;	author acolomba;	state Exp;
branches;
next	;


desc
@@


1.3
log
@merged from rel-0-5-dev
@
text
@;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005-2006
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.


(require-library 'sisc/libs/srfi/srfi-16) ; syntax for procedures of variable arity
(require-library 'sisc/libs/srfi/srfi-18) ; multithreading support
(require-library 'sisc/libs/srfi/srfi-19) ; time data types and procedures

(require-library 'siscweb/request)
(require-library 'util/misc)

(module siscweb/session
  (current-session
   session/get-creation-time session/get-id
   session/get-java-attribute session/get-java-attribute-names
   session/get-last-accessed-time session/get-max-inactive-interval
   session/get-servlet-context session/invalidate!
   session/make-parameter session/new?
   session/remove-java-attribute! session/set-java-attribute!
   session/set-max-inactive-interval! current-session)

  (import s2j)

  (import srfi-16)
  ;; time? is defined both in srfi-18 and srfi-19
  (import* srfi-18 make-mutex mutex-lock! mutex-unlock!)
  (import srfi-19)

  (import siscweb/request)
  (import util/misc)

  (define-generic-java-methods
    (jget-attribute |getAttribute|)
    (jget-attribute-names |getAttributeNames|)
    (jget-creation-time |getCreationTime|)
    (jget-max-inactive-interval |getMaxInactiveInterval|)
    (jget-servlet-context |getServletContext|)
    (jget-id |getId|)
    (jget-last-accessed-time |getLastAccessedTime|)
    (jinvalidate |invalidate|)
    (jis-new |isNew|)
    (jremove-attribute |removeAttribute|)
    (jset-attribute |setAttribute|)
    (jset-max-inactive-interval |setMaxInactiveInterval|))


  (define (session/get-scheme-attribute name)
    (let ((jvalue (session/get-java-attribute name)))
      (if (java-null? jvalue)
          #f
          (java-unwrap jvalue))))

  (define (session/set-scheme-attribute! name value)
    (session/set-java-attribute! name (if value (java-wrap value) jnull))
    (void))

  (define (session/remove-scheme-attribute! name)
    (session/remove-java-attribute! name))

  (define session/make-parameter
    (case-lambda
     ((name)
      (session/make-parameter name #f))
     ((name thread-safe?)
      (if thread-safe?
          (let ((mutex (make-mutex)))
            (case-lambda
             (()
              (dynamic-wind
               (lambda () (mutex-lock! mutex))
               (lambda () (session/get-scheme-attribute name))
               (lambda () (mutex-unlock! mutex))))
             ((value)
              (dynamic-wind
               (lambda () (mutex-lock! mutex))
               (lambda ()
                 (if value
                     (begin
                       (session/set-scheme-attribute! name value)
                       value)
                     (session/remove-scheme-attribute! name)))
               (lambda () (mutex-unlock! mutex))))))
          (case-lambda
           (() (session/get-scheme-attribute name))
           ((value)
            (if value
                (begin
                  (session/set-scheme-attribute! name value)
                  value)
                (session/remove-scheme-attribute! name))))))))

  (define (session/get-java-attribute name)
    (jget-attribute (current-session) (->jstring name)))

  (define (session/remove-java-attribute! name)
    (jremove-attribute (current-session) (->jstring name))
    (void))

  (define (session/set-java-attribute! name java-object)
    (jset-attribute (current-session) (->jstring name) java-object)
    (void))

  (define (session/get-java-attribute-names)
    (enumeration/map
     ->string
     (jget-attribute-names (current-session))))


  (define (session/get-creation-time)
    (let ((ms (->number (jget-creation-time (current-session)))))
      (make-time 'time-monotonic 0 (quotient ms 1000))))

  (define (session/get-last-accessed-time)
    (let ((ms (->number (jget-last-accessed-time (current-session)))))
      (make-time 'time-monotonic 0 (quotient ms 1000))))

  (define (session/get-id)
    (->string (jget-id (current-session))))

  (define (session/get-servlet-context)
    (jget-servlet-context (current-session)))

  (define (session/get-max-inactive-interval)
    (->number (jget-max-inactive-interval (current-session))))

  (define (session/set-max-inactive-interval! seconds)
    (jset-max-inactive-interval (current-session) (->jint seconds))
    (void))


  (define (session/invalidate!)
    (jinvalidate (current-session))
    (void))

  (define (session/new?)
    (->boolean (jis-new (current-session))))


  (define (current-session)
    (request/get-session))
)
@


1.2
log
@merged from rel-0-4-dev
@
text
@d33 1
d52 2
d87 1
a87 1
  (define (session/make-parameter name)
d89 29
a117 8
      (() (session/get-scheme-attribute name))
      ((value)
       (if value
           (begin
             (session/set-scheme-attribute! name value)
             value)
           (session/remove-java-attribute! name)))))

@


1.2.4.1
log
@session/make-parameter now accepts a thread-safe? flag
@
text
@a32 1
(require-library 'sisc/libs/srfi/srfi-18) ; multithreading support
a52 9
  ;; time? is defined both in srfi-18 and srfi-19
  (module mutex-srfi-18
    (make-mutex mutex-lock! mutex-unlock!)

    (import srfi-18))
  (import mutex-srfi-18)



d84 1
a84 1
  (define session/make-parameter
d86 8
a93 29
     ((name)
      (session/make-parameter name #f))
     ((name thread-safe?)
      (if thread-safe?
          (let ((mutex (make-mutex)))
            (case-lambda
             (()
              (dynamic-wind
               (lambda () (mutex-lock! mutex))
               (lambda () (session/get-scheme-attribute name))
               (lambda () (mutex-unlock! mutex))))
             ((value)
              (dynamic-wind
               (lambda () (mutex-lock! mutex))
               (lambda ()
                 (if value
                     (begin
                       (session/set-scheme-attribute! name value)
                       value)
                     (session/remove-java-attribute! name)))
               (lambda () (mutex-unlock! mutex))))))
          (case-lambda
           (() (session/get-scheme-attribute name))
           ((value)
            (if value
                (begin
                  (session/set-scheme-attribute! name value)
                  value)
                (session/remove-java-attribute! name))))))))
@


1.2.4.2
log
@minor inconsequential fix
@
text
@d115 1
a115 1
                     (session/remove-scheme-attribute! name)))
d124 1
a124 1
                (session/remove-scheme-attribute! name))))))))
@


1.2.4.3
log
@uses import* srfi-18
@
text
@d52 2
d55 7
a61 2
  (import* srfi-18 make-mutex mutex-lock! mutex-unlock!)
  (import srfi-19)
@


1.1
log
@initial import
@
text
@d14 1
a14 1
;;; Portions created by the Initial Developer are Copyright (C) 2005
d32 4
a35 1
(require-library 'siscweb/contcentric)
d39 8
a46 2
  (make-session-parameter
   get-session-attribute get-session-attribute-names set-session-attribute)
a48 1
  (import hashtable)
d50 4
a53 1
  (import siscweb/contcentric)
d56 89
a144 37
  (define-generic-java-methods get-attribute get-attribute-names set-attribute)

  (define (make-session-parameter initial-value)
    (let ((name (gensym)))
      (lambda x
        (let ((ctx (java-unwrap (get-context))))
          (cond ((null? x)
                 (hashtable/get ctx name))
                ((not (car x))
                 (hashtable/remove! ctx name))
                ((else
                  (hashtable/put! ctx name (car x)))))))))

  (define (get-session-attribute name)
    (get-attribute (current-session) (->jstring name)))

  (define (set-session-attribute name java-object)
    (set-attribute (current-session) (->jstring name) java-object))

  (define (get-session-attribute-names)
    (enumeration/map ->symbol
                     (get-attribute-names (current-session))))


  (define (get-context)
    (define context-name (->jstring "siscweb.context"))

    (define (create-context)
      (let ((jctx (java-wrap (make-hashtable eq? #f))))
        (set-attribute (current-session) context-name jctx)
        jctx))

    (let ((jctx (get-attribute (current-session) context-name)))
      (if (java-null? jctx)
          (create-context)
          jctx)))
  )
@


1.1.4.1
log
@file session.scm was added on branch rel-0-3-fix on 2006-02-25 17:12:02 +0000
@
text
@d1 81
@


1.1.4.2
log
@merged from rel-0-4-dev-sisc-1-11
@
text
@a0 82
;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.


(require-library 'siscweb/contcentric)
(require-library 'util/misc)

(module siscweb/session
  (session/make-parameter
   session/get-java-attribute session/get-java-attribute-names
   session/remove-java-attribute! session/set-java-attribute!
   get-current-session)

  (import s2j)
  (import hashtable)

  (import siscweb/contcentric)
  (import util/misc)

  (define-generic-java-methods get-attribute get-attribute-names get-session set-attribute)

  (define (session/make-parameter name)
    (lambda x
      (if (pair? x)
          (set-scheme-attribute! name (car x))
          (get-scheme-attribute name))))


  (define (session/get-java-attribute name)
    (get-attribute (get-current-session) (->jstring name)))

  (define (session/remove-java-attribute! name)
    (remove-attribute (get-current-session) (->jstring name)))

  (define (session/set-java-attribute! name java-object)
    (set-attribute (get-current-session) (->jstring name) java-object))

  (define (session/get-java-attribute-names)
    (enumeration/map
     ->symbol
     (get-attribute-names (get-current-session))))


  (define (get-scheme-attribute name)
    (let ((jvalue (session/get-java-attribute name)))
      (if (java-null? jvalue)
          #f
          (java-unwrap jvalue))))

  (define (set-scheme-attribute! name value)
    (session/set-java-attribute! name (if value (java-wrap value) jnull)))

  (define (get-current-session)
    (get-session (current-request)))
  )
@


1.1.4.3
log
@merged from rel-0-4-dev
@
text
@d14 1
a14 1
;;; Portions created by the Initial Developer are Copyright (C) 2005-2006
d32 1
a32 4
(require-library 'sisc/libs/srfi/srfi-16) ; syntax for procedures of variable arity
(require-library 'sisc/libs/srfi/srfi-19) ; time data types and procedures

(require-library 'siscweb/request)
d36 1
a36 2
  (current-session
   session/get-creation-time session/get-id
a37 3
   session/get-last-accessed-time session/get-max-inactive-interval
   session/get-servlet-context session/invalidate!
   session/make-parameter session/new?
d39 1
a39 1
   session/set-max-inactive-interval! current-session)
d42 1
d44 1
a44 4
  (import srfi-16)
  (import srfi-19)

  (import siscweb/request)
d47 1
a47 27
  (define-generic-java-methods
    (jget-attribute |getAttribute|)
    (jget-attribute-names |getAttributeNames|)
    (jget-creation-time |getCreationTime|)
    (jget-max-inactive-interval |getMaxInactiveInterval|)
    (jget-servlet-context |getServletContext|)
    (jget-id |getId|)
    (jget-last-accessed-time |getLastAccessedTime|)
    (jinvalidate |invalidate|)
    (jis-new |isNew|)
    (jremove-attribute |removeAttribute|)
    (jset-attribute |setAttribute|)
    (jset-max-inactive-interval |setMaxInactiveInterval|))


  (define (session/get-scheme-attribute name)
    (let ((jvalue (session/get-java-attribute name)))
      (if (java-null? jvalue)
          #f
          (java-unwrap jvalue))))

  (define (session/set-scheme-attribute! name value)
    (session/set-java-attribute! name (if value (java-wrap value) jnull))
    (void))

  (define (session/remove-scheme-attribute! name)
    (session/remove-java-attribute! name))
d50 4
a53 8
    (case-lambda
      (() (session/get-scheme-attribute name))
      ((value)
       (if value
           (begin
             (session/set-scheme-attribute! name value)
             value)
           (session/remove-java-attribute! name)))))
d57 1
a57 1
    (jget-attribute (current-session) (->jstring name)))
d60 1
a60 2
    (jremove-attribute (current-session) (->jstring name))
    (void))
d63 1
a63 2
    (jset-attribute (current-session) (->jstring name) java-object)
    (void))
d67 2
a68 2
     ->string
     (jget-attribute-names (current-session))))
d71 5
a75 28
  (define (session/get-creation-time)
    (let ((ms (->number (jget-creation-time (current-session)))))
      (make-time 'time-monotonic 0 (quotient ms 1000))))

  (define (session/get-last-accessed-time)
    (let ((ms (->number (jget-last-accessed-time (current-session)))))
      (make-time 'time-monotonic 0 (quotient ms 1000))))

  (define (session/get-id)
    (->string (jget-id (current-session))))

  (define (session/get-servlet-context)
    (jget-servlet-context (current-session)))

  (define (session/get-max-inactive-interval)
    (->number (jget-max-inactive-interval (current-session))))

  (define (session/set-max-inactive-interval! seconds)
    (jset-max-inactive-interval (current-session) (->jint seconds))
    (void))


  (define (session/invalidate!)
    (jinvalidate (current-session))
    (void))

  (define (session/new?)
    (->boolean (jis-new (current-session))))
d77 2
d80 3
a82 3
  (define (current-session)
    (request/get-session))
)
@


1.1.2.1
log
@fixed typo
@
text
@d55 2
a56 2
                (else
                  (hashtable/put! ctx name (car x))))))))
@


1.1.2.2
log
@changed names; general cleanup
@
text
@d37 1
a37 2
   session/get-java-attribute session/get-java-attribute-names
   session/set-java-attribute)
d50 7
a56 3
        (if (pair? x)
            (set-scheme-attribute! name (car x))
            (get-scheme-attribute name)))))
d58 1
a58 2

  (define (session/get-java-attribute name)
d61 1
a61 1
  (define (session/set-java-attribute name java-object)
d64 17
a80 29
  (define (session/get-java-attribute-names)
    (enumeration/map
     ->symbol
     (get-attribute-names (current-session))))


  (define (get-scheme-session)
    (define session-name (->jstring "siscweb.session"))

    (define (make-session)
      (let ((ht (make-hashtable eq? #f)))
        (set-attribute (current-session) session-name (java-wrap ht))
        ht))

    (define (get-session)
      (let ((s (get-attribute (current-session) session-name)))
        (if (java-null? s) #f (java-unwrap s))))

    (let ((s (get-session)))
      (if s s (make-session))))

  (define (get-scheme-attribute name)
    (hashtable/get (get-scheme-session) name))

  (define (set-scheme-attribute! name value)
    (if value
        (hashtable/put! (get-scheme-session) name value)
        (hashtable/remove! (get-scheme-session) name)))

@


1.1.2.3
log
@reimplemented scheme session
@
text
@d48 6
a53 5
  (define (make-session-parameter name)
    (lambda x
      (if (pair? x)
          (set-scheme-attribute! name (car x))
          (get-scheme-attribute name))))
d68 15
d84 1
a84 4
    (let ((jvalue (session/get-java-attribute name)))
      (if (java-null? jvalue)
          #f
          (java-unwrap jvalue))))
d87 3
a89 1
    (session/set-java-attribute name (if value (java-wrap value) jnull)))
@


1.1.2.4
log
@exported functions are more regularly named now
@
text
@d36 1
a36 1
  (session/make-parameter
d38 1
a38 1
   session/set-java-attribute!)
d48 1
a48 1
  (define (session/make-parameter name)
d58 1
a58 1
  (define (session/set-java-attribute! name java-object)
d74 1
a74 1
    (session/set-java-attribute! name (if value (java-wrap value) jnull)))
@


1.1.2.5
log
@added session/remove-java-attribute!; does not export current-session
anymore
@
text
@d38 1
a38 2
   session/remove-java-attribute! session/set-java-attribute!
   current-session)
d46 1
a46 1
  (define-generic-java-methods get-attribute get-attribute-names get-session set-attribute)
a57 3
  (define (session/remove-java-attribute! name)
    (remove-attribute (current-session) (->jstring name)))

a75 2
  (define (current-session)
    (get-session (current-request)))
@


1.1.2.6
log
@renamed current-session to get-current-session
@
text
@d39 1
a39 1
   get-current-session)
d57 1
a57 1
    (get-attribute (get-current-session) (->jstring name)))
d60 1
a60 1
    (remove-attribute (get-current-session) (->jstring name)))
d63 1
a63 1
    (set-attribute (get-current-session) (->jstring name) java-object))
d68 1
a68 1
     (get-attribute-names (get-current-session))))
d80 1
a80 1
  (define (get-current-session)
@


1.1.2.7
log
@completed wrappers on session object
@
text
@d14 1
a14 1
;;; Portions created by the Initial Developer are Copyright (C) 2005-2006
a31 2
(require-library 'sisc/libs/srfi/srfi-19) ; time data types and procedures

d36 1
a36 1
  (session/get-creation-time session/get-id
a37 3
   session/get-last-accessed-time session/get-max-inactive-interval
   session/get-servlet-context session/invalidate!
   session/make-parameter session/new?
d39 1
a39 2
   session/set-max-inactive-interval! current-session)

a43 2
  (import srfi-19)

d47 1
a47 13
  (define-generic-java-methods
    (jget-attribute |getAttribute|)
    (jget-attribute-names |getAttributeNames|)
    (jget-creation-time |getCreationTime|)
    (jget-max-inactive-interval |getMaxInactiveInterval|)
    (jget-servlet-context |getServletContext|)
    (jget-id |getId|)
    (jget-last-accessed-time |getLastAccessedTime|)
    (jinvalidate |invalidate|)
    (jis-new |isNew|)
    (jset-attribute |setAttribute|)
    (jset-max-inactive-interval |setMaxInactiveInterval|))

a49 10
    (define (get-scheme-attribute)
      (let ((jvalue (session/get-java-attribute name)))
        (if (java-null? jvalue)
            #f
            (java-unwrap jvalue))))

    (define (set-scheme-attribute! value)
      (session/set-java-attribute! name (if value (java-wrap value) jnull))
      (void))

d52 2
a53 3
          (set-scheme-attribute! (car x))
          (get-scheme-attribute))
      (void)))
d57 1
a57 1
    (jget-attribute (current-session) (->jstring name)))
d60 1
a60 2
    (jremove-attribute (current-session) (->jstring name))
    (void))
d63 1
a63 2
    (jset-attribute (current-session) (->jstring name) java-object)
    (void))
d67 2
a68 32
     ->string
     (jget-attribute-names (current-session))))


  (define (session/get-creation-time)
    (let ((ms (->number (jget-creation-time (current-session)))))
      (make-time 'time-monotonic 0 (quotient ms 1000))))

  (define (session/get-last-accessed-time)
    (let ((ms (->number (jget-last-accessed-time (current-session)))))
      (make-time 'time-monotonic 0 (quotient ms 1000))))

  (define (session/get-id)
    (->string (jget-id (current-session))))

  (define (session/get-servlet-context)
    (jget-servlet-context (current-session)))

  (define (session/get-max-inactive-interval)
    (->number (jget-max-inactive-interval (current-session))))

  (define (session/set-max-inactive-interval! seconds)
    (jset-max-inactive-interval (current-session) (->jint seconds))
    (void))


  (define (session/invalidate!)
    (jinvalidate (current-session))
    (void))

  (define (session/new?)
    (->boolean (jis-new (current-session))))
d71 12
a82 3
  (define (current-session)
    (request/get-session))
)
@


1.1.2.8
log
@refactoring: request/response are now just wrappers, with send/*
functions now in contcentric; moved many s2j calls to
request/response/session objects
@
text
@d34 1
a34 1
(require-library 'siscweb/request)
d38 1
a38 2
  (current-session
   session/get-creation-time session/get-id
d52 1
a52 1
  (import siscweb/request)
@


1.1.2.9
log
@fixed parameters
@
text
@a31 1
(require-library 'sisc/libs/srfi/srfi-16) ; syntax for procedures of variable arity
d47 1
d49 1
a50 1
  (import srfi-16)
a65 1
    (jremove-attribute |removeAttribute|)
a69 13
  (define (session/get-scheme-attribute name)
    (let ((jvalue (session/get-java-attribute name)))
      (if (java-null? jvalue)
          #f
          (java-unwrap jvalue))))

  (define (session/set-scheme-attribute! name value)
    (session/set-java-attribute! name (if value (java-wrap value) jnull))
    (void))

  (define (session/remove-scheme-attribute! name)
    (session/remove-java-attribute! name))

d71 15
a85 8
    (case-lambda
      (() (session/get-scheme-attribute name))
      ((value)
       (if value
           (begin
             (session/set-scheme-attribute! name value)
             value)
           (session/remove-java-attribute! name)))))
@


