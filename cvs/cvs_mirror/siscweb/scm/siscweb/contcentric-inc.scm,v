head	1.1;
branch	1.1.1;
access;
symbols
	start:1.1.1.1 rel-0-1-dev:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.16.03.33.32;	author acolomba;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.16.03.33.32;	author acolomba;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.02.17.01.08.27;	author acolomba;	state dead;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.

(define-generic-java-methods
 get-attribute get-path-info (get-request-uri |getRequestURI|)
 get-session remove-attribute set-attribute)

;; returns true if the current requests points
;; to a resumable continuation
(define (resumable-request?)
  (if (fetch/resume-k) #t #f))

;; resumes the continuation associated to
;; this request
(define (resume-request)
  (let ((resume-k (fetch/resume-k)))
    (resume-k (current-request))))

;; fetches the resume continuation associated
;; to this request
(define (fetch/resume-k)
  (fetch/cc (extract-k-hash
             (->string (get-request-uri (current-request))))))

;; fetches the continuation identified by k-id
;; from the repository in the session
(define (fetch/cc k-id)
  (if k-id
      (fetch/k (get-k-manager) k-id)
      #f))

;; fetches the k-manager in the session; it instantiates it
;; if one is not already there
(define (get-k-manager)
  (let* ((session (get-session (current-request)))
         (k-manager-wrap (get-attribute session (->jstring "k-manager"))))
    (cond ((java-null? k-manager-wrap)
           (let ((k-manager (make <k-manager>)))
             (set-attribute session (->jstring "k-manager") (java-wrap k-manager))
             k-manager))
          (else
           (java-unwrap k-manager-wrap)))))

;; returns true if a published procedure exists
;; corresponding to the given request
(define (exists-published-proc?)
  (let ((path (remove-k-hash
               (->string (get-path-info (current-request))))))
    (published? path)))

;; fetches the procedure published at the given request
(define (get-published-proc)
  (let ((path (remove-k-hash
               (->string (get-path-info (current-request))))))
    (get-published path)))

;; sends a response and suspends
;; send-proc takes a response object and
;; whichever content is generated by
;; calling (page-proc k-url resume-k)
;; (see html::send-html/suspend for an example
(define (send/suspend send-proc page-proc)
  (let/cc resume-k
    (let ((k-url (store/cc! resume-k)))
      (send-proc (current-response) (page-proc k-url resume-k))
      ((current-suspend-k) #f))))


;; stores the given continuation and
;; returns a k-url made of the current
;; request url with the k-id added/substituted
(define (store/cc! k)
  (let* ((k-mgr (get-k-manager))
         (k-id (store/k! k-mgr k)))
    (make-k-url (remove-k-hash (->string (get-request-uri (current-request)))) k-id)))


;; sends a response and stops
;; all continuations prior to this one are cleared
;; send-proc is a procedure that takes
;; a response object and the page argument
;; (see html::send-html/finish for an example)
(define (send/finish send-proc page)
  (clear/cc!)
  (send-proc (current-response) page))


;; clears the continuation table
(define (clear/cc!)
  (let ((k-mgr (get-k-manager)))
    (clear-all/k k-mgr)))


;; the current request, response and k-suspend
(define current-request (make-parameter #f))
(define current-response (make-parameter #f))
(define current-suspend-k (make-parameter #f))
@


1.1.1.1
log
@initial import
@
text
@@


1.1.1.2
log
@did away with the -inc business; i think it was a bad idea
@
text
@@

