head	1.4;
access;
symbols
	rel-0-3-fix-3:1.3
	rel-0-3-fix-2:1.3
	rel-0-4-dev-sisc-1-11:1.3
	rel-0-3-fix-1:1.3
	rel-0-4-dev:1.3.0.4
	rel-0-3-fix:1.3.0.2
	rel-0-3:1.3
	rel-0-3-dev-1:1.2.4.1
	rel-0-2-fix-2:1.2.2.1
	rel-0-2-fix-1:1.2.2.1
	rel-0-2-fix:1.2.0.2
	rel-0-3-dev:1.2.0.4
	rel-0-2:1.2
	rel-0-2-dev:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2006.09.03.01.42.23;	author acolomba;	state dead;
branches;
next	1.3;

1.3
date	2005.11.25.20.46.38;	author acolomba;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2005.06.19.03.03.51;	author acolomba;	state Exp;
branches
	1.2.2.1
	1.2.4.1;
next	1.1;

1.1
date	2005.05.14.04.16.18;	author acolomba;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.05.14.04.16.18;	author acolomba;	state Exp;
branches;
next	;

1.2.2.1
date	2005.07.10.20.04.00;	author acolomba;	state Exp;
branches;
next	;

1.2.4.1
date	2005.07.04.04.46.12;	author acolomba;	state Exp;
branches;
next	;

1.3.4.1
date	2006.08.11.03.35.29;	author acolomba;	state dead;
branches;
next	;


desc
@@


1.4
log
@merged from rel-0-4-dev
@
text
@;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.


(module io/servlet-io
  (open-servlet-output)

  (import s2j)
  (import generic-procedures)
  (import oo)
  (import string-io)
  (import type-system)

  (define-java-classes
    (<http-servlet-response> |javax.servlet.http.HttpServletResponse|)
    (<output-stream> |java.io.OutputStream|))

  (define <buffer>
    (make-type '|sisc.modules.io.Buffer|))

  (define-generic-java-methods (jclose |close|) flush get-output-stream print (jwrite |write|))
  (define-generic-java-field-accessors (:buf |buf|))

  (define-generics :out :out!)
  (define-class (<servlet-output-port> <output-port>)
    (out :out :out!))

  (define-method (initialize (<servlet-output-port> p) (<output-stream> os))
    (:out! p os))

  (define-method (initialize (<servlet-output-port> p) (<http-servlet-response> response))
    (:out! p (get-output-stream response)))


  (define-generics open-servlet-output)

  (define-method (open-servlet-output (<http-servlet-response> response))
    (make <servlet-output-port> response))


  (define-method (gio/close (<servlet-output-port> p))
    (jclose (:out p)))

  (define-method (gio/flush-output-port (<servlet-output-port> p))
    (flush (:out p)))

  (define-method (gio/write (<value> v) (<servlet-output-port> p))
    (print (:out p)
           (->jstring (with-output-to-string
                        (lambda ()
                          (write v))))))

  (define-method (gio/display (<value> v) (<servlet-output-port> p))
    (print (:out p)
           (->jstring
            (with-output-to-string
              (lambda ()
                (display v))))))

  (define-method (gio/write-char (<char> c) (<servlet-output-port> p))
    (print (:out p)
           (->jchar c)))


  (define-method (gio/write-block (<buffer> b)
                                  (<number> off)
                                  (<number> count)
                                  (<servlet-output-port> p))
    (jwrite (:out p)
            (:buf (java-wrap b))
            (->jint off)
            (->jint count)))
  )


@


1.3
log
@merged from rel-0-3-dev
@
text
@@


1.3.4.1
log
@obsoleted and not compilable in SISC 1.16 b/c of changes to the I/O internals
@
text
@@


1.2
log
@merged from rel-0-2-dev
@
text
@d43 4
a46 1
    (<buffer> |sisc.modules.io.Buffer|))
d55 3
d97 1
a97 1
            (:buf b)
@


1.2.2.1
log
@merged from rel-0-3-dev
@
text
@d43 1
a43 4
    (<output-stream> |java.io.OutputStream|))

  (define <buffer>
    (make-type '|sisc.modules.io.Buffer|))
a51 3
  (define-method (initialize (<servlet-output-port> p) (<output-stream> os))
    (:out! p os))

d91 1
a91 1
            (:buf (java-wrap b))
@


1.2.4.1
log
@fixed gio/write-block method signature; added constructor for
OutputStream to make it easier to turn into a wrapper port around
OutputStream
@
text
@d43 1
a43 4
    (<output-stream> |java.io.OutputStream|))

  (define <buffer>
    (make-type '|sisc.modules.io.Buffer|))
a51 3
  (define-method (initialize (<servlet-output-port> p) (<output-stream> os))
    (:out! p os))

d91 1
a91 1
            (:buf (java-wrap b))
@


1.1
log
@file servlet-io.scm was initially added on branch rel-0-2-dev.
@
text
@d1 96
@


1.1.2.1
log
@initial import
@
text
@a0 96
;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.


(module io/servlet-io
  (open-servlet-output)

  (import s2j)
  (import generic-procedures)
  (import oo)
  (import string-io)
  (import type-system)

  (define-java-classes
    (<http-servlet-response> |javax.servlet.http.HttpServletResponse|)
    (<buffer> |sisc.modules.io.Buffer|))

  (define-generic-java-methods (jclose |close|) flush get-output-stream print (jwrite |write|))
  (define-generic-java-field-accessors (:buf |buf|))

  (define-generics :out :out!)
  (define-class (<servlet-output-port> <output-port>)
    (out :out :out!))

  (define-method (initialize (<servlet-output-port> p) (<http-servlet-response> response))
    (:out! p (get-output-stream response)))


  (define-generics open-servlet-output)

  (define-method (open-servlet-output (<http-servlet-response> response))
    (make <servlet-output-port> response))


  (define-method (gio/close (<servlet-output-port> p))
    (jclose (:out p)))

  (define-method (gio/flush-output-port (<servlet-output-port> p))
    (flush (:out p)))

  (define-method (gio/write (<value> v) (<servlet-output-port> p))
    (print (:out p)
           (->jstring (with-output-to-string
                        (lambda ()
                          (write v))))))

  (define-method (gio/display (<value> v) (<servlet-output-port> p))
    (print (:out p)
           (->jstring
            (with-output-to-string
              (lambda ()
                (display v))))))

  (define-method (gio/write-char (<char> c) (<servlet-output-port> p))
    (print (:out p)
           (->jchar c)))


  (define-method (gio/write-block (<buffer> b)
                                  (<number> off)
                                  (<number> count)
                                  (<servlet-output-port> p))
    (jwrite (:out p)
            (:buf b)
            (->jint off)
            (->jint count)))
  )


@

