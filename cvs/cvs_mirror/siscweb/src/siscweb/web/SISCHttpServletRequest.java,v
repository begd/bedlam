head	1.3;
access;
symbols
	rel-0-6-dev:1.3.0.4
	rel-0-5-fix:1.3.0.2
	rel-0-5:1.3
	rel-0-5-dev-safe-frames:1.2.8.4.0.2
	Root_rel-0-5-dev-safe-frames:1.2.8.4
	rel-0-4-fix-0:1.2
	rel-0-5-dev:1.2.0.8
	rel-0-4-fix:1.2.0.6
	rel-0-3-fix-3:1.2
	rel-0-3-fix-2:1.2
	rel-0-4-dev-sisc-1-11:1.2
	rel-0-3-fix-1:1.2
	rel-0-4-dev:1.2.0.4
	rel-0-3-fix:1.2.0.2
	rel-0-3:1.2
	rel-0-3-dev-1:1.1.2.4
	rel-0-2-fix-2:1.1.4.2
	rel-0-2-fix:1.1.0.4
	rel-0-3-dev:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2007.04.12.03.51.20;	author acolomba;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2005.11.25.20.46.38;	author acolomba;	state Exp;
branches
	1.2.8.1;
next	1.1;

1.1
date	2005.07.18.04.15.11;	author acolomba;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2005.07.18.04.15.11;	author acolomba;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.07.18.04.42.27;	author acolomba;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2005.07.27.02.59.21;	author acolomba;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2005.07.28.04.05.38;	author acolomba;	state Exp;
branches;
next	;

1.1.4.1
date	2005.07.18.04.15.11;	author acolomba;	state dead;
branches;
next	1.1.4.2;

1.1.4.2
date	2005.07.31.20.04.02;	author acolomba;	state Exp;
branches;
next	;

1.2.8.1
date	2007.01.22.05.04.47;	author acolomba;	state Exp;
branches;
next	1.2.8.2;

1.2.8.2
date	2007.03.01.03.42.32;	author acolomba;	state Exp;
branches;
next	1.2.8.3;

1.2.8.3
date	2007.03.01.05.03.34;	author acolomba;	state Exp;
branches;
next	1.2.8.4;

1.2.8.4
date	2007.03.01.05.15.56;	author acolomba;	state Exp;
branches;
next	;

1.3.2.1
date	2007.09.09.01.59.54;	author acolomba;	state Exp;
branches;
next	;

1.3.4.1
date	2007.10.13.18.49.32;	author acolomba;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2007.10.13.22.33.00;	author acolomba;	state Exp;
branches;
next	;


desc
@@


1.3
log
@merged from rel-0-5-dev
@
text
@/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is SISCweb.
 *
 * The Initial Developer of the Original Code is Alessandro Colomba.
 * Portions created by the Alessandro Colomba are Copyright (C) 2005-2007
 * Alessandro Colomba. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

package siscweb.web;

import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;

import siscweb.util.BindingList;


public class SISCHttpServletRequest extends HttpServletRequestWrapper
{
    public SISCHttpServletRequest(final HttpServletRequest request)
    {
        super(request);
        this.loadAttributeNames();
    }

    public SISCHttpServletRequest(final HttpServletRequest request,
                                  final Map bindings)
    {
        super(request);
        this.loadAttributeNames();

        for(Iterator i = bindings.entrySet().iterator(); i.hasNext();) {
            final Map.Entry entry = (Map.Entry) i.next();
            final String name = (String) entry.getKey();
            final Object value = entry.getValue();

            this.setAttribute(name, value);
        }
    }

    public Object getBinding(final String name)
    {
        final Object value = this.lookupBinding(name);

        if(value == null) {
            return null;
        }

        if(value instanceof BindingList) {
            final BindingList values = (BindingList) value;

            return values.size() > 0 ? values.get(0) : null;
        }
        else if(value instanceof Object[]) {
            final Object[] values = (Object[]) value;

            return values.length > 0 ? values[0] : null;
        }
        else {
            return value;
        }
    }

    public Object[] getBindingValues(final String name)
    {
        final Object value = this.lookupBinding(name);

        if(value == null) {
            return new Object[0];
        }

        if(value instanceof BindingList) {
            final BindingList values = (BindingList) value;

            return values.toArray(new Object[0]);
        }
        else if(value instanceof Object[]) {
            final Object[] values = (Object[]) value;

            return values;
        }
        else {
            return new Object[] { value };
        }
    }

    public Set getBindingNames()
    {
        Set names = new HashSet();

        names.addAll(this.getParameterMap().keySet());

        for(Enumeration e = this.getAttributeNames(); e.hasMoreElements();) {
            String name = (String) e.nextElement();

            names.add(name);
        }

        return names;
    }

    public Map getBindingMap()
    {
        Map bindings = new HashMap();
        bindings.putAll(this.getParameterMap());

        for(Enumeration e = this.getAttributeNames(); e.hasMoreElements();) {
            String name = (String) e.nextElement();

            bindings.put(name, this.getAttribute(name));
        }

        return bindings;
    }

    public void setAttribute(String name, Object value)
    {
        if(value == null) {
            this.attributeNames.add(name);
        }

        super.setAttribute(name, value);
    }

    public void removeAttribute(String name)
    {
        this.attributeNames.add(name);

        super.removeAttribute(name);
    }

    protected Set attributeNames = new HashSet();

    protected void loadAttributeNames()
    {
        for(Enumeration e = this.getAttributeNames(); e.hasMoreElements();) {
            this.attributeNames.add(e.nextElement());
        }
    }

    protected Object lookupBinding(String name)
    {
        Object value = this.getAttribute(name);

        if(value == null && !this.attributeNames.contains(name))
        {
            value = this.getParameter(name);
        }

        return value;
    }
}
@


1.3.4.1
log
@merged from rel-0-5-fix
@
text
@d65 1
a65 1
        for(final Iterator i = bindings.entrySet().iterator(); i.hasNext();) {
d122 1
a122 1
        final Set names = new HashSet();
d126 2
a127 2
        for(final Enumeration e = this.getAttributeNames(); e.hasMoreElements();) {
            final String name = (String) e.nextElement();
d137 1
a137 1
        final Map bindings = new HashMap();
d140 2
a141 2
        for(final Enumeration e = this.getAttributeNames(); e.hasMoreElements();) {
            final String name = (String) e.nextElement();
d149 1
a149 1
    public final void setAttribute(final String name, final Object value)
d158 1
a158 1
    public void removeAttribute(final String name)
d167 1
a167 1
    protected final void loadAttributeNames()
d169 1
a169 1
        for(final Enumeration e = this.getAttributeNames(); e.hasMoreElements();) {
d174 1
a174 1
    protected final Object lookupBinding(final String name)
@


1.3.4.2
log
@merged from rel-0-5-fix
@
text
@d108 1
a108 1
            return values.toArray(new Object[values.size()]);
@


1.3.2.1
log
@minor syntactical cleanup
@
text
@d65 1
a65 1
        for(final Iterator i = bindings.entrySet().iterator(); i.hasNext();) {
d122 1
a122 1
        final Set names = new HashSet();
d126 2
a127 2
        for(final Enumeration e = this.getAttributeNames(); e.hasMoreElements();) {
            final String name = (String) e.nextElement();
d137 1
a137 1
        final Map bindings = new HashMap();
d140 2
a141 2
        for(final Enumeration e = this.getAttributeNames(); e.hasMoreElements();) {
            final String name = (String) e.nextElement();
d149 1
a149 1
    public final void setAttribute(final String name, final Object value)
d158 1
a158 1
    public void removeAttribute(final String name)
d167 1
a167 1
    protected final void loadAttributeNames()
d169 1
a169 1
        for(final Enumeration e = this.getAttributeNames(); e.hasMoreElements();) {
d174 1
a174 1
    protected final Object lookupBinding(final String name)
@


1.2
log
@merged from rel-0-3-dev
@
text
@d17 1
a17 1
 * Portions created by the Alessandro Colomba are Copyright (C) 2005
d38 1
d40 2
d44 1
d48 2
d53 5
a57 1
    protected Map bindings;
d63 1
d65 4
a68 2
        this.bindings = new HashMap();
        this.bindings.putAll(this.getParameterMap());
d70 1
a70 2
        if(request instanceof SISCHttpServletRequest) {
        	this.bindings.putAll(((SISCHttpServletRequest) request).getBindingMap());
a71 2
        
        this.bindings.putAll(bindings);
d76 5
a80 1
        final Object[] ba = (Object[]) bindings.get(name);
d82 13
a94 3
        return ba == null || ba.length == 0 ?
               null :
               ba[0];
d99 19
a117 1
        return (Object[]) bindings.get(name);
d122 11
a132 1
        return bindings.keySet();
d137 9
a145 1
        // TODO: make immutable
d148 37
@


1.2.8.1
log
@adds bindings to attributes as well as this.bindings
@
text
@d17 1
a17 1
 * Portions created by the Alessandro Colomba are Copyright (C) 2005-2007
a38 1
import java.util.Iterator;
a40 1

d58 1
a58 1
            this.bindings.putAll(((SISCHttpServletRequest) request).getBindingMap());
d60 1
a60 1

a61 8

        for(Iterator i = bindings.entrySet().iterator(); i.hasNext();) {
            final Map.Entry entry = (Map.Entry) i.next();
            final String name = (String) entry.getKey();
            final Object value = entry.getValue();

            this.setAttribute(name, value);
        }
@


1.2.8.2
log
@bindings are looked up in attributes and parameters instead of being maintained in bindingMap; better support for BindingList; added default wrapping constructor
@
text
@a37 1
import java.util.Enumeration;
a38 1
import java.util.HashSet;
a45 2
import siscweb.util.BindingList;

d49 1
a49 4
    public SISCHttpServletRequest(final HttpServletRequest request)
    {
        super(request);
    }
d56 9
d76 1
a76 9
        Object value = this.getAttribute(name);

        if(value == null) {
            value = this.getParameter(name);
        }

        if(value == null) {
            return null;
        }
d78 3
a80 13
        if(value instanceof BindingList) {
            final BindingList values = (BindingList) value;

            return values.size() > 0 ? values.get(0) : null;
        }
        else if(value instanceof Object[]) {
            final Object[] values = (Object[]) value;

            return values.length > 0 ? values[0] : null;
        }
        else {
            return value;
        }
d85 1
a85 23
        Object value = this.getAttribute(name);

        if(value == null) {
            value = this.getParameter(name);
        }

        if(value == null) {
            return new Object[0];
        }

        if(value instanceof BindingList) {
            final BindingList values = (BindingList) value;

            return values.toArray(new Object[0]);
        }
        else if(value instanceof Object[]) {
            final Object[] values = (Object[]) value;

            return values;
        }
        else {
            return new Object[] { value };
        }
d90 1
a90 11
        Set names = new HashSet();

        names.addAll(this.getParameterMap().keySet());

        for(Enumeration e = this.getAttributeNames(); e.hasMoreElements();) {
            String name = (String) e.nextElement();

            names.add(name);
        }

        return names;
d95 1
a95 9
        Map bindings = new HashMap();
        bindings.putAll(this.getParameterMap());

        for(Enumeration e = this.getAttributeNames(); e.hasMoreElements();) {
            String name = (String) e.nextElement();

            bindings.put(name, this.getAttribute(name));
        }

@


1.2.8.3
log
@maintains a blacklist of attributes set to null, so as not to look them up as bindings among request parameters
@
text
@a55 4

        if(request instanceof SISCHttpServletRequest) {
            this.blackList.addAll(((SISCHttpServletRequest) request).blackList);
        }
a62 4
        if(request instanceof SISCHttpServletRequest) {
            this.blackList.addAll(((SISCHttpServletRequest) request).blackList);
        }

d74 5
a78 1
        final Object value = this.lookupBinding(name);
d101 5
a105 1
        final Object value = this.lookupBinding(name);
a153 30

    public void setAttribute(String name, Object value)
    {
        if(value == null) {
            this.blackList.add(name);
        }

        super.setAttribute(name, value);
    }

    public void removeAttribute(String name)
    {
        this.blackList.add(name);

        super.removeAttribute(name);
    }

    protected Set blackList = new HashSet();

    protected Object lookupBinding(String name)
    {
        Object value = this.getAttribute(name);

        if(value == null && !this.blackList.contains(name))
        {
            value = this.getParameter(name);
        }

        return value;
    }
@


1.2.8.4
log
@initializes blacklist during construction, so as to preserve semantics even if scheme code is the target of a forward from Java
@
text
@d56 4
a59 1
        this.loadAttributeNames();
d66 4
a69 1
        this.loadAttributeNames();
d158 1
a158 1
            this.attributeNames.add(name);
d166 1
a166 1
        this.attributeNames.add(name);
d171 1
a171 8
    protected Set attributeNames = new HashSet();

    protected void loadAttributeNames()
    {
        for(Enumeration e = this.getAttributeNames(); e.hasMoreElements();) {
            this.attributeNames.add(e.nextElement());
        }
    }
d177 1
a177 1
        if(value == null && !this.attributeNames.contains(name))
@


1.1
log
@file SISCHttpServletRequest.java was initially added on branch rel-0-3-dev.
@
text
@d1 88
@


1.1.4.1
log
@file SISCHttpServletRequest.java was added on branch rel-0-2-fix on 2005-07-31 20:04:02 +0000
@
text
@@


1.1.4.2
log
@merged from rel-0-3-dev
@
text
@a0 88
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is SISCweb.
 *
 * The Initial Developer of the Original Code is Alessandro Colomba.
 * Portions created by the Alessandro Colomba are Copyright (C) 2005
 * Alessandro Colomba. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

package siscweb.web;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;


public class SISCHttpServletRequest extends HttpServletRequestWrapper
{
    protected Map bindings;

    public SISCHttpServletRequest(final HttpServletRequest request,
                                  final Map bindings)
    {
        super(request);

        this.bindings = new HashMap();
        this.bindings.putAll(this.getParameterMap());

        if(request instanceof SISCHttpServletRequest) {
        	this.bindings.putAll(((SISCHttpServletRequest) request).getBindingMap());
        }
        
        this.bindings.putAll(bindings);
    }

    public Object getBinding(final String name)
    {
        final Object[] ba = (Object[]) bindings.get(name);

        return ba == null || ba.length == 0 ?
               null :
               ba[0];
    }

    public Object[] getBindingValues(final String name)
    {
        return (Object[]) bindings.get(name);
    }

    public Set getBindingNames()
    {
        return bindings.keySet();
    }

    public Map getBindingMap()
    {
        // TODO: make immutable
        return bindings;
    }
}
@


1.1.2.1
log
@initial import
@
text
@a0 79
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is SISCweb.
 *
 * The Initial Developer of the Original Code is Alessandro Colomba.
 * Portions created by the Alessandro Colomba are Copyright (C) 2005
 * Alessandro Colomba. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

package siscweb.web;

import java.util.Map;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;


public class SISCHttpServletRequest extends HttpServletRequestWrapper
{
    protected Map bindings;

    public SISCHttpServletRequest(HttpServletRequest request,
                                  Map bindings)
    {
        super(request);
        this.bindings = bindings;
    }

    public Object getBinding(String name)
    {
        Object[] ba = (Object[]) bindings.get(name);

        return ba == null || ba.length == 0 ?
               null :
               ba[0];
    }

    public Object[] getBindingValues(String name)
    {
        return (Object[]) bindings.get(name);
    }

    public Set getBindingNames()
    {
        return bindings.keySet();
    }

    public Map getBindingMap()
    {
        // TODO: make immutable
        return bindings;
    }
}
@


1.1.2.2
log
@if wrapping a wrapped request, inherits the bindings
@
text
@a37 1
import java.util.HashMap;
d52 1
a52 9

        if(request instanceof SISCHttpServletRequest) {
            this.bindings = new HashMap();
            this.bindings.putAll(((SISCHttpServletRequest) request).getBindingMap());
            this.bindings.putAll(bindings);
        }
        else {
            this.bindings = bindings;
        }
@


1.1.2.3
log
@properly merges request parameters, old bindings, new bindings
@
text
@a53 3
        this.bindings = new HashMap();
        this.bindings.putAll(this.getParameterMap());

d55 6
a60 1
        	this.bindings.putAll(((SISCHttpServletRequest) request).getBindingMap());
a61 2
        
        this.bindings.putAll(bindings);
@


1.1.2.4
log
@minor stylistic fixes
@
text
@d49 2
a50 2
    public SISCHttpServletRequest(final HttpServletRequest request,
                                  final Map bindings)
d64 1
a64 1
    public Object getBinding(final String name)
d66 1
a66 1
        final Object[] ba = (Object[]) bindings.get(name);
d73 1
a73 1
    public Object[] getBindingValues(final String name)
@


