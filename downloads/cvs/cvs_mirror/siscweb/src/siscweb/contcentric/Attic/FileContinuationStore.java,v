head	1.1;
access;
symbols
	rel-0-3-fix-3:1.1.4.2
	rel-0-3-fix:1.1.0.4
	rel-0-4-dev:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2006.04.08.15.59.20;	author acolomba;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2006.04.08.15.59.20;	author acolomba;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.08.27.02.11.00;	author acolomba;	state dead;
branches;
next	;

1.1.4.1
date	2006.04.08.15.59.20;	author acolomba;	state dead;
branches;
next	1.1.4.2;

1.1.4.2
date	2006.04.15.15.55.23;	author acolomba;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file FileContinuationStore.java was initially added on branch rel-0-4-dev.
@
text
@@


1.1.4.1
log
@file FileContinuationStore.java was added on branch rel-0-3-fix on 2006-04-15 15:55:23 +0000
@
text
@@


1.1.4.2
log
@merged from rel-0-4-dev
@
text
@a0 180
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is SISCweb.
 *
 * The Initial Developer of the Original Code is Alessandro Colomba.
 * Portions created by the Alessandro Colomba are Copyright (C) 2005
 * Alessandro Colomba. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

package siscweb.contcentric;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import javax.servlet.http.HttpSession;

import sisc.data.Procedure;

public class FileContinuationStore implements ContinuationStore
{
    private static final File baseDirectory = new File("/tmp");
    private static final long ttl = 1200000; // milliseconds

    public void store(final HttpSession session,
                      final String groupId,
                      final String continuationId,
                      final Procedure procedure,
                      final long ttl)
    {
        final File sessionDirectory = new File(baseDirectory, session.getId());

        if(!sessionDirectory.exists()) {
            sessionDirectory.mkdir();
            //TODO: check that it exists (not that it was created b/c of concurrency)
        }

        //TODO: implement groupId

        ObjectOutputStream oos = null;

        try {
            final File continuationFile = new File(sessionDirectory, continuationId);
            oos = new ObjectOutputStream(new FileOutputStream(continuationFile));

            oos.writeObject(procedure);
        }
        catch(IOException ioe) {
            throw new RuntimeException(ioe);
        }
        finally {
            try {
                if(oos != null) {
                    oos.close();
                }
            }
            catch(IOException ioe) {
                // do nothing
            }
        }

        ContinuationTable.getInstance(session).store(session, groupId, continuationId, procedure, ttl);
    }

    public Procedure fetch(final HttpSession session, final String continuationId)
    {
        final File sessionDirectory = new File(baseDirectory, session.getId());
        if(!sessionDirectory.exists()) {
            return null;
        }

        final File continuationFile = new File(sessionDirectory, continuationId);
        if(!continuationFile.exists()) {
            return null;
        }

        ObjectInputStream ois = null;

        try {
            continuationFile.setLastModified(new Date().getTime());

            ois = new ObjectInputStream(new FileInputStream(continuationFile));

            return (Procedure) ois.readObject();
        }
        catch(ClassNotFoundException cnfe) {
            throw new RuntimeException(cnfe);
        }
        catch(IOException ioe) {
            throw new RuntimeException(ioe);
        }
        finally {
            try {
                if(ois != null) {
                    ois.close();
                }
            }
            catch(IOException ioe) {
                return null;
            }
        }
    }

    public void clear(final HttpSession session) {
        final File sessionDirectory = new File(baseDirectory, session.getId());
        if(sessionDirectory.exists()) {
            deleteFile(sessionDirectory);
        }
    }

    public static boolean deleteFile(File file)
    {
        if(!file.exists()) {
            return false;
        }

        if(file.isDirectory()) {
            File[] children = file.listFiles();

            for(int i=0; i < children.length; i++) {
                deleteFile(children[i]);
            }
        }

        return file.delete();
    }

    public int purgeExpired()
    {
        long now = new Date().getTime();
        int n = 0;

        final File[] sessionFiles = baseDirectory.listFiles();
        for(int i = 0; i < sessionFiles.length; i++) {
            if(sessionFiles[i].exists()) {
                final File[] continuationFiles = sessionFiles[i].listFiles();

                for(int j = 0; j < continuationFiles.length; j++) {
                    if(continuationFiles[i].lastModified() + ttl > now) {
                        if(continuationFiles[i].delete()) {
                            n++;
                        }
                    }
                }
            }
        }

        return n;
    }
}
@


1.1.2.1
log
@initial import
@
text
@a0 180
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is SISCweb.
 *
 * The Initial Developer of the Original Code is Alessandro Colomba.
 * Portions created by the Alessandro Colomba are Copyright (C) 2005
 * Alessandro Colomba. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

package siscweb.contcentric;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import javax.servlet.http.HttpSession;

import sisc.data.Procedure;

public class FileContinuationStore implements ContinuationStore
{
    private static final File baseDirectory = new File("/tmp");
    private static final long ttl = 1200000; // milliseconds

    public void store(final HttpSession session,
                      final String groupId,
                      final String continuationId,
                      final Procedure procedure,
                      final long ttl)
    {
        final File sessionDirectory = new File(baseDirectory, session.getId());

        if(!sessionDirectory.exists()) {
            sessionDirectory.mkdir();
            //TODO: check that it exists (not that it was created b/c of concurrency)
        }

        //TODO: implement groupId

        ObjectOutputStream oos = null;

        try {
            final File continuationFile = new File(sessionDirectory, continuationId);
            oos = new ObjectOutputStream(new FileOutputStream(continuationFile));

            oos.writeObject(procedure);
        }
        catch(IOException ioe) {
            throw new RuntimeException(ioe);
        }
        finally {
            try {
                if(oos != null) {
                    oos.close();
                }
            }
            catch(IOException ioe) {
                // do nothing
            }
        }

        ContinuationTable.getInstance(session).store(session, groupId, continuationId, procedure, ttl);
    }

    public Procedure fetch(final HttpSession session, final String continuationId)
    {
        final File sessionDirectory = new File(baseDirectory, session.getId());
        if(!sessionDirectory.exists()) {
            return null;
        }

        final File continuationFile = new File(sessionDirectory, continuationId);
        if(!continuationFile.exists()) {
            return null;
        }

        ObjectInputStream ois = null;

        try {
            continuationFile.setLastModified(new Date().getTime());

            ois = new ObjectInputStream(new FileInputStream(continuationFile));

            return (Procedure) ois.readObject();
        }
        catch(ClassNotFoundException cnfe) {
            throw new RuntimeException(cnfe);
        }
        catch(IOException ioe) {
            throw new RuntimeException(ioe);
        }
        finally {
            try {
                if(ois != null) {
                    ois.close();
                }
            }
            catch(IOException ioe) {
                return null;
            }
        }
    }

    public void clear(final HttpSession session) {
        final File sessionDirectory = new File(baseDirectory, session.getId());
        if(sessionDirectory.exists()) {
            deleteFile(sessionDirectory);
        }
    }

    public static boolean deleteFile(File file)
    {
        if(!file.exists()) {
            return false;
        }

        if(file.isDirectory()) {
            File[] children = file.listFiles();

            for(int i=0; i < children.length; i++) {
                deleteFile(children[i]);
            }
        }

        return file.delete();
    }

    public int purgeExpired()
    {
        long now = new Date().getTime();
        int n = 0;

        final File[] sessionFiles = baseDirectory.listFiles();
        for(int i = 0; i < sessionFiles.length; i++) {
            if(sessionFiles[i].exists()) {
                final File[] continuationFiles = sessionFiles[i].listFiles();

                for(int j = 0; j < continuationFiles.length; j++) {
                    if(continuationFiles[i].lastModified() + ttl > now) {
                        if(continuationFiles[i].delete()) {
                            n++;
                        }
                    }
                }
            }
        }

        return n;
    }
}
@


1.1.2.2
log
@not needed: appservers such are resin will serialize the session every
time it is modified
@
text
@@


