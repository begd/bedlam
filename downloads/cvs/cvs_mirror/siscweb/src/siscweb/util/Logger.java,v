head	1.3;
access;
symbols
	rel-0-6-dev:1.3.0.4
	rel-0-5-fix:1.3.0.2
	rel-0-5:1.3
	rel-0-5-dev-safe-frames:1.2.4.2.0.2
	Root_rel-0-5-dev-safe-frames:1.2.4.2
	rel-0-4-fix-0:1.2
	rel-0-5-dev:1.2.0.4
	rel-0-4-fix:1.2.0.2
	rel-0-4-dev:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2007.04.12.03.51.19;	author acolomba;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2006.09.03.01.42.22;	author acolomba;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2006.07.08.02.30.19;	author acolomba;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.07.08.02.30.19;	author acolomba;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.08.02.02.46.56;	author acolomba;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.08.14.02.21.26;	author acolomba;	state Exp;
branches;
next	;

1.2.4.1
date	2006.10.04.01.35.14;	author acolomba;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2007.01.08.01.51.36;	author acolomba;	state Exp;
branches;
next	;

1.3.2.1
date	2007.09.09.01.59.54;	author acolomba;	state Exp;
branches;
next	;

1.3.4.1
date	2007.10.13.18.49.32;	author acolomba;	state Exp;
branches;
next	;


desc
@@


1.3
log
@merged from rel-0-5-dev
@
text
@/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is SISCweb.
 *
 * The Initial Developer of the Original Code is Alessandro Colomba.
 * Portions created by the Alessandro Colomba are Copyright (C) 2005
 * Alessandro Colomba. All Rights Reserved.
 *
 * Contributor(s):
 *   Dan Muresan
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

package siscweb.util;

import java.io.IOException;
import java.util.logging.FileHandler;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.SimpleFormatter;

public class Logger
{
    public static final java.util.logging.Logger logger =
        java.util.logging.Logger.getAnonymousLogger();

    public static void initialize()
    {
        String fileName = null;

        // tries to set the handler to a file
        try {
            fileName = Environment.getLoggingFile();

            if(fileName != null && !"".equals(fileName)) {
                int limit = Environment.getLoggingLimit();
                int count = Environment.getLoggingCount();

                Handler handler = new FileHandler(fileName, limit, count, true);
                handler.setFormatter(new SimpleFormatter());
                logger.addHandler(handler);
                logger.setUseParentHandlers(false);
            }
        }
        catch (IOException ioe) {
            if(logger.isLoggable(Level.WARNING)) {
                logger.warning("Could not open logging file : \"" +
	                fileName + "\". Using default logger.");
            }
        }

        // sets the logging level
        String level = null;

        try {
            level = Environment.getLoggingLevel();

            logger.setLevel(Level.parse(level));
        }
        catch(IllegalArgumentException iae) {
            if(logger.isLoggable(Level.WARNING)) {
                logger.warning("Did not recognize logging level : \"" + level + "\". Defaulting to level INFO.");
            }

            logger.setLevel(Level.INFO);
        }
    }
}
@


1.3.4.1
log
@merged from rel-0-5-fix
@
text
@d52 1
a52 1
        final String fileName = Environment.getLoggingFile();
d56 2
d59 2
a60 2
                final int limit = Environment.getLoggingLimit();
                final int count = Environment.getLoggingCount();
d62 1
a62 1
                final Handler handler = new FileHandler(fileName, limit, count, true);
d76 1
a76 1
        final String level = Environment.getLoggingLevel();;
d79 2
@


1.3.2.1
log
@minor syntactical cleanup
@
text
@d52 1
a52 1
        final String fileName = Environment.getLoggingFile();
d56 2
d59 2
a60 2
                final int limit = Environment.getLoggingLimit();
                final int count = Environment.getLoggingCount();
d62 1
a62 1
                final Handler handler = new FileHandler(fileName, limit, count, true);
d76 1
a76 1
        final String level = Environment.getLoggingLevel();;
d79 2
@


1.2
log
@merged from rel-0-4-dev
@
text
@d21 1
d48 1
a48 1
        java.util.logging.Logger.getLogger("siscweb.logger");
d59 4
a62 1
                Handler handler = new FileHandler(fileName);
d70 2
a71 1
                logger.warning("Could not open logging file : \"" + fileName + "\". Using default logger.");
d83 1
a83 2
        catch(IllegalArgumentException iae)
        {
@


1.2.4.1
log
@added log rotation
@
text
@a20 1
 *   Dan Muresan
d47 1
a47 1
       java.util.logging.Logger.getAnonymousLogger();
d58 1
a58 4
                int limit = Environment.getLoggingLimit();
                int count = Environment.getLoggingCount();

                Handler handler = new FileHandler(fileName, limit, count, true);
d66 1
a66 2
                logger.warning("Could not open logging file : \"" +
                               fileName + "\". Using default logger.");
d78 2
a79 1
        catch(IllegalArgumentException iae) {
@


1.2.4.2
log
@minor fixes
@
text
@d48 1
a48 1
        java.util.logging.Logger.getAnonymousLogger();
d71 1
a71 1
	                fileName + "\". Using default logger.");
@


1.1
log
@file Logger.java was initially added on branch rel-0-4-dev.
@
text
@d1 87
@


1.1.2.1
log
@renamed Loggers to Logger; aggregated all loggers into one
@
text
@a0 65
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is SISCweb.
 *
 * The Initial Developer of the Original Code is Alessandro Colomba.
 * Portions created by the Alessandro Colomba are Copyright (C) 2005
 * Alessandro Colomba. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

package siscweb.util;

import java.io.IOException;
import java.util.logging.ConsoleHandler;
import java.util.logging.FileHandler;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.SimpleFormatter;

public class Logger
{
    public static final java.util.logging.Logger logger =
        java.util.logging.Logger.getLogger("siscweb.logger");

    static {
        Handler handler = null;

        try {
            handler = new FileHandler("%t/siscweb.log");
        }
        catch(IOException e) {
            handler = new ConsoleHandler();
        }

        handler.setFormatter(new SimpleFormatter());

        logger.setLevel(Level.FINEST);
        logger.addHandler(handler);
    }
}
@


1.1.2.2
log
@looks up logging level and file from the environment
@
text
@d50 2
a51 5
    public static void initialize()
    {
        // default handler
        Handler handler = new ConsoleHandler();
        String fileName = null;
a52 1
        // tries to set the handler to a file
d54 1
a54 10
            fileName = Environment.getLoggingFile();

            if(fileName != null && !"".equals(fileName)) {
                handler = new FileHandler(fileName);
            }
        }
        catch (IOException ioe) {
            if(logger.isLoggable(Level.WARNING)) {
                logger.warning("Could not open logging file : \"" + fileName + "\". Defaulting to console.");
            }
d56 2
a57 3
        finally {
            handler.setFormatter(new SimpleFormatter());
            logger.addHandler(handler);
d60 1
a60 5
        // sets the logging level
        String level = null;

        try {
            level = Environment.getLoggingLevel();
d62 2
a63 10
            logger.setLevel(Level.parse(level));
        }
        catch(IllegalArgumentException iae)
        {
            if(logger.isLoggable(Level.WARNING)) {
                logger.warning("Did not recognize logging level : \"" + level + "\". Defaulting to level INFO.");
            }

            logger.setLevel(Level.INFO);
        }
@


1.1.2.3
log
@doesn't add a console logger, instead just using parent logger's
@
text
@d39 1
d52 2
d61 1
a61 4
                Handler handler = new FileHandler(fileName);
                handler.setFormatter(new SimpleFormatter());
                logger.addHandler(handler);
                logger.setUseParentHandlers(false);
d66 1
a66 1
                logger.warning("Could not open logging file : \"" + fileName + "\". Using default logger.");
d69 4
@


