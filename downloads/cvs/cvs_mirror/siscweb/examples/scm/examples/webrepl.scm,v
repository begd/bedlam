head	1.4;
access;
symbols
	rel-0-6-dev:1.4.0.10
	rel-0-5-fix:1.4.0.8
	rel-0-5:1.4
	rel-0-5-dev-safe-frames:1.4.0.6
	Root_rel-0-5-dev-safe-frames:1.4
	rel-0-4-fix-0:1.4
	rel-0-5-dev:1.4.0.4
	rel-0-4-fix:1.4.0.2
	rel-0-3-fix-3:1.3.2.2
	rel-0-3-fix-2:1.3.2.1
	rel-0-4-dev-sisc-1-11:1.3.4.2
	rel-0-3-fix-1:1.3
	rel-0-4-dev:1.3.0.4
	rel-0-3-fix:1.3.0.2
	rel-0-3:1.3
	rel-0-3-dev-1:1.2
	rel-0-2-fix-2:1.2
	rel-0-2-fix-1:1.2
	rel-0-2-fix:1.2.0.2
	rel-0-3-dev:1.2.0.4
	rel-0-2:1.2
	rel-0-2-dev:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2006.09.03.01.42.24;	author acolomba;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.25.20.43.32;	author acolomba;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2005.06.19.03.03.51;	author acolomba;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2005.06.18.16.38.10;	author acolomba;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.06.18.16.38.10;	author acolomba;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.06.18.16.43.24;	author acolomba;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2005.06.18.16.59.13;	author acolomba;	state Exp;
branches;
next	;

1.2.4.1
date	2005.11.16.00.49.56;	author acolomba;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2005.11.20.15.21.58;	author acolomba;	state Exp;
branches;
next	;

1.3.2.1
date	2006.02.25.17.12.05;	author acolomba;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.04.15.15.55.28;	author acolomba;	state Exp;
branches;
next	;

1.3.4.1
date	2006.01.16.00.22.14;	author acolomba;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2006.02.11.20.21.43;	author acolomba;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2006.04.08.21.40.41;	author acolomba;	state Exp;
branches;
next	;


desc
@@


1.4
log
@merged from rel-0-4-dev
@
text
@;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005-2006
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;     Dan Muresan
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.


(require-library 'siscweb/bindings)
(require-library 'siscweb/xhtml)

(module examples/webrepl
  (webrepl webrepl-not-published)

  (import string-io)

  (import siscweb/bindings)
  (import siscweb/xhtml)

  (define (webrepl req)
    (set! req #f)
    (let loop ((sexp "")
               (out "")
               (result #f)
               (hist '())
               (first-iter? #t))
      (let* ((sexp-new (read-sexp out result sexp hist first-iter?))
             (hist-new (cons sexp-new hist)))
        (with/fc
         (lambda (m e)
           (loop sexp (cdr (assoc 'message m)) e hist-new #f))  ; for errors
         (lambda ()
           (let ((res-and-out (with-input-from-string sexp-new eval-many)))
             (loop sexp-new (cdr res-and-out) (car res-and-out) hist-new #f)))))))


  (define (read-sexp out result sexp hist first-iter?)
    (extract-single-binding
     'sexp
     (get-bindings
      (send-xhtml/suspend
       (lambda (k-url)
         `(*TOP*
           (*PI* xml "version=\"1.0\"")
           (*DTD-INFO/PUBLIC* "html"
                              "-//W3C//DTD XHTML 1.0 Strict//EN"
                              "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
           (html (@@ (xmlns "http://www.w3.org/1999/xhtml")
                    (xml:lang "en") (lang "en"))
            (head
             (title "Web REPL")
             (link (@@ (href-c "/css/default.css")
                      (rel "stylesheet")
                      (type "text/css"))))
            (body (@@ (onload "document.repl.sexp.select(); document.repl.sexp.focus();"))
             (h2 "Web REPL")
             ,@@(if first-iter?
                   '()
                   `(,@@(if (zero? (string-length out))
                           '()
                           `((p "Output:" (pre ,out))))
                     (p
                      "Result:"
                      (pre
                       ,(with-output-to-string
                          (lambda () (pretty-print result)))))))
             (form (@@ (id "repl") (name "repl")
                      (action-e ,k-url) (method "post"))
              (textarea (@@ (name "sexp") (cols  80) (rows 12))
               ,(if first-iter? "" sexp))
              (br)
              (input (@@ (type "submit") (value "Send")))
              (input (@@ (type "reset") (value "Reset"))))
             (p "Previous inputs: ")
             ,@@(map (lambda (text) `(div (pre ,text) (hr)))
                    hist)
             (p (a (@@ (href-c "/")) "^ Home"))))))))))


  ;; Reads a sequence of s-expressions using (read), evaluates them, saving
  ;; the output to a string, and returns a cons of the last result and the
  ;; accumulated output. Stops upon encountering EOF.
  (define (eval-many)
    (let* ((result #f)
           (out (with-output-to-string
                  (lambda ()
                    (let read-loop ()
                      (let ((sexp1 (read)))
                        (unless (eof-object? sexp1)
                          (begin
                            (set! result (eval sexp1))
                            (read-loop)))))))))
      (cons result out)))


  (define (webrepl-not-published req)
    (send-xhtml/back
     `(*TOP*
       (*PI* xml "version=\"1.0\"")
       (*DTD-INFO/PUBLIC* "html"
                          "-//W3C//DTD XHTML 1.0 Strict//EN"
                          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
       (html (@@ (xmlns "http://www.w3.org/1999/xhtml")
                (xml:lang "en") (lang "en"))
        (head
         (title "Web REPL Not Published")
         (link (@@ (href-c "/css/default.css")
                  (rel "stylesheet")
                  (type "text/css"))))
        (body
         (h2 "WebREPL Not Published")
         (p "The web REPL is not currently published. This is the default, as it would not be prudent to ship these examples with a REPL publicly accessible via HTTP.")
         (p "The web REPL can be activated by connecting to the network REPL on localhost:5156 and issuing:")
         (div (@@ (class "code"))  "(publish \"/webrepl/*\" 'webrepl)")
         (p "If these examples are from the SISCweb distribution, as opposed to being built from source, this latter REPL is also disabled for security reasons. It can be activated by uncommenting the appropriate entry in the WEB-INF/web.xml file.")
         (p (a (@@ (href-c "/")) "^ Home")))))))

 )

@


1.3
log
@merged from rel-0-3-dev
@
text
@d14 1
a14 1
;;; Portions created by the Initial Developer are Copyright (C) 2005
d34 1
a34 1
(require-library 'siscweb/html)
d42 1
a42 1
  (import siscweb/html)
d65 1
a65 1
      (send-html/suspend
d67 14
a80 8
         `(html
           (head
            (title "Web REPL")
            (link (@@ (href-c "/css/default.css")
                     (rel "stylesheet")
                     (type "text/css"))))
           (body (@@ (onload "document.repl.sexp.select(); document.repl.sexp.focus();"))
            (h2 "Web REPL")
d86 2
a87 1
                     (p "Result:"
d91 2
a92 1
             (form (@@ (name "repl") (action-e ,k-url) (method "post"))
d94 1
a94 1
                        ,(if first-iter? "" sexp))
d101 1
a101 1
             (p (a (@@ (href-c "/")) "^ Home")))))))))
d121 20
a140 11
    (send-html/back
     `(html
       (head
        (title "Web REPL Not Published")
        (link (@@ (href-c "/css/default.css")
                 (rel "stylesheet")
                 (type "text/css"))))
       (body
        (h2 "WebREPL Not Published")
        (p "The web REPL is not currently published. This is the default, as it would not be prudent to ship these examples with a REPL publicly accessible via HTTP. The web REPL can be activated by issuing (publish \"/webrepl/*\" 'webrepl) in the REPL bound to this server's localhost:5156 socket. If these examples are from the SISCweb distribution, as opposed to having been built from source, this latter REPL is also disabled for security reasons. It can be activated by uncommenting the appropriate entry in the WEB-INF/web.xml file.")
        (p (a (@@ (href-c "/")) "^ Home"))))))
@


1.3.2.1
log
@merged from rel-0-4-dev-sisc-1-11
@
text
@d34 1
a34 1
(require-library 'siscweb/xhtml)
d42 1
a42 1
  (import siscweb/xhtml)
d65 1
a65 1
      (send-xhtml/suspend
d67 8
a74 13
         `(*TOP*
           (*DTD-INFO/PUBLIC* "html"
                              "-//W3C//DTD XHTML 1.0 Strict//EN"
                              "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
           (html (@@ (xmlns "http://www.w3.org/1999/xhtml")
                    (xml:lang "en") (lang "en"))
            (head
             (title "Web REPL")
             (link (@@ (href-c "/css/default.css")
                      (rel "stylesheet")
                      (type "text/css"))))
            (body (@@ (onload "document.repl.sexp.select(); document.repl.sexp.focus();"))
             (h2 "Web REPL")
d80 1
a80 2
                     (p
                      "Result:"
d84 1
a84 2
             (form (@@ (id "repl") (name "repl")
                      (action-e ,k-url) (method "post"))
d86 1
a86 1
               ,(if first-iter? "" sexp))
d93 1
a93 1
             (p (a (@@ (href-c "/")) "^ Home"))))))))))
d113 11
a123 19
    (send-xhtml/back
     `(*TOP*
       (*DTD-INFO/PUBLIC* "html"
                          "-//W3C//DTD XHTML 1.0 Strict//EN"
                          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
       (html (@@ (xmlns "http://www.w3.org/1999/xhtml")
                (xml:lang "en") (lang "en"))
        (head
         (title "Web REPL Not Published")
         (link (@@ (href-c "/css/default.css")
                  (rel "stylesheet")
                  (type "text/css"))))
        (body
         (h2 "WebREPL Not Published")
         (p "The web REPL is not currently published. This is the default, as it would not be prudent to ship these examples with a REPL publicly accessible via HTTP.")
         (p "The web REPL can be activated by connecting to the network REPL on localhost:5156 and issuing:")
         (div (@@ (class "code"))  "(publish \"/webrepl/*\" 'webrepl)")
         (p "If these examples are from the SISCweb distribution, as opposed to being built from source, this latter REPL is also disabled for security reasons. It can be activated by uncommenting the appropriate entry in the WEB-INF/web.xml file.")
         (p (a (@@ (href-c "/")) "^ Home")))))))
@


1.3.2.2
log
@merged from rel-0-4-dev
@
text
@d14 1
a14 1
;;; Portions created by the Initial Developer are Copyright (C) 2005-2006
a67 1
           (*PI* xml "version=\"1.0\"")
a121 1
       (*PI* xml "version=\"1.0\"")
@


1.3.4.1
log
@added DOCTYPE declarations
@
text
@d67 8
a74 11
         `(*TOP*
           (*DTD-INFO/PUBLIC* |HTML| "-//W3C//DTD HTML 4.01 Transitional//EN"
                               "http://www.w3.org/TR/html4/loose.dtd")
           (html
            (head
             (title "Web REPL")
             (link (@@ (href-c "/css/default.css")
                      (rel "stylesheet")
                      (type "text/css"))))
            (body (@@ (onload "document.repl.sexp.select(); document.repl.sexp.focus();"))
             (h2 "Web REPL")
d81 3
a83 3
                        (pre
                         ,(with-output-to-string
                            (lambda () (pretty-print result)))))))
d86 1
a86 1
               ,(if first-iter? "" sexp))
d93 1
a93 1
             (p (a (@@ (href-c "/")) "^ Home"))))))))))
d114 10
a123 13
     `(*TOP*
       (*DTD-INFO/PUBLIC* |HTML| "-//W3C//DTD HTML 4.01 Transitional//EN"
                          "http://www.w3.org/TR/html4/loose.dtd")
       (html
        (head
         (title "Web REPL Not Published")
         (link (@@ (href-c "/css/default.css")
                  (rel "stylesheet")
                  (type "text/css"))))
        (body
         (h2 "WebREPL Not Published")
         (p "The web REPL is not currently published. This is the default, as it would not be prudent to ship these examples with a REPL publicly accessible via HTTP. The web REPL can be activated by issuing (publish \"/webrepl/*\" 'webrepl) in the REPL bound to this server's localhost:5156 socket. If these examples are from the SISCweb distribution, as opposed to having been built from source, this latter REPL is also disabled for security reasons. It can be activated by uncommenting the appropriate entry in the WEB-INF/web.xml file.")
         (p (a (@@ (href-c "/")) "^ Home")))))))
@


1.3.4.2
log
@now outputs compliant xhtml
@
text
@d34 1
a34 1
(require-library 'siscweb/xhtml)
d42 1
a42 1
  (import siscweb/xhtml)
d65 1
a65 1
      (send-xhtml/suspend
d68 3
a70 5
           (*DTD-INFO/PUBLIC* "html"
                              "-//W3C//DTD XHTML 1.0 Strict//EN"
                              "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
           (html (@@ (xmlns "http://www.w3.org/1999/xhtml")
                    (xml:lang "en") (lang "en"))
d83 5
a87 7
                     (p
                      "Result:"
                      (pre
                       ,(with-output-to-string
                          (lambda () (pretty-print result)))))))
             (form (@@ (id "repl") (name "repl")
                      (action-e ,k-url) (method "post"))
d116 1
a116 1
    (send-xhtml/back
d118 3
a120 5
       (*DTD-INFO/PUBLIC* "html"
                          "-//W3C//DTD XHTML 1.0 Strict//EN"
                          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
       (html (@@ (xmlns "http://www.w3.org/1999/xhtml")
                (xml:lang "en") (lang "en"))
d128 1
a128 4
         (p "The web REPL is not currently published. This is the default, as it would not be prudent to ship these examples with a REPL publicly accessible via HTTP.")
         (p "The web REPL can be activated by connecting to the network REPL on localhost:5156 and issuing:")
         (div (@@ (class "code"))  "(publish \"/webrepl/*\" 'webrepl)")
         (p "If these examples are from the SISCweb distribution, as opposed to being built from source, this latter REPL is also disabled for security reasons. It can be activated by uncommenting the appropriate entry in the WEB-INF/web.xml file.")
@


1.3.4.3
log
@explicitely outputs <?xml pi in pages
@
text
@d14 1
a14 1
;;; Portions created by the Initial Developer are Copyright (C) 2005-2006
a67 1
           (*PI* xml "version=\"1.0\"")
a121 1
       (*PI* xml "version=\"1.0\"")
@


1.2
log
@merged from rel-0-2-dev
@
text
@d18 1
a35 1

a43 1

d46 2
a47 3

    (let loop ((sexp #f)
               (out #f)
d49 1
d51 2
a52 1
      (let ((sexp (read-sexp out result sexp first-iter?)))
d55 1
a55 4
           (loop sexp
                 (cdr (assoc 'message m))
                 e
                 #f))
d57 2
a58 6
           (let* ((result #f)
                  (out
                   (with-output-to-string
                     (lambda ()
                       (set! result (eval (with-input-from-string sexp read)))))))
             (loop sexp out result #f)))))))
d60 2
a61 1
  (define (read-sexp out result sexp first-iter?)
d75 35
a109 10
            (p ,(if first-iter? "" out))
            (p ,(with-output-to-string (lambda () (if first-iter? "" (pretty-print result)))))
            (form (@@ (name "repl") (action-e ,k-url) (method "post"))
             (textarea (@@ (name "sexp") (cols  80) (rows 12))
              ,(if first-iter? "" sexp))
             (br)
             (input (@@ (type "submit") (value "Send")))
             (input (@@ (type "reset") (value "Reset"))))
            (p (a (@@ (href-c "/")) "^ Home")))))))))

d122 1
a122 2
        (p
         "The web REPL is not currently published. This is the default, as it would not be prudent to ship these examples with a REPL publicly accessible via HTTP. The web REPL can be activated by issuing (publish \"/webrepl/*\" 'webrepl) in the REPL bound to this server's localhost:5156 socket. If these examples are from the SISCweb distribution, as opposed to having been built from source, this latter REPL is also disabled for security reasons. It can be activated by uncommenting the appropriate entry in the WEB-INF/web.xml file.")
d125 1
a126 1
  )
@


1.2.4.1
log
@added history (greenash); minor reformatting for clearer diff w/
previous revision
@
text
@a17 1
;;;     Dan (greenash)
d35 1
d44 1
d47 3
a49 2
    (let loop ((sexp "")
               (out "")
a50 1
               (hist '())
d52 1
a52 2
      (let* ((sexp-new (read-sexp out result sexp hist first-iter?))
             (hist-new (cons sexp-new hist)))
d55 4
a58 1
           (loop sexp (cdr (assoc 'message m)) e hist-new #f))  ; for errors
d60 6
a65 2
           (let ((res-and-out (with-input-from-string sexp-new eval-many)))
             (loop sexp-new (cdr res-and-out) (car res-and-out) hist-new #f)))))))
d67 1
a67 2

  (define (read-sexp out result sexp hist first-iter?)
d81 10
a90 35
             ,@@(if first-iter?
                   '()
                   `(,@@(if (zero? (string-length out))
                           '()
                           `((p "Output:" (pre ,out))))
                     (p "Result:"
                      (pre
                       ,(with-output-to-string
                          (lambda () (pretty-print result)))))))
             (form (@@ (name "repl") (action-e ,k-url) (method "post"))
              (textarea (@@ (name "sexp") (cols  80) (rows 12))
                        ,(if first-iter? "" sexp))
              (br)
              (input (@@ (type "submit") (value "Send")))
              (input (@@ (type "reset") (value "Reset"))))
             (p "Previous inputs: ")
             ,@@(map (lambda (text) `(div (pre ,text) (hr)))
                    hist)
             (p (a (@@ (href-c "/")) "^ Home")))))))))


  ;; Reads a sequence of s-expressions using (read), evaluates them, saving
  ;; the output to a string, and returns a cons of the last result and the
  ;; accumulated output. Stops upon encountering EOF.
  (define (eval-many)
    (let* ((result #f)
           (out (with-output-to-string
                  (lambda ()
                    (let read-loop ()
                      (let ((sexp1 (read)))
                        (unless (eof-object? sexp1)
                          (begin
                            (set! result (eval sexp1))
                            (read-loop)))))))))
      (cons result out)))
d103 2
a104 1
        (p "The web REPL is not currently published. This is the default, as it would not be prudent to ship these examples with a REPL publicly accessible via HTTP. The web REPL can be activated by issuing (publish \"/webrepl/*\" 'webrepl) in the REPL bound to this server's localhost:5156 socket. If these examples are from the SISCweb distribution, as opposed to having been built from source, this latter REPL is also disabled for security reasons. It can be activated by uncommenting the appropriate entry in the WEB-INF/web.xml file.")
a106 1
 )
d108 1
@


1.2.4.2
log
@fixed contributor name
@
text
@d18 1
a18 1
;;;     Dan Muresan
@


1.1
log
@file webrepl.scm was initially added on branch rel-0-2-dev.
@
text
@d1 108
@


1.1.2.1
log
@initial import
@
text
@a0 121
;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.


(require-library 'siscweb/bindings)
(require-library 'siscweb/html)


(module examples/webrepl
  (webrepl webrepl-not-published)

  (import string-io)

  (import siscweb/bindings)
  (import siscweb/html)


  (define (webrepl req)
    (set! req #f)

    (let loop ((sexp #f)
               (out #f)
               (result #f)
               (first-iter? #t))
      (let ((sexp (read-sexp out result sexp first-iter?)))
        (with/fc
         (lambda (m e)
           (loop sexp
                 (cdr (assoc 'message m))
                 e
                 #f))
         (lambda ()
           (let* ((result #f)
                  (out
                   (with-output-to-string
                     (lambda ()
                       (set! result (eval (with-input-from-string sexp read)))))))
             (loop sexp out result #f)))))))

  (define (read-sexp out result sexp first-iter?)
    (extract-single-binding
     'sexp
     (get-bindings
      (send-html/suspend
       (lambda (k-url)
         `(html
           (head
            (title "Web REPL")
            (link (@@ (href-c "/css/default.css")
                     (rel "stylesheet")
                     (type "text/css"))))
           (body (@@ (onload "document.repl.sexp.select(); document.repl.sexp.focus();"))
            (p ,(if first-iter? "" out))
            (p ,(with-output-to-string (lambda () (if first-iter? "" (pretty-print result)))))
            (form (@@ (name "repl") (action-e ,k-url) (method "post"))
             (textarea (@@ (name "sexp") (cols  80) (rows 12))
              ,(if first-iter? "" sexp))
             (br)
             (input (@@ (type "submit") (value "Send")))
             (input (@@ (type "reset") (value "Reset"))))
            (p (a (@@ (href-c "/")) "^ Home")))))))))



  (define (webrepl-not-published req)
    (send-html/back
     `(html
       (head
        (title "Web REPL Not Published")
        (link (@@ (href-c "/css/default.css")
                 (rel "stylesheet")
                 (type "text/css"))))
       (body
        (h2 "WebREPL Not Published")
        (p
         "The web REPL is not currently published. This is the default, as
it would not be prudent to ship these examples with a REPL publicly
accessible via HTTP. The web REPL can be activated by issuing (publish
\"/webrepl/*\" 'webrepl) in the REPL bound to this server's
localhost:5156 socket. If these examples are from the SISCweb distribution,
as opposed to having been built from source, that REPL is also
disabled for security reasons. It can be activated by uncommenting the
appropriate entry in the WEB-INF/web.xml file.")
        (p (a (@@ (href-c "/")) "^ Home"))))))


  )

(import siscweb/publish)
(import examples/webrepl)
(publish "/webrepl/*" 'not-published)
(publish "/webrepl/*" 'webrepl)

repl@


1.1.2.2
log
@removed extra lines at the end; added header
@
text
@a79 1
            (h2 "Web REPL")
d103 8
a110 8
         "The web REPL is not currently published. This is the
default, as it would not be prudent to ship these examples with a REPL
publicly accessible via HTTP. The web REPL can be activated by issuing
(publish \"/webrepl/*\" 'webrepl) in the REPL bound to this server's
localhost:5156 socket. If these examples are from the SISCweb
distribution, as opposed to having been built from source, this latter
REPL is also disabled for security reasons. It can be activated by
uncommenting the appropriate entry in the WEB-INF/web.xml file.")
d115 7
@


1.1.2.3
log
@the repl didn't seem to like parsing the previous revision
@
text
@d104 8
a111 1
         "The web REPL is not currently published. This is the default, as it would not be prudent to ship these examples with a REPL publicly accessible via HTTP. The web REPL can be activated by issuing (publish \"/webrepl/*\" 'webrepl) in the REPL bound to this server's localhost:5156 socket. If these examples are from the SISCweb distribution, as opposed to having been built from source, this latter REPL is also disabled for security reasons. It can be activated by uncommenting the appropriate entry in the WEB-INF/web.xml file.")
@


