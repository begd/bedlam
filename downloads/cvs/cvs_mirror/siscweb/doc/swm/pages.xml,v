head	1.5;
access;
symbols
	rel-0-6-dev:1.5.0.4
	rel-0-5-fix:1.5.0.2
	rel-0-5:1.5
	rel-0-5-dev-safe-frames:1.4.4.4.0.2
	Root_rel-0-5-dev-safe-frames:1.4.4.4
	rel-0-4-fix-0:1.4
	rel-0-5-dev:1.4.0.4
	rel-0-4-fix:1.4.0.2
	rel-0-3-fix-3:1.3.2.3
	rel-0-3-fix-2:1.3.2.1
	rel-0-4-dev-sisc-1-11:1.3.4.3
	rel-0-3-fix-1:1.3
	rel-0-4-dev:1.3.0.4
	rel-0-3-fix:1.3.0.2
	rel-0-3:1.3
	rel-0-3-dev-1:1.2.4.7
	rel-0-2-fix-2:1.2.2.3
	rel-0-2-fix-1:1.2.2.1
	rel-0-2-fix:1.2.0.2
	rel-0-3-dev:1.2.0.4
	rel-0-2:1.2
	rel-0-2-dev:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2007.04.12.03.51.15;	author acolomba;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2006.09.03.01.42.25;	author acolomba;	state Exp;
branches
	1.4.2.1
	1.4.4.1;
next	1.3;

1.3
date	2005.11.25.20.43.32;	author acolomba;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2005.06.19.04.53.02;	author acolomba;	state Exp;
branches
	1.2.2.1
	1.2.4.1;
next	1.1;

1.1
date	2005.06.05.18.07.58;	author acolomba;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.06.05.18.07.58;	author acolomba;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.06.05.20.57.38;	author acolomba;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2005.06.10.01.43.00;	author acolomba;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2005.06.10.01.50.33;	author acolomba;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2005.06.17.23.46.56;	author acolomba;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2005.06.18.02.23.58;	author acolomba;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2005.06.18.16.37.26;	author acolomba;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2005.06.19.02.05.13;	author acolomba;	state Exp;
branches;
next	;

1.2.2.1
date	2005.07.10.20.04.00;	author acolomba;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2005.07.31.20.04.05;	author acolomba;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2005.08.02.02.04.15;	author acolomba;	state Exp;
branches;
next	;

1.2.4.1
date	2005.06.24.00.46.06;	author acolomba;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2005.07.06.05.13.48;	author acolomba;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2005.07.10.03.03.35;	author acolomba;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2005.07.15.01.49.39;	author acolomba;	state Exp;
branches;
next	1.2.4.5;

1.2.4.5
date	2005.07.17.23.45.43;	author acolomba;	state Exp;
branches;
next	1.2.4.6;

1.2.4.6
date	2005.07.30.03.20.39;	author acolomba;	state Exp;
branches;
next	1.2.4.7;

1.2.4.7
date	2005.08.02.01.46.54;	author acolomba;	state Exp;
branches;
next	1.2.4.8;

1.2.4.8
date	2005.11.19.16.11.15;	author acolomba;	state Exp;
branches;
next	1.2.4.9;

1.2.4.9
date	2005.11.25.20.11.11;	author acolomba;	state Exp;
branches;
next	;

1.3.2.1
date	2006.02.25.17.12.07;	author acolomba;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.03.02.03.44.23;	author acolomba;	state Exp;
branches;
next	1.3.2.3;

1.3.2.3
date	2006.04.15.15.55.29;	author acolomba;	state Exp;
branches;
next	;

1.3.4.1
date	2005.12.14.22.46.31;	author acolomba;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2006.02.24.04.12.13;	author acolomba;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2006.02.25.15.27.41;	author acolomba;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2006.03.02.03.25.34;	author acolomba;	state Exp;
branches;
next	1.3.4.5;

1.3.4.5
date	2006.04.11.02.58.06;	author acolomba;	state Exp;
branches;
next	1.3.4.6;

1.3.4.6
date	2006.04.12.02.46.33;	author acolomba;	state Exp;
branches;
next	1.3.4.7;

1.3.4.7
date	2006.04.15.00.56.28;	author acolomba;	state Exp;
branches;
next	1.3.4.8;

1.3.4.8
date	2006.04.15.13.45.35;	author acolomba;	state Exp;
branches;
next	;

1.4.2.1
date	2006.11.30.03.48.11;	author acolomba;	state Exp;
branches;
next	;

1.4.4.1
date	2006.11.30.03.34.13;	author acolomba;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2007.01.27.04.29.24;	author acolomba;	state Exp;
branches;
next	1.4.4.3;

1.4.4.3
date	2007.01.27.16.17.56;	author acolomba;	state Exp;
branches;
next	1.4.4.4;

1.4.4.4
date	2007.03.10.20.59.49;	author acolomba;	state Exp;
branches;
next	1.4.4.5;

1.4.4.5
date	2007.04.04.21.36.05;	author acolomba;	state Exp;
branches;
next	1.4.4.6;

1.4.4.6
date	2007.04.08.14.37.53;	author acolomba;	state Exp;
branches;
next	1.4.4.7;

1.4.4.7
date	2007.04.11.03.55.23;	author acolomba;	state Exp;
branches;
next	;

1.5.4.1
date	2007.09.22.15.55.19;	author acolomba;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2007.09.22.15.59.48;	author acolomba;	state Exp;
branches;
next	;


desc
@@


1.5
log
@merged from rel-0-5-dev
@
text
@<chapter id="pages">
  <title>Generating content</title>

  <para>
    &SISCweb; programs can generate HTTP responses of a variety of
    data types -- HTML/XML/XHTML represented in SXML notation, images
    --, or they can forward requests to standard JSPs/Servlet
    components.  Procedures to generate HTTP errors are also
    available. Other response types can be easily plugged on top of a
    basic set of response procedures.
  </para>

  <para>
    The procedures that produce HTTP responses are in the form
    <function>send-*/*</function>, with the first pattern indicating
    the type of response, and the latter determining whether or not to
    save the execution state, and whether or not to clear previously
    saved states.
  </para>
  <para>
    All the procedures accept an optional association list of HTTP
    response headers as the first, optional argument. The association
    list is in the form <parameter>((name value)
    ...)</parameter>. This can be used to override the default
    Content-Type, to set caching options, etc.
  </para>


  <section id="markup">
    <title>Markup</title>

    <para>
      &SISCweb; provides a number of modules with an uniform API to
      produce HTML, XHTML and XML markup. Their procedures accept
      documents in SXML syntax, and in the case of HTML and XHTML, a
      few extra elements and attributes are used to assist with
      continuation-based programming (see <xref linkend="ehtml"/>.)
    </para>

    <section id="send-html">
      <title>(X)HTML Core Procedures</title>

      <para>
        &requires;
        <emphasis role="bold">
          (import <emphasis>siscweb/html</emphasis>)
        </emphasis>
        <sbr/>
        &requires;
        <emphasis role="bold">
          (import <emphasis>siscweb/xhtml</emphasis>)
        </emphasis>
        <sbr/>
        &locatedin;
        <emphasis role="bold">
          siscweb-sxml.jar
        </emphasis>
      </para>

      <para>
        The core procedures to send (X)HTML content follow the basic
        <function>send-html/*</function> and
        <function>send-xhtml/*</function> patterns. They differ in
        whether or not they clear the continuation table, and whether
        or not they return after the user interacts with the page.
      </para>

      <note>
        <para>
          The XHTML and HTML modules serialize SXML differently, with
          the former producing pure XML, and the latter producing
          markup tweaked to display properly in known browsers. When
          producing XHTML for common user agents, it is advisable to
          keep the <link
          url="http://www.w3.org/TR/xhtml1/#guidelines">HTML
          Compatibility Guidelines</link> in mind.
        </para>

        <para>
          Also, while the XHTML module implements the complete SXML
          specification, the HTML module is more limited in that only
          understands DTD declarations,
          <function>*VERBATIM*</function> and
          <function>*COMMENT*</function> elements besides the basic
          element+attribute syntax. Also, while the XHTML module
          considers the <function>*TOP*</function> element functional,
          the HTML module silently ignores it.
        </para>
      </note>

      <blockquote>
        <para>
          <indexterm>
            <primary>send-html/suspend</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>request</type>
            <methodname>send-html/suspend</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>(lambda (k-url) &lt;sxml&gt;)</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xhtml/suspend</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>request</type>
            <methodname>send-xhtml/suspend</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>(lambda (k-url) &lt;sxml&gt;)</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              Sends the given SXML to the browser in the form of
              (X)HTML and suspends the execution flow. The
              <parameter>k-url</parameter> will contain a hash used to
              resume the program's execution, and should therefore be
              used in forms and links as needed. When the browser
              submits a request to the <parameter>k-url</parameter>,
              said request will become the return value of the
              procedure.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <informalexample>
        <programlisting>
          <![CDATA[
(let loop ((n 0))
  (send-html/suspend
    (lambda (k-url)
      `(html
         (body
           (a (@@ (href ,k-url)) ,n)))))
  (loop (+ n 1)))
          ]]>
        </programlisting>
      </informalexample>

      <blockquote>
        <para>
          <indexterm>
            <primary>send-html/forward</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>request</type>
            <methodname>send-html/forward</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>(lambda (k-url) &lt;sxml&gt;)</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xhtml/forward</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>request</type>
            <methodname>send-xhtml/forward</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>(lambda (k-url) &lt;sxml&gt;)</parameter>
            </methodparam>
          </methodsynopsis>


          <blockquote>
            <para>
              These procedures behave like
              <function>send-html/suspend</function> and
              <function>send-xhtml/suspend</function>, except that
              they clear the continuation table first. This will
              prevent the client from using the back button to resume
              the program flow from earlier points.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <blockquote>
        <para>
          <indexterm>
            <primary>send-html/back</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-html/back</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;sxml&gt;</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xhtml/back</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-xhtml/back</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;sxml&gt;</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              These procedures send the provided SXML to the browser and stop.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <informalexample>
        <programlisting>
(send-html/back
  `(html
    (body
      (a (@@ (href "http://www.w3.org")) "w3c"))))
        </programlisting>
      </informalexample>

      <blockquote>
        <para>
          <indexterm>
            <primary>send-html/finish</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-html/finish</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;sxml&gt;</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xhtml/finish</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-xhtml/finish</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;sxml&gt;</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              Like <function>send-html/back</function> and
              <function>send-html/back</function>, these procedures
              send the provided SXML to the browser and stop, but
              clear the continuation table first.
            </para>
          </blockquote>
        </para>
      </blockquote>
    </section>

    <section id="send-xml">
      <title>XML Core Procedures</title>

      <para>
        &requires;
        <emphasis role="bold">
          (import <emphasis>siscweb/xml</emphasis>)
        </emphasis>
        <sbr/>
        &locatedin;
        <emphasis role="bold">
          siscweb-sxml.jar
        </emphasis>
      </para>

      <para>
        This module provides functions to send XML responses with the
        same features as those in the HTML and XHTML modules. This
        enables clients to conduct a stateful conversation with the
        server. The same features available through the extended
        (X)HTML can be reproduced in any XML element by using the
        <function>store/forward!</function> procedure described in
        <xref linkend="forward"/>.
      </para>

      <blockquote>
        <para>
          <indexterm>
            <primary>send-xml/suspend</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>request</type>
            <methodname>send-xml/suspend</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>(lambda (k-url) &lt;sxml&gt;)</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xml/forward</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>request</type>
            <methodname>send-xml/forward</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>(lambda (k-url) &lt;sxml&gt;)</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xml/back</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-xml/back</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;sxml&gt;</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xml/finish</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-xml/finish</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;sxml&gt;</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              These functions are analogous to those in the HTML and
              XHTML modules.
            </para>
          </blockquote>
        </para>
      </blockquote>
    </section>

    <section id="sxml">
      <title>Extended SXML</title>
      <para>
        SISCweb's <function>send-[html/xhtml/xml]/*</function>
        procedures accept a slightly extended version of the SXML
        syntax.
      </para>

      <warning>
        <para>
          The <function>send-html/*</function> procedures transform
          symbols in the markup into entities. This usage is now
          deprecated, and the form <function>(&amp; name)</function>
          should be used instead for HTML, XHTML and XML.
        </para>
      </warning>

      <informalexample>
        <programlisting>
          <![CDATA[
(send-html/back
  `(html
    (body
     (p "Can't" (& nbsp) "wrap" (& nbsp) "me.")
     (p "Nor" (& |#160|) "me."))))
          ]]>
        </programlisting>
      </informalexample>

      <para>
        Numbers in attributes and text nodes are automatically
        converted to strings using <function>pretty-print</function>.
      </para>

      <informalexample>
        <programlisting>
(send-html/back
  `(html
    (body
     (table (@@ (width 42))
       (tr (td 42))))))
        </programlisting>
      </informalexample>

      <para>
        The value &f; as an element or attribute value is
        ignored. This comes handy when generating dynamic content.
      </para>

      <informalexample>
        <programlisting>
;; equivalent to (html (body (p)))
(send-html/back
  `(html
    (body
     (p (@@ (align #f))
      ,(hashtable/get ht 'para)))))
        </programlisting>
      </informalexample>

      <para>
        The element *VERBATIM* can be used to produce non-escaped text.
      </para>

      <informalexample>
        <programlisting>
          <![CDATA[
(send-html/back
  `(*VERBATIM*
    "<html><body><p>Hello, &quot;world&quot;</p></body></html>))
          ]]>
        </programlisting>
      </informalexample>

      <para>
        The elements *DTD-INFO* and *DTD-INFO/PUBLIC* can be used to
        generate DTD declarations. For XML/XHTML only, the *PI*
        element should be used to generate the XML declaration.
      </para>

      <informalexample>
        <programlisting>
          <![CDATA[
(send-xhtml/back
 `(*TOP*
   (*PI* xml "version=\"1.0\"")
   (*DTD-INFO/PUBLIC* "html"
                      "-//W3C//DTD XHTML 1.0 Strict//EN"
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
   (html (@@ (xmlns "http://www.w3.org/1999/xhtml")
            (xml:lang "en") (lang "en"))
    (head
     (title "Hello"))
    (body
     (p "Hello")))))
          ]]>
        </programlisting>
      </informalexample>
    </section>

    <section id="ehtml">
      <title>Extended HTML markup</title>

      <para>
        The HTML and XHTML modules support a number of extra
        attributes to support continuation-centric programming and
        interaction with the J2EE environment.
      </para>

      <blockquote>
        <para>
          <indexterm>
            <primary>@@bindings</primary>
          </indexterm>
          &sxml-attribute;
          <literal>`(a (@@ (bindings ,binding-alist [(anchor name)]...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(form (@@ (bindings ,binding-alist) [(anchor name)] ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(iframe (@@ (bindings ,binding-alist) [(anchor name)] ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(img (@@ (bindings ,binding-alist) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(link (@@ (bindings ,binding-alist) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(object (@@ (bindings ,binding-alist) [(anchor name)] ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(script (@@ (bindings ,binding-alist) ...) ...)</literal>
          <blockquote>
            <para>
              This syntax is only usable from the
              <function>*/suspend</function> and
              <function>*/forward</function> procedures. It will
              produce a link that, when followed, will bind the given
              bindings to the request object returned by these two
              functions. The <parameter>binding-alist</parameter> is
              in the format specified in <xref linkend="bindings"/>.
            </para>
            <para>
              The optional <parameter>anchor</parameter> attribute allowed by some
              of the elements is made part of the generated URL.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <blockquote>
        <para>
          <indexterm>
            <primary>@@action-p</primary>
          </indexterm>
          <indexterm>
            <primary>@@data-p</primary>
          </indexterm>
          <indexterm>
            <primary>@@href-p</primary>
          </indexterm>
          <indexterm>
            <primary>@@src-p</primary>
          </indexterm>
          &sxml-attribute;
          <literal>`(a (@@ (href-p ,proc) [(bindings ,binding-alist)] [(anchor ,name)] ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(form (@@ (action-p ,proc) [(bindings ,binding-alist)] [(anchor ,name)] ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(iframe (@@ (src-p ,proc) [(bindings ,binding-alist)] [(anchor ,name)] ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(img (@@ (src-p ,proc) [(bindings ,binding-alist)] ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(link (@@ (href-p ,proc) [(bindings ,binding-alist)] ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(object (@@ (data-p ,proc) [(bindings ,binding-alist)] [(anchor ,name) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(script (@@ (src-p ,proc) [(bindings ,binding-alist)] ...) ...)</literal>
          <blockquote>
            <para>
              These attributes produce links that invoke the given
              procedure <parameter>proc</parameter> when followed. The
              HTTP request object will be passed as the only parameter
              to the procedure, and will contain the bindings
              specified in <parameter>binding-alist</parameter>, if
              present.
            </para>
            <para>
              In the case of <function>@@action-p</function>, the form
              field values and the specified bindings will be merged,
              with the latter taking precedence over the former.
            </para>
            <para>
              The optional <parameter>anchor</parameter> attribute
              allowed by some of the elements is made part of the
              generated URL.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <blockquote>
        <para>
          <indexterm>
            <primary>@@action-c</primary>
          </indexterm>
          <indexterm>
            <primary>@@data-c</primary>
          </indexterm>
          <indexterm>
            <primary>@@href-c</primary>
          </indexterm>
          <indexterm>
            <primary>@@src-c</primary>
          </indexterm>
          &sxml-attribute;
          <literal>`(a (@@ (href-c ,c-url) [(bindings ,binding-alist)] ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(form (@@ (action-c ,c-url) [(bindings ,binding-alist)] ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(iframe (@@ (src-c ,c-url) [(bindings ,binding-alist)] ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(img (@@ (src-c ,c-url) [(bindings ,binding-alist)] ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(link (@@ (href-c ,c-url) [(bindings ,binding-alist)] ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(object (@@ (data-c ,c-url) [(bindings ,binding-alist)] ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(script (@@ (src-c ,c-url) [(bindings ,binding-alist)] ...) ...)</literal>
          <blockquote>
            <para>
              These attributes allow specifying URLs relative to the
              context in which the &SISCweb; application is
              running. They are useful to reference plain HTML files
              or JSPs that co-exist in the same context. If any
              bindings are specified, they will
              be included in the request associated to the
              <parameter>c-url</parameter>.
            </para>
            <para>
              The <parameter>anchor</parameter> attribute is not
              allowed, as it can be directly specified in the
              <parameter>c-url</parameter> parameter.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <blockquote>
        <para>
          <indexterm>
            <primary>@@action-e</primary>
          </indexterm>
          <indexterm>
            <primary>@@data-e</primary>
          </indexterm>
          <indexterm>
            <primary>@@href-e</primary>
          </indexterm>
          <indexterm>
            <primary>@@src-e</primary>
          </indexterm>
          &sxml-attribute;
          <literal>`(a (@@ (href-e ,url) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(form (@@ (action-e ,url) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(iframe (@@ (src-e ,url) ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(img (@@ (src-e ,url) ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(link (@@ (href-e ,url) ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(object (@@ (data-e ,url) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(script (@@ (src-e ,url) ...) ...)</literal>
          <blockquote>
            <para>
              These attributes encode the given
              <parameter>url</parameter> as per the the Java
              <function>HttpServletResponse.encodeURL()</function>
              method. This is useful to support cookie-less
              interaction, as it will encode the session ID in the
              <parameter>url</parameter> as needed.
            </para>
            <para>
              The <parameter>anchor</parameter> attribute is not
              allowed, as it can be directly specified in the
              <attribute>c-url</attribute>.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <blockquote>
        <para>
          <indexterm>
            <primary>@@type "graphviz"</primary>
          </indexterm>
          &sxml-attribute;
          <literal>`(object (@@ (type "graphviz") (layout ,layout) (format ,format) ...)
          (graph (@@ (id ,id) ...))</literal>
          <blockquote>
            <para>
              If the attribute <parameter>type "graphviz"</parameter>
              is specified for the <function>object</function>
              element, a Graphviz graph will be embedded in the
              document.
            </para>
            <para>
              The <parameter>layout</parameter> and
              <parameter>format</parameter> attributes are analogous
              to the omonymous parameters to the
              <function>send-graphviz/*</function> functions (see
              <xref linkend="send-graphviz"/>.) However, the value of
              <parameter>format</parameter> determines how the content
              is included:
            </para>

            <itemizedlist>
              <listitem>
                <parameter>gif, jpg, png</parameter>: The graph is
                embedded as an <function>img</function> tag, and a
                corresponding image map is generated. Links associated
                to nodes, edges and records will be mapped
                appropriately. Just as for other document elements,
                the <function>@@href[-[p|c|e]]</function> and
                <function>@@bindings</function> attributes are
                available, and behave as described in <xref
                linkend="ehtml"/>.
              </listitem>
              <listitem>
                <parameter>ps, svg, etc.</parameter>: The graph is
                embedded as an <function>object</function> tag. The
                appropriate mime type is automatically set, and needs
                not be specified explicitely.
              </listitem>
            </itemizedlist>

            <para>
              In both cases, any attribute specified for the
              <function>object</function> tag will be applied toward
              the generated <function>object</function> or
              <function>img</function> tag.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <informalexample>
        <programlisting>
(send-html/suspend
 (lambda (k-url)
  `(html
    (head
     (title "Embedded Graphviz")
    (body
    (h3 "Embedded Graphviz")

    (object (@@ (type "graphviz")
               (layout dot) (format png))
      (graph (@@ (id "G"))
        (node (@@ (id "c") (label "scissors") (href "http://www.google.com/search?q=scissors")))
        (node (@@ (id "p") (label "paper") (href "http://www.google.com/search?q=paper")))
        (node (@@ (id "s") (label "stone") (href "http://www.google.com/search?q=stone")))
        (edge (@@ (from "c") (to "p") (label "cut") (href-p ,cut)))
        (edge (@@ (from "p") (to "s") (label "wraps") (href-c "/")))
        (edge (@@ (from "s") (to "c") (label "breaks") (href-e ,k-url))))))))))
        </programlisting>
      </informalexample>
    </section>
  </section>

  <section id="send-text">
    <title>Plain Text</title>

    <para>
      &requires;
      <emphasis role="bold">
        (import <emphasis>siscweb/text</emphasis>)
      </emphasis>
      <sbr/>
      &locatedin;
      <emphasis role="bold">
        siscweb.jar
      </emphasis>
    </para>

    <para>
      This module provides functions to send plain text responses.
    </para>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-text/suspend</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>request</type>
          <methodname>send-text/suspend</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>(lambda (k-url) &lt;text&gt;)</parameter>
          </methodparam>
        </methodsynopsis>
        <sbr/>
        <indexterm>
          <primary>send-text/forward</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>request</type>
          <methodname>send-text/forward</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>(lambda (k-url) &lt;text&gt;)</parameter>
          </methodparam>
        </methodsynopsis>
        <sbr/>
        <indexterm>
          <primary>send-text/back</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-text/back</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>&lt;text&gt;</parameter>
          </methodparam>
        </methodsynopsis>
        <sbr/>
        <indexterm>
          <primary>send-text/finish</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-text/finish</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>&lt;text&gt;</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            These functions are analogous to those in the HTML and
            XHTML modules.
          </para>
        </blockquote>
      </para>
    </blockquote>
  </section>

  <section id="forward">
    <title>Forwarding Requests</title>

    <para>
      &requires;
      <emphasis role="bold">
        (import <emphasis>siscweb/forward</emphasis>)
      </emphasis>
      <sbr/>
      &locatedin;
      <emphasis role="bold">
        siscweb.jar
      </emphasis>
    </para>

    <para>
      Since &SISCweb; lives in a J2EE environment, it is sometimes
      convenient to generate content using traditional techniques such
      as JSPs and servlets rather than SXML.
    </para>

    <para>
      The <function>send-forward/*</function> procedures dispatch the
      request to the indicated context-relative URL. Bindings can be
      attached in the form of &lt;bindings&gt; objects or a-lists. The
      <function>forward/store!</function> function can also be used to
      pass URLs mapped to closures in the style of the
      <function>@@[action|data|href|src]-p</function> tags. Coupled
      with the URL corresponding to the current-continuation being set
      in the <parameter>siscweb.kURL</parameter> request attribute,
      this enables one to use &SISCweb; for control and JSP/Servlets
      for presentation without losing too many features.
    </para>

    <para>
      See <xref linkend="bindings-java"/> for details on how to access
      bindings from Java.
    </para>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-forward/suspend</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>request</type>
          <methodname>send-forward/suspend</methodname>
          <methodparam>
            <parameter>context-url</parameter>
          </methodparam>
          <methodparam choice="opt">
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Forwards the current request and suspends. The
            <parameter>context-url</parameter> is relative to the
            context in which the &SISCweb; application is running.
            The optional <parameter>bindings</parameter> parameter is
            either a &lt;bindings&gt; object or an a-list as
            specified in <xref linkend="bindings"/>. The continuation
            URL will be set in the <parameter>siscweb.kURL</parameter>
            request attribute.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-forward/forward</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>request</type>
          <methodname>send-forward/forward</methodname>
          <methodparam>
            <parameter>context-url</parameter>
          </methodparam>
          <methodparam choice="opt">
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            This function behaves like
            <function>send-forward/suspend</function>, except that it
            clears the continuation table first. This will prevent the
            client from using the back button and resume the program
            flow from earlier points.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-forward/back</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-forward/back</methodname>
          <methodparam>
            <parameter>context-url</parameter>
          </methodparam>
          <methodparam choice="opt">
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Forwards the current request to the provided
            <parameter>context-url</parameter> and stops.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-forward/finish</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-forward/finish</methodname>
          <methodparam>
            <parameter>context-url</parameter>
          </methodparam>
          <methodparam choice="opt">
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Like <function>send-forward/back</function>, this function
            forwards the current request to the provided
            <parameter>context-url</parameter> and stops, but clears
            the continuation table first.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>forward/store!</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>k-url</type>
          <methodname>forward/store!</methodname>
          <methodparam>
            <parameter>proc</parameter>
          </methodparam>
          <methodparam choice="opt">
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>
        <sbr/>
        &procedure;
        <methodsynopsis language="scheme">
          <type>k-url</type>
          <methodname>forward/store!</methodname>
          <methodparam>
            <parameter>c-url</parameter>
          </methodparam>
          <methodparam choice="opt">
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            In the first form, stores a closure
            <parameter>proc</parameter> in the continuation table, and
            returns the url that will invoke it.  The
            <parameter>proc</parameter> procedure should accept a
            request object as its only argument.  If
            <parameter>bindings</parameter> are specified, either as
            an a-list or a &lt;bindings&gt; object,
            <procedure>proc</procedure> will see them as bindings in
            its request.
          </para>

          <para>
            In the second form <function>forward/store!</function>
            stores a closure that forwards the request to the given
            context-relative <parameter>c-url</parameter>, including
            any specified bindings, if any.
          </para>

          <para>
            This function is especially useful when passing bindings
            through the <function>send-forward/*</function> functions,
            as it allows to embed links to closures in JSPs and the
            such, and can thus be used to implement the same style of
            page navigation afforded by the tags
            <function>@@*-c</function>+<function>@@bindings</function>
            and
            <function>@@*-c</function>+<function>@@bindings</function>
            in the extended (X)HTML described in <xref
            linkend="ehtml"/> Notably missing is the equivalent of the
            plain <function>@@bindings</function>.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>forward/store!</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>k-url</type>
          <methodname>forward/store!</methodname>
          <methodparam>
            <parameter>proc</parameter>
          </methodparam>
          <methodparam choice="opt">
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            This procedure is similar to the first form of
            <function>forward/store!</function>, except that when
            <function>proc</function> is executed, it will run in the
            dynamic context in effect when
            <function>forward/dynenv/store!</function> is invoked.
          </para>
          <para>
            The main reason to use this procedure is that
            <function>proc</function> will see the same SRFI-39
            parameter bindings established at the time
            <function>forward/dynenv/store!</function> was called.
          </para>
        </blockquote>
      </para>
    </blockquote>
  </section>

  <section id="image">
    <title>Images</title>

    <para>
      &requires;
      <emphasis role="bold">
        (import <emphasis>siscweb/image</emphasis>)
      </emphasis>
      <sbr/>
      &locatedin;
      <emphasis role="bold">
        siscweb.jar
      </emphasis>
    </para>

    <para>
      This module provides procedures to send images from
      <function>java.awt.image.RenderedImage</function> or files.
    </para>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-image/back</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-image/back</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>format</parameter>
          </methodparam>
          <methodparam>
            <parameter>java.awt.image.RenderedImage</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Sends the given image to the browser in the specified
            <parameter>format</parameter>.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-image/finish</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-image/finish</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>format</parameter>
          </methodparam>
          <methodparam>
            <parameter>java.awt.image.RenderedImage</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            This procedure behaves like
            <function>send-image/back</function>, except that it
            clears the continuation table. This will prevent the user
            from using the back button to resume the program flow from
            earlier points.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-image-file/back</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-image-file/back</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>format</parameter>
          </methodparam>
          <methodparam>
            <parameter>filename</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Sends the image contained in the specified
            <parameter>filename</parameter> to the browser in the
            specified <parameter>format</parameter>.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-image-file/finish</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-image-file/finish</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>format</parameter>
          </methodparam>
          <methodparam>
            <parameter>filename</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            This procedure behaves like
            <function>send-image-file/back</function>, except that it
            clears the continuation table. This will prevent the user
            from using the back button to resume the program flow from
            earlier points.
          </para>
        </blockquote>
      </para>
    </blockquote>
  </section>

  <section id="graphviz">
    <title>GraphViz Graphs</title>

    <para>
      &requires;
      <emphasis role="bold">
        (import <emphasis>siscweb/graphviz</emphasis>)
      </emphasis>
      <sbr/>
      &locatedin;
      <emphasis role="bold">
        siscweb-sxml.jar
      </emphasis>
    </para>

    <para>
      This module provides procedures to send graphs in various
      formats as generated by Graphviz (<ulink
      url="http://www.graphviz.org">http://www.graphviz.org</ulink>). Most of the functions accept a
      markup representation of DOT, the GraphViz language, in the form
      of DotML (see <xref linkend="dotml"/>.)
    </para>

    <para>
      The GraphViz programs (dot, neato, etc.) should be installed
      somewhere in the system path. This is usually the case in
      UNIX. Alternatively, it is possible to set the absolute paths to
      the GraphViz programs by using the
      <function>graphiz/put-layout-command!</function> function.
    </para>

    <para>
      Graphs can be generated either using the
      <function>send-graphviz/*</function> functions, or by embedding
      the <parameter>@@type=&quot;graphviz&quot;</parameter> attribute
      in the (X)HTML <function>object</function> tag (see <xref linkend="ehtml"/>.)
    </para>

    <section id="send-graphviz">
      <title>Graphviz Procedures</title>

      <para>
        Both <function>send-graphviz/*</function> procedures accept
        the same three parameters:
      </para>
      <itemizedlist>
        <listitem>
          <parameter>layout</parameter>: This is a string specifying
          which Graphviz layout engine to use. The current choices are
          dot, neato, twopi, circo, and fdp.
        </listitem>
        <listitem>
          <parameter>format</parameter>: This is a string specifying
          the output format. The most useful choices currently are
          gif, jpg, 'png, 'ps, and 'svg.
        </listitem>
        <listitem>
          <parameter>&lt;dotml&gt;</parameter>: This is an sxml
          representation of the DotML language. See <xref
          linkend="dotml"/>.
        </listitem>
      </itemizedlist>

      <blockquote>
        <para>
          <indexterm>
            <primary>send-graphviz/back</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-graphviz/back</methodname>
            <methodparam>
              <parameter>layout</parameter>
            </methodparam>
            <methodparam>
              <parameter>format</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;dotml&gt;</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              Sends the given <parameter>dotml</parameter> graph in
              the specified <parameter>format</parameter> to the
              browser after laying the graph out using the indicated
              <parameter>layout</parameter> engine.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <informalexample>
        <programlisting>
          <![CDATA[
(send-graphviz/back
  'dot 'png
  `(graph (@@ (id "G"))
    (node (@@ (id "c") (label "scissors")))
    (node (@@ (id "p") (label "paper")))
    (node (@@ (id "s") (label "stone")))
    (edge (@@ (from "c") (to "p") (label "cut")))
    (edge (@@ (from "p") (to "s") (label "wraps")))
    (edge (@@ (from "s") (to "c") (label "breaks")))))
          ]]>
        </programlisting>
      </informalexample>

      <blockquote>
        <para>
          <indexterm>
            <primary>send-graphviz/finish</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-graphviz/finish</methodname>
            <methodparam>
              <parameter>layout</parameter>
            </methodparam>
            <methodparam>
              <parameter>format</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;dotml&gt;</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              This procedure behaves like
              <function>send-graphviz/back</function>, except that it
              clears the continuation table. This will prevent the
              user from using the back button to resume the program
              flow from earlier points.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <blockquote>
        <para>
          <indexterm>
            <primary>graphviz/put-layout-command!</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>undefined</type>
            <methodname>graphviz/put-layout-command!</methodname>
            <methodparam>
              <parameter>layout</parameter>
              <parameter>command</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              Associates a given <parameter>layout</parameter> to the
              specified <parameter>command</parameter>.  This function
              can be used to add Graphviz layout engines, or to
              specify absolute paths for existing engines. The latter
              is likely to be an issue in Windows.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <informalexample>
        <programlisting>
          <![CDATA[
(graphviz/put-layout-command "dot" "d:/bin/dot.exe")
          ]]>
        </programlisting>
      </informalexample>

      <blockquote>
        <para>
          <indexterm>
            <primary>graphviz/get-layout-command</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>command/&f;</type>
            <methodname>graphviz/get-layout-command</methodname>
            <methodparam>
              <parameter>layout</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              Retrieves the <parameter>command</parameter> associated
              to the given <parameter>layout</parameter>, or &f; if no
              association is present.
            </para>
          </blockquote>
        </para>
      </blockquote>
    </section>

    <section id="dotml">
      <title>DotML</title>

      <para>
        The <function>send-graphviz/*</function> procedures accept a
        graph description expressed in DotML. DotML was created by
        Martin Loetzsch, and an exhaustive description rich with
        excellent examples is at <ulink
        url="http://www.martin-loetzsch.de/DOTML"/>.
      </para>
      <para>
        SISCweb does not use code from the DotML project, but it
        implements the same markup syntax in sxml form. There are a
        few differences between SISCweb's implementation and the
        original:
      </para>

      <itemizedlist>
        <listitem>
          The generated DOT code (which is then fed into GraphViz) is somewhat different.
        </listitem>
        <listitem>
          The <function>graph</function>,
          <function>sub-graph</function>, <function>cluster</function>
          and <function>node</function> elements must always specify
          an <parameter>id</parameter> attribute.
        </listitem>
        <listitem>
          The <parameter>id</parameter> attribute values at the moment
          are limited to strings of alphanumeric characters and
          underscore.
        </listitem>
        <listitem>
          The enclosing <function>record</function> elements must
          specify an <parameter>id</parameter> attribute, but nested
          <function>record</function> and <function>node</function>
          elements do not have to.
        </listitem>
      </itemizedlist>
    </section>
  </section>


  <section id="errors">
    <title>HTTP errors</title>

    <para>
      &requires;
      <emphasis role="bold">
        (import <emphasis>siscweb/error</emphasis>)
      </emphasis>
      <sbr/>
      &locatedin;
      <emphasis role="bold">
        siscweb.jar
      </emphasis>
    </para>

    <para>
      HTTP error responses can be generated using two functions, which
      differ in how the affect the continuation table. Neither
      function returns. The error codes should abide to the <ulink
      url="http://www.faqs.org/rfcs/rfc2616.html">RFC2616</ulink>
      specifications.
    </para>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-error/back</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-error/back</methodname>
          <methodparam>
            <parameter>code</parameter>
          </methodparam>
          <methodparam>
            <parameter>message</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Sends the specified HTTP error <parameter>code</parameter>
            and <parameter>message</parameter>.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-error/finish</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-error/finish</methodname>
          <methodparam>
            <parameter>code</parameter>
          </methodparam>
          <methodparam>
            <parameter>message</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Like <function>send-error/back</function>, but clears the
            continuation table.
          </para>
        </blockquote>
      </para>
    </blockquote>
  </section>
</chapter>
@


1.5.4.1
log
@added siscweb/file
@
text
@a1127 172

  <section id="file">
    <title>Files</title>

    <para>
      &requires;
      <emphasis role="bold">
        (import <emphasis>siscweb/file</emphasis>)
      </emphasis>
      <sbr/>
      &locatedin;
      <emphasis role="bold">
        siscweb.jar
      </emphasis>
    </para>

    <para>
      This module provides procedures to send files and file
      fragments.
    </para>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-file/back</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-file/back</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>mime-type</parameter>
          </methodparam>
          <methodparam>
            <parameter>file-url</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Sends the file located at the specified
            <parameter>file-url</parameter> to the browser as
            <parameter>mime-type</parameter>.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-file/finish</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-file/finish</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>mime-type</parameter>
          </methodparam>
          <methodparam>
            <parameter>file-url</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            This procedure behaves like
            <function>send-file/back</function>, except that it clears
            the continuation table. This will prevent the user from
            using the back button to resume the program flow from
            earlier points.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-file-range/back</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-file-range/back</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>mime-type</parameter>
          </methodparam>
          <methodparam>
            <parameter>file-url</parameter>
          </methodparam>
          <methodparam>
            <parameter>start</parameter>
          </methodparam>
          <methodparam>
            <parameter>end</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Sends a portion of the file located at the specified
            <parameter>file-url</parameter> to the browser as
            <parameter>mime-type</parameter>.
          </para>
          <para>
            The <parameter>start</parameter> and
            <parameter>end</parameter> parameters specify the range of
            bytes that will be sent, inclusive of
            <parameter>end</parameter>.
          </para>
          <para>
            The response will be sent with a status code of
            <literal>206 Partial Content</literal> and an appropriate
            <literal>Content-Range</literal> header, as specified by
            <ulink url="http://www.faqs.org/rfcs/rfc2616.html">RFC
            2616 - Hypertext Transfer Protocol -- HTTP/1.1</ulink>
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-file-range/finish</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-file-range/finish</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>mime-type</parameter>
          </methodparam>
          <methodparam>
            <parameter>file-url</parameter>
          </methodparam>
          <methodparam>
            <parameter>start</parameter>
          </methodparam>
          <methodparam>
            <parameter>end</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            This procedure behaves like
            <function>send-file-range/back</function>, except that it
            clears the continuation table. This will prevent the user
            from using the back button to resume the program flow from
            earlier points.
          </para>
        </blockquote>
      </para>
    </blockquote>

  </section>

@


1.5.4.2
log
@added headers to send-error/* functions
@
text
@d1707 3
a1709 4
      function returns. The error codes should abide to the
      specifications laid out in <ulink
      url="http://www.faqs.org/rfcs/rfc2616.html">RFC 2616 - Hypertext
      Transfer Protocol -- HTTP/1.1</ulink>.
a1720 3
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
a1746 3
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
@


1.4
log
@merged from rel-0-4-dev
@
text
@d30 1
a30 1
    <title>Generating Markup</title>
d141 7
a147 7
          (let loop ((n 0))
            (send-html/suspend
              (lambda (k-url)
                `(html
                   (body
                     (a (@@ (href ,k-url)) ,n)))))
            (loop (+ n 1)))
d240 4
a243 4
            (send-html/back
              `(html
                (body
                  (a (@@ (href "http://www.w3.org")) "w3c"))))
d380 2
a381 1
              These functions are analogous to the ones in the HTML and XHTML modules.
d408 5
a412 5
            (send-html/back
              `(html
                (body
                 (p "Can't" (& nbsp) "wrap" (& nbsp) "me.")
                 (p "Nor" (& |#160|) "me."))))
d424 5
a428 5
          (send-html/back
            `(html
              (body
               (table (@@ (width 42))
                 (tr (td 42))))))
d439 6
a444 6
          ;; equivalent to (html (body (p)))
          (send-html/back
            `(html
              (body
               (p (@@ (align #f))
                ,(hashtable/get ht 'para)))))
d455 3
a457 3
            (send-html/back
              `(*VERBATIM*
                "<html><body><p>Hello, &quot;world&quot;</p></body></html>))
d471 12
a482 12
            (send-xhtml/back
             `(*TOP*
               (*PI* xml "version=\"1.0\"")
               (*DTD-INFO/PUBLIC* "html"
                                  "-//W3C//DTD XHTML 1.0 Strict//EN"
                                  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
               (html (@@ (xmlns "http://www.w3.org/1999/xhtml")
                        (xml:lang "en") (lang "en"))
                (head
                 (title "Hello"))
                (body
                 (p "Hello")))))
d503 1
a503 1
          <literal>`(a (@@ (bindings ((name value) ...)) [(anchor name)]...) ...)</literal>
d506 1
a506 1
          <literal>`(form (@@ (bindings ((name value) ...)) [(anchor name)] ...) ...)</literal>
d509 1
a509 1
          <literal>`(iframe (@@ (bindings ((name value) ...)) [(anchor name)] ...) ...)</literal>
d512 1
a512 1
          <literal>`(img (@@ (bindings ((name value) ...)) ...) ...)</literal>
d515 1
a515 1
          <literal>`(link (@@ (bindings ((name value) ...)) ...) ...)</literal>
d518 1
a518 1
          <literal>`(object (@@ (bindings ((name value) ...)) [(anchor name)] ...) ...)</literal>
d521 1
a521 1
          <literal>`(script (@@ (bindings ((name value) ...)) ...) ...)</literal>
d526 5
a530 9
              <function>*/forward</function> procedures. It will produce
              a link that, when followed, will bind the given
              <parameter>name</parameter>/<parameter>value</parameter>
              pairs to the request object returned by these two
              functions. The bindings can then be fetched and used as
              detailed in <xref linkend="bindings"/>. The
              <parameter>name</parameter> parameter is either a string
              or symbol, while the <parameter>value</parameter>
              parameter can be any Scheme value.
d555 1
a555 1
          <literal>`(a (@@ (href-p ,proc) [(bindings ,bindings)] [(anchor name)] ...) ...)</literal>
d558 1
a558 1
          <literal>`(form (@@ (action-p ,proc) [(bindings ,bindings)] [(anchor name)] ...) ...)</literal>
d561 1
a561 1
          <literal>`(iframe (@@ (src-p ,proc) [(bindings ,bindings)] [(anchor name)] ...) ...)</literal>
d564 1
a564 1
          <literal>`(img (@@ (src-p ,proc) [(bindings ,bindings)] ...))</literal>
d567 1
a567 1
          <literal>`(link (@@ (href-p ,proc) [(bindings ,bindings)] ...))</literal>
d570 1
a570 1
          <literal>`(object (@@ (data-p ,proc) [(bindings ,bindings)] [(anchor name) ...) ...)</literal>
d573 1
a573 1
          <literal>`(script (@@ (src-p ,proc) [(bindings ,bindings)] ...) ...)</literal>
d579 3
a581 2
              to the procedure, and will contain the specified
              <parameter>bindings</parameter>, if any.
d585 2
a586 3
              field values and the specified
              <parameter>bindings</parameter> will be merged, with the
              latter taking precedence over the former.
d589 3
a591 2
              The optional <parameter>anchor</parameter> attribute allowed by some
              of the elements is made part of the generated URL.
d612 1
a612 1
          <literal>`(a (@@ (href-c ,c-url) [(bindings ,bindings)] ...) ...)</literal>
d615 1
a615 1
          <literal>`(form (@@ (action-c ,c-url) [(bindings ,bindings)] ...) ...)</literal>
d618 1
a618 1
          <literal>`(iframe (@@ (src-c ,c-url) [(bindings ,bindings)] ...))</literal>
d621 1
a621 1
          <literal>`(img (@@ (src-c ,c-url) [(bindings ,bindings)] ...))</literal>
d624 1
a624 1
          <literal>`(link (@@ (href-c ,c-url) [(bindings ,bindings)] ...))</literal>
d627 1
a627 1
          <literal>`(object (@@ (data-c ,c-url) [(bindings ,bindings)] ...) ...)</literal>
d630 1
a630 1
          <literal>`(script (@@ (src-c ,c-url) [(bindings ,bindings)] ...) ...)</literal>
d637 1
a637 1
              <parameter>bindings</parameter> are specified, they will
d644 1
a644 1
              <attribute>c-url</attribute>.
d759 17
a775 17
          (send-html/suspend
           (lambda (k-url)
            `(html
              (head
               (title "Embedded Graphviz")
              (body
              (h3 "Embedded Graphviz")

              (object (@@ (type "graphviz")
                         (layout dot) (format png))
                (graph (@@ (id "G"))
                  (node (@@ (id "c") (label "scissors") (href "http://www.google.com/search?q=scissors")))
                  (node (@@ (id "p") (label "paper") (href "http://www.google.com/search?q=paper")))
                  (node (@@ (id "s") (label "stone") (href "http://www.google.com/search?q=stone")))
                  (edge (@@ (from "c") (to "p") (label "cut") (href-p ,cut)))
                  (edge (@@ (from "p") (to "s") (label "wraps") (href-c "/")))
                  (edge (@@ (from "s") (to "c") (label "breaks") (href-e ,k-url))))))))))
d781 91
d1114 1
a1114 1
            dynamic context present when
d1129 1
a1129 1
    <title>Sending Images</title>
d1273 1
a1273 1
    <title>Generating GraphViz Graphs</title>
d1369 9
a1377 9
          (send-graphviz
            'dot 'png
            `(graph (@@ (id "G"))
              (node (@@ (id "c") (label "scissors")))
              (node (@@ (id "p") (label "paper")))
              (node (@@ (id "s") (label "stone")))
              (edge (@@ (from "c") (to "p") (label "cut")))
              (edge (@@ (from "p") (to "s") (label "wraps")))
              (edge (@@ (from "s") (to "c") (label "breaks")))))
d1444 1
a1444 1
          (graphviz/put-layout-command "dot" "d:/bin/dot.exe")
d1518 1
a1518 1
    <title>Generating HTTP errors</title>
@


1.4.2.1
log
@merged from rel-0-5-dev
@
text
@d380 1
a380 2
              These functions are analogous to those in the HTML and
              XHTML modules.
a782 92
  <section id="send-text">
    <title>Sending Text</title>

    <para>
      &requires;
      <emphasis role="bold">
        (import <emphasis>siscweb/text</emphasis>)
      </emphasis>
      <sbr/>
      &locatedin;
      <emphasis role="bold">
        siscweb.jar
      </emphasis>
    </para>

    <para>
      This module provides functions to send plain text responses with
      the same features as those in the HTML and XHTML modules.
    </para>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-text/suspend</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>request</type>
          <methodname>send-text/suspend</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>(lambda (k-url) &lt;text&gt;)</parameter>
          </methodparam>
        </methodsynopsis>
        <sbr/>
        <indexterm>
          <primary>send-text/forward</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>request</type>
          <methodname>send-text/forward</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>(lambda (k-url) &lt;text&gt;)</parameter>
          </methodparam>
        </methodsynopsis>
        <sbr/>
        <indexterm>
          <primary>send-text/back</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-text/back</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>&lt;text&gt;</parameter>
          </methodparam>
        </methodsynopsis>
        <sbr/>
        <indexterm>
          <primary>send-text/finish</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-text/finish</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>&lt;text&gt;</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            These functions are analogous to those in the HTML and
            XHTML modules.
          </para>
        </blockquote>
      </para>
    </blockquote>
  </section>

@


1.4.4.1
log
@added siscweb/text
@
text
@d380 1
a380 2
              These functions are analogous to those in the HTML and
              XHTML modules.
a782 92
  <section id="send-text">
    <title>Sending Text</title>

    <para>
      &requires;
      <emphasis role="bold">
        (import <emphasis>siscweb/text</emphasis>)
      </emphasis>
      <sbr/>
      &locatedin;
      <emphasis role="bold">
        siscweb.jar
      </emphasis>
    </para>

    <para>
      This module provides functions to send plain text responses with
      the same features as those in the HTML and XHTML modules.
    </para>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-text/suspend</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>request</type>
          <methodname>send-text/suspend</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>(lambda (k-url) &lt;text&gt;)</parameter>
          </methodparam>
        </methodsynopsis>
        <sbr/>
        <indexterm>
          <primary>send-text/forward</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>request</type>
          <methodname>send-text/forward</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>(lambda (k-url) &lt;text&gt;)</parameter>
          </methodparam>
        </methodsynopsis>
        <sbr/>
        <indexterm>
          <primary>send-text/back</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-text/back</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>&lt;text&gt;</parameter>
          </methodparam>
        </methodsynopsis>
        <sbr/>
        <indexterm>
          <primary>send-text/finish</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-text/finish</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>&lt;text&gt;</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            These functions are analogous to those in the HTML and
            XHTML modules.
          </para>
        </blockquote>
      </para>
    </blockquote>
  </section>

@


1.4.4.2
log
@updated for new bindings syntax; minor fixes
@
text
@d503 1
a503 1
          <literal>`(a (@@ (bindings ,binding-alist [(anchor name)]...) ...)</literal>
d506 1
a506 1
          <literal>`(form (@@ (bindings ,binding-alist) [(anchor name)] ...) ...)</literal>
d509 1
a509 1
          <literal>`(iframe (@@ (bindings ,binding-alist) [(anchor name)] ...) ...)</literal>
d512 1
a512 1
          <literal>`(img (@@ (bindings ,binding-alist) ...) ...)</literal>
d515 1
a515 1
          <literal>`(link (@@ (bindings ,binding-alist) ...) ...)</literal>
d518 1
a518 1
          <literal>`(object (@@ (bindings ,binding-alist) [(anchor name)] ...) ...)</literal>
d521 1
a521 1
          <literal>`(script (@@ (bindings ,binding-alist) ...) ...)</literal>
d526 9
a534 5
              <function>*/forward</function> procedures. It will
              produce a link that, when followed, will bind the given
              bindings to the request object returned by these two
              functions. The <parameter>binding-alist</parameter> is
              in the format specified in <xref linkend="bindings"/>.
d559 1
a559 1
          <literal>`(a (@@ (href-p ,proc) [(bindings ,bindings)] [(anchor ,name)] ...) ...)</literal>
d562 1
a562 1
          <literal>`(form (@@ (action-p ,proc) [(bindings ,bindings)] [(anchor ,name)] ...) ...)</literal>
d565 1
a565 1
          <literal>`(iframe (@@ (src-p ,proc) [(bindings ,bindings)] [(anchor ,name)] ...) ...)</literal>
d574 1
a574 1
          <literal>`(object (@@ (data-p ,proc) [(bindings ,bindings)] [(anchor ,name) ...) ...)</literal>
d905 1
a905 1
      in the <parameter>siscweb.kUrl</parameter> request attribute,
a914 11
    <warning>
      <para>
        The <function>send-forward/[suspend|forward]</function>
        functions now set the <parameter>siscweb.kUrl</parameter>
        request attribute instead of
        <parameter>siscweb.kURL</parameter>. The latter is deprecated
        and will be removed in the next release.
      </para>
    </warning>


d940 1
a940 1
            URL will be set in the <parameter>siscweb.kUrl</parameter>
@


1.4.4.3
log
@minor fixes
@
text
@d555 1
a555 1
          <literal>`(a (@@ (href-p ,proc) [(bindings ,binding-alist)] [(anchor ,name)] ...) ...)</literal>
d558 1
a558 1
          <literal>`(form (@@ (action-p ,proc) [(bindings ,binding-alist)] [(anchor ,name)] ...) ...)</literal>
d561 1
a561 1
          <literal>`(iframe (@@ (src-p ,proc) [(bindings ,binding-alist)] [(anchor ,name)] ...) ...)</literal>
d564 1
a564 1
          <literal>`(img (@@ (src-p ,proc) [(bindings ,binding-alist)] ...))</literal>
d567 1
a567 1
          <literal>`(link (@@ (href-p ,proc) [(bindings ,binding-alist)] ...))</literal>
d570 1
a570 1
          <literal>`(object (@@ (data-p ,proc) [(bindings ,binding-alist)] [(anchor ,name) ...) ...)</literal>
d573 1
a573 1
          <literal>`(script (@@ (src-p ,proc) [(bindings ,binding-alist)] ...) ...)</literal>
d579 2
a580 3
              to the procedure, and will contain the bindings
              specified in <parameter>binding-alist</parameter>, if
              present.
d584 3
a586 2
              field values and the specified bindings will be merged,
              with the latter taking precedence over the former.
d589 2
a590 3
              The optional <parameter>anchor</parameter> attribute
              allowed by some of the elements is made part of the
              generated URL.
d611 1
a611 1
          <literal>`(a (@@ (href-c ,c-url) [(bindings ,binding-alist)] ...) ...)</literal>
d614 1
a614 1
          <literal>`(form (@@ (action-c ,c-url) [(bindings ,binding-alist)] ...) ...)</literal>
d617 1
a617 1
          <literal>`(iframe (@@ (src-c ,c-url) [(bindings ,binding-alist)] ...))</literal>
d620 1
a620 1
          <literal>`(img (@@ (src-c ,c-url) [(bindings ,binding-alist)] ...))</literal>
d623 1
a623 1
          <literal>`(link (@@ (href-c ,c-url) [(bindings ,binding-alist)] ...))</literal>
d626 1
a626 1
          <literal>`(object (@@ (data-c ,c-url) [(bindings ,binding-alist)] ...) ...)</literal>
d629 1
a629 1
          <literal>`(script (@@ (src-c ,c-url) [(bindings ,binding-alist)] ...) ...)</literal>
d636 1
a636 1
              bindings are specified, they will
@


1.4.4.4
log
@removed references to kUrl; kURL is the right name
@
text
@d902 1
a902 1
      in the <parameter>siscweb.kURL</parameter> request attribute,
d912 11
d948 1
a948 1
            URL will be set in the <parameter>siscweb.kURL</parameter>
@


1.4.4.5
log
@minor fixes
@
text
@d644 1
a644 1
              <parameter>c-url</parameter> parameter.
@


1.4.4.6
log
@example formatting; nesting; clarifications
@
text
@d30 1
a30 1
    <title>Markup</title>
d141 7
a147 7
(let loop ((n 0))
  (send-html/suspend
    (lambda (k-url)
      `(html
         (body
           (a (@@ (href ,k-url)) ,n)))))
  (loop (+ n 1)))
d240 4
a243 4
(send-html/back
  `(html
    (body
      (a (@@ (href "http://www.w3.org")) "w3c"))))
d408 5
a412 5
(send-html/back
  `(html
    (body
     (p "Can't" (& nbsp) "wrap" (& nbsp) "me.")
     (p "Nor" (& |#160|) "me."))))
d424 5
a428 5
(send-html/back
  `(html
    (body
     (table (@@ (width 42))
       (tr (td 42))))))
d439 6
a444 6
;; equivalent to (html (body (p)))
(send-html/back
  `(html
    (body
     (p (@@ (align #f))
      ,(hashtable/get ht 'para)))))
d455 3
a457 3
(send-html/back
  `(*VERBATIM*
    "<html><body><p>Hello, &quot;world&quot;</p></body></html>))
d471 12
a482 12
(send-xhtml/back
 `(*TOP*
   (*PI* xml "version=\"1.0\"")
   (*DTD-INFO/PUBLIC* "html"
                      "-//W3C//DTD XHTML 1.0 Strict//EN"
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
   (html (@@ (xmlns "http://www.w3.org/1999/xhtml")
            (xml:lang "en") (lang "en"))
    (head
     (title "Hello"))
    (body
     (p "Hello")))))
d759 17
a775 17
(send-html/suspend
 (lambda (k-url)
  `(html
    (head
     (title "Embedded Graphviz")
    (body
    (h3 "Embedded Graphviz")

    (object (@@ (type "graphviz")
               (layout dot) (format png))
      (graph (@@ (id "G"))
        (node (@@ (id "c") (label "scissors") (href "http://www.google.com/search?q=scissors")))
        (node (@@ (id "p") (label "paper") (href "http://www.google.com/search?q=paper")))
        (node (@@ (id "s") (label "stone") (href "http://www.google.com/search?q=stone")))
        (edge (@@ (from "c") (to "p") (label "cut") (href-p ,cut)))
        (edge (@@ (from "p") (to "s") (label "wraps") (href-c "/")))
        (edge (@@ (from "s") (to "c") (label "breaks") (href-e ,k-url))))))))))
d782 1
a782 1
    <title>Plain Text</title>
d797 2
a798 1
      This module provides functions to send plain text responses.
d1115 1
a1115 1
            dynamic context in effect when
d1130 1
a1130 1
    <title>Images</title>
d1274 1
a1274 1
    <title>GraphViz Graphs</title>
d1370 9
a1378 9
(send-graphviz
  'dot 'png
  `(graph (@@ (id "G"))
    (node (@@ (id "c") (label "scissors")))
    (node (@@ (id "p") (label "paper")))
    (node (@@ (id "s") (label "stone")))
    (edge (@@ (from "c") (to "p") (label "cut")))
    (edge (@@ (from "p") (to "s") (label "wraps")))
    (edge (@@ (from "s") (to "c") (label "breaks")))))
d1445 1
a1445 1
(graphviz/put-layout-command "dot" "d:/bin/dot.exe")
d1519 1
a1519 1
    <title>HTTP errors</title>
@


1.4.4.7
log
@minor fix to graphviz example
@
text
@d1369 1
a1369 1
(send-graphviz/back
@


1.3
log
@merged from rel-0-3-dev
@
text
@d5 4
a8 3
    &SISCweb; programs can currently generate HTTP responses either by
    translating an SXML notation to HTML, or by forwarding to JSPs or
    servlets. Functions to generate HTTP errors are also
d10 16
a25 1
    basic set of response functions.
a27 2
  <section id="html">
    <title>Sending HTML</title>
d29 2
a30 11
    <para>
      &requires;
      <emphasis role="bold">
        (import <emphasis>siscweb/html</emphasis>)
      </emphasis>
      <sbr/>
      &locatedin;
      <emphasis role="bold">
        siscweb-sxml.jar
      </emphasis>
    </para>
d33 5
a37 4
      This module provides simple procedures to send HTML content to
      the browser. HTML documents are represented in the SXML syntax,
      and include a few special elements and attributes to assist with
      continuation-based programming.
d41 18
a58 1
      <title>HTML Core Procedures</title>
d61 5
a65 4
        The core procedures to send HTML content follow the basic
        send-html/* pattern. They differ in whether or not they clear
        the continuation table, and whether or not they return when
        the user interacts with the page.
d68 23
d100 18
d125 2
a126 2
              Sends the given SXML to the browser in the form of HTML
              and suspends the execution flow. The
d128 5
a132 5
              resume the execution, and should therefore be used in
              forms and anchors as needed. When the browser submits a
              request to the <parameter>k-url</parameter>, said
              request will become the return value of
              <function>send-html/suspend</function>.
d161 18
d184 1
d187 6
a192 5
              This function behaves like
              <function>send-html/suspend</function>, except that it
              clears the continuation table first. This will make it
              impossible to use the back button and resume the program
              flow from earlier points.
d207 18
d232 1
a232 1
              Sends the provided SXML to the browser and stops.
d238 1
a238 1
     <informalexample>
d243 1
a243 1
                  (a (@@ (href ,k-url)) ,n))))
d256 18
d281 4
a284 3
              Like <function>send-html/back</function>, this function
              sends the provided SXML to the browser and stops, but
              clears the continuation table first.
d291 14
a304 2
    <section id="html-markup">
      <title>Extended HTML markup</title>
d307 7
a313 2
        SISCweb's <function>send-html/*</function> procedures accept a
        slightly extended version of the HTML markup language.
d315 74
d390 3
a392 6
        Symbols are converted to entities. Numerical entities should
        be surrounded by pipes so that the Scheme reader does not
        interpret the pound character. Note that XML reserved
        characters (quotes, tag delimiters) are automatically
        converted to entities. The following example shows a possible
        usage:
d395 9
d406 7
a412 5
          (send-html/back
            `(html
              (body
               (p "Can't" nbsp "wrap" nbsp "me.")
               (p "Nor" |#160| "me."))))
d426 1
a426 1
               (table (@@ (width 10))
d433 1
a433 1
        ignored. This is handy when generating dynamic content.
d453 30
a482 3
          (send-html/back
            `(*VERBATIM*
               "<html><body><p>Hello, &quot;world&quot;</p></body></html>))
d485 1
d487 2
d491 3
a493 3
        A number of extra attributes are defined in order to
        facilitate continuation-centric programming and interaction
        with the J2EE environment.
a495 1

d502 1
a502 1
          <literal>`(a (@@ (bindings ((name value) ...)) ...) ...)</literal>
d505 1
a505 1
          <literal>`(form (@@ (bindings ((name value) ...)) ...) ...)</literal>
d508 1
a508 1
          <literal>`(iframe (@@ (bindings ((name value) ...)) ...) ...)</literal>
d517 1
a517 1
          <literal>`(object (@@ (bindings ((name value) ...)) ...) ...)</literal>
d523 3
a525 3
              This syntax is only usable from
              <function>send-html/suspend</function> and
              <function>send-html/forward</function>. It will produce
a534 12
          </blockquote>
        </para>
      </blockquote>

      <blockquote>
        <para>
          <indexterm>
            <primary>@@dispatch</primary>
          </indexterm>
          &sxml-attribute;
          <literal>`(a (@@ (dispatch ,proc) ...)) ...) ...)</literal>
          <blockquote>
d536 2
a537 3
              This will produce a link that, when followed, will
              invoke the given procedure. The HTTP request will be
              passed as a parameter to the procedure.
a540 9

        <note>
          <para>
            The <function>dispatch</function> attribute will be
            deprecated in release 0.3 in favor of the
            <function>[action|data|href|src]-p</function> attributes
            described below.
          </para>
        </note>
d558 1
a558 1
          <literal>`(a (@@ (href-p ,proc) [(bindings ,bindings)] ...) ...)</literal>
d561 1
a561 1
          <literal>`(form (@@ (action-p ,proc) [(bindings ,bindings)] ...) ...)</literal>
d564 1
a564 1
          <literal>`(iframe (@@ (src-p ,proc) [(bindings ,bindings)] ...) ...)</literal>
d573 1
a573 1
          <literal>`(object (@@ (data-p ,proc) [(bindings ,bindings)] ...) ...)</literal>
d579 4
a582 5
              These attributes produce links that, when followed,
              invoke the given procedure
              <parameter>proc</parameter>. The HTTP request object
              will be passed as the only parameter to the procedure,
              and will contain the specified
d591 4
d635 4
a638 5
              These attributes allow using
              <parameter>c-url</parameter>s relative to the context in
              which the &SISCweb; application is running. They are
              useful to reference plain HTML files or JSPs that
              co-exist in the same context. If any
d643 5
d688 1
a688 1
              These attributes will encode the given
d695 5
d739 1
a739 1
                linkend="html-markup"/>.
a782 1

d845 1
a845 1
            either a &quot;bindings&quot; object or an a-list as
d875 2
a876 2
            clears the continuation table first. This will make it
            impossible to use the back button and resume the program
d988 1
a988 1
            using the <function>send-forward/*</function> functions,
d990 2
a991 2
            such, and allows to implement the same style of page
            navigation afforded by the tags
d995 182
a1176 5
            in the sxml recognized by the
            <function>send-html/*</function> functions. Notably
            missing is the equivalent of the plain
            <function>@@bindings</function>, which is still
            unimplemented.
d1184 1
a1184 1
    <title>Sending GraphViz graphs</title>
d1216 3
a1218 3
      <function>send-graphviz/*</function> functions, or by embedding the
      <function>graphviz</function> tag in the markup sent to the
      <function>send-html/*</function> functions.
d1301 1
a1301 1
            <methodname>send-graphviz/back</methodname>
d1315 1
a1315 1
              This function behaves like
d1396 1
a1396 1
        SISCweb does not use code from the DotML project, but
d1404 1
a1404 1
          The generated DOT code (which is fed into Graphviz) is somewhat different.
@


1.3.2.1
log
@merged from rel-0-4-dev-sisc-1-11
@
text
@d9 1
a9 1
    basic set of response procedures.
d12 2
a13 2
  <section id="markup">
    <title>Generating Markup</title>
d16 16
a31 5
      &SISCweb; provides a number of modules with an uniform API to
      produce HTML, XHTML and XML markup. Their procedures accept
      documents in SXML syntax, and in the case of HTML and XHTML, a
      few extra elements and attributes are used to assist with
      continuation-based programming (see <xref linkend="ehtml"/>.)
d35 1
a35 18
      <title>(X)HTML Core Procedures</title>

      <para>
        &requires;
        <emphasis role="bold">
          (import <emphasis>siscweb/html</emphasis>)
        </emphasis>
        <sbr/>
        &requires;
        <emphasis role="bold">
          (import <emphasis>siscweb/xhtml</emphasis>)
        </emphasis>
        <sbr/>
        &locatedin;
        <emphasis role="bold">
          siscweb-sxml.jar
        </emphasis>
      </para>
d38 4
a41 5
        The core procedures to send (X)HTML content follow the basic
        <function>send-html/*</function> and
        <function>send-xhtml/*</function> patterns. They differ in
        whether or not they clear the continuation table, and whether
        or not they return after the user interacts with the page.
a43 23
      <note>
        <para>
          The XHTML and HTML modules serialize SXML differently, with
          the former producing pure XML, and the latter producing
          markup tweaked to display properly in known browsers. When
          producing XHTML for common user agents, it is advisable to
          keep the <link
          url="http://www.w3.org/TR/xhtml1/#guidelines">HTML
          Compatibility Guidelines</link> in mind.
        </para>

        <para>
          Also, while the XHTML module implements the complete SXML
          specification, the HTML module is more limited in that only
          understands DTD declarations,
          <function>*VERBATIM*</function> and
          <function>*COMMENT*</function> elements besides the basic
          element+attribute syntax. Also, while the XHTML module
          considers the <function>*TOP*</function> element functional,
          the HTML module silently ignores it.
        </para>
      </note>

a52 18
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>(lambda (k-url) &lt;sxml&gt;)</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xhtml/suspend</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>request</type>
            <methodname>send-xhtml/suspend</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
d60 2
a61 2
              Sends the given SXML to the browser in the form of
              (X)HTML and suspends the execution flow. The
d63 5
a67 5
              resume the program's execution, and should therefore be
              used in forms and links as needed. When the browser
              submits a request to the <parameter>k-url</parameter>,
              said request will become the return value of the
              procedure.
a95 3
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
a99 16
          <sbr/>
          <indexterm>
            <primary>send-xhtml/forward</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>request</type>
            <methodname>send-xhtml/forward</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>(lambda (k-url) &lt;sxml&gt;)</parameter>
            </methodparam>
          </methodsynopsis>

d103 5
a107 6
              These procedures behave like
              <function>send-html/suspend</function> and
              <function>send-xhtml/suspend</function>, except that
              they clear the continuation table first. This will
              prevent the client from using the back button to resume
              the program flow from earlier points.
a121 18
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;sxml&gt;</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xhtml/back</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-xhtml/back</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
d129 1
a129 1
              These procedures send the provided SXML to the browser and stop.
d135 1
a135 1
      <informalexample>
d140 1
a140 1
                  (a (@@ (href "http://www.w3.org")) "w3c"))))
a152 18
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;sxml&gt;</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xhtml/finish</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-xhtml/finish</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
d160 3
a162 4
              Like <function>send-html/back</function> and
              <function>send-html/back</function>, these procedures
              send the provided SXML to the browser and stop, but
              clear the continuation table first.
d169 2
a170 2
    <section id="send-xml">
      <title>XML Core Procedures</title>
d173 2
a174 9
        &requires;
        <emphasis role="bold">
          (import <emphasis>siscweb/xml</emphasis>)
        </emphasis>
        <sbr/>
        &locatedin;
        <emphasis role="bold">
          siscweb-sxml.jar
        </emphasis>
a175 1

d177 6
a182 7
        This module provides functions to send XML responses with the
        same features as those in the HTML and XHTML modules. This
        enables clients to conduct a stateful conversation with the
        server. The same features available through the extended
        (X)HTML can be reproduced in any XML element by using the
        <function>store/forward!</function> procedure described in
        <xref linkend="forward"/>.
a184 87
      <blockquote>
        <para>
          <indexterm>
            <primary>send-xml/suspend</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>request</type>
            <methodname>send-xml/suspend</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>(lambda (k-url) &lt;sxml&gt;)</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xml/forward</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>request</type>
            <methodname>send-xml/forward</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>(lambda (k-url) &lt;sxml&gt;)</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xml/back</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-xml/back</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;sxml&gt;</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xml/finish</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-xml/finish</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;sxml&gt;</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              These functions are analogous to the ones in the HTML and XHTML modules.
            </para>
          </blockquote>
        </para>
      </blockquote>
    </section>

    <section id="sxml">
      <title>Extended SXML</title>
      <para>
        SISCweb's <function>send-*/*</function> procedures accept a slightly
        extended version of the SXML syntax.
      </para>

      <warning>
        <para>
          The <function>send-html/*</function> procedures transform
          symbols in the markup into entities. This usage is now
          deprecated, and the form <function>(&amp; name)</function>
          should be used instead for HTML, XHTML and XML.
        </para>
      </warning>

d187 5
a191 7
          <![CDATA[
            (send-html/back
              `(html
                (body
                 (p "Can't" (& nbsp) "wrap" (& nbsp) "me.")
                 (p "Nor" (& |#160|) "me."))))
          ]]>
d205 1
a205 1
               (table (@@ (width 42))
d212 1
a212 1
        ignored. This comes handy when generating dynamic content.
d232 3
a234 5
          <![CDATA[
            (send-html/back
              `(*VERBATIM*
                "<html><body><p>Hello, &quot;world&quot;</p></body></html>))
          ]]>
d238 1
d240 3
a242 2
        The elements *DTD-INFO* and *DTD-INFO/PUBLIC* can be used to
        generate DTD declarations.
a244 27
      <informalexample>
        <programlisting>
          <![CDATA[
            (send-xhtml/back
             `(*TOP*
               (*DTD-INFO/PUBLIC* "html"
                                  "-//W3C//DTD XHTML 1.0 Strict//EN"
                                  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
               (html (@@ (xmlns "http://www.w3.org/1999/xhtml")
                        (xml:lang "en") (lang "en"))
                (head
                 (title "Hello"))
                (body
                 (p "Hello")))))
          ]]>
        </programlisting>
      </informalexample>
    </section>

    <section id="ehtml">
      <title>Extended HTML markup</title>

      <para>
        The HTML and XHTML modules support a number of extra
        attributes to support continuation-centric programming and
        interaction with the J2EE environment.
      </para>
d252 1
a252 1
          <literal>`(a (@@ (bindings ((name value) ...)) [(anchor name)]...) ...)</literal>
d255 1
a255 1
          <literal>`(form (@@ (bindings ((name value) ...)) [(anchor name)] ...) ...)</literal>
d258 1
a258 1
          <literal>`(iframe (@@ (bindings ((name value) ...)) [(anchor name)] ...) ...)</literal>
d267 1
a267 1
          <literal>`(object (@@ (bindings ((name value) ...)) [(anchor name)] ...) ...)</literal>
d273 3
a275 3
              This syntax is only usable from the
              <function>*/suspend</function> and
              <function>*/forward</function> procedures. It will produce
d285 12
d298 3
a300 2
              The optional <parameter>anchor</parameter> attribute allowed by some
              of the elements is made part of the generated URL.
d304 9
d330 1
a330 1
          <literal>`(a (@@ (href-p ,proc) [(bindings ,bindings)] [(anchor name)] ...) ...)</literal>
d333 1
a333 1
          <literal>`(form (@@ (action-p ,proc) [(bindings ,bindings)] [(anchor name)] ...) ...)</literal>
d336 1
a336 1
          <literal>`(iframe (@@ (src-p ,proc) [(bindings ,bindings)] [(anchor name)] ...) ...)</literal>
d345 1
a345 1
          <literal>`(object (@@ (data-p ,proc) [(bindings ,bindings)] [(anchor name) ...) ...)</literal>
d351 5
a355 4
              These attributes produce links that invoke the given
              procedure <parameter>proc</parameter> when followed. The
              HTTP request object will be passed as the only parameter
              to the procedure, and will contain the specified
a363 4
            <para>
              The optional <parameter>anchor</parameter> attribute allowed by some
              of the elements is made part of the generated URL.
            </para>
d404 5
a408 4
              These attributes allow specifying URLs relative to the
              context in which the &SISCweb; application is
              running. They are useful to reference plain HTML files
              or JSPs that co-exist in the same context. If any
a412 5
            <para>
              The <parameter>anchor</parameter> attribute is not
              allowed, as it can be directly specified in the
              <attribute>c-url</attribute>.
            </para>
d453 1
a453 1
              These attributes encode the given
a459 5
            <para>
              The <parameter>anchor</parameter> attribute is not
              allowed, as it can be directly specified in the
              <attribute>c-url</attribute>.
            </para>
d499 1
a499 1
                linkend="ehtml"/>.
d543 1
d606 1
a606 1
            either a &lt;bindings&gt; object or an a-list as
d636 2
a637 2
            clears the continuation table first. This will prevent the
            client from using the back button and resume the program
d749 1
a749 1
            through the <function>send-forward/*</function> functions,
d751 2
a752 2
            such, and can thus be used to implement the same style of
            page navigation afforded by the tags
d756 5
a760 3
            in the extended (X)HTML described in <xref
            linkend="ehtml"/> Notably missing is the equivalent of the
            plain <function>@@bindings</function>.
d768 1
a768 1
    <title>Generating GraphViz Graphs</title>
@


1.3.2.2
log
@fixed graphviz section
@
text
@d1017 3
a1019 3
      <function>send-graphviz/*</function> functions, or by embedding
      the <parameter>@@type=&quot;graphviz&quot;</parameter> attribute
      in the (X)HTML <function>object</function> tag (see <xref linkend="ehtml"/>.)
d1102 1
a1102 1
            <methodname>send-graphviz/finish</methodname>
d1197 1
a1197 1
        SISCweb does not use code from the DotML project, but it
d1205 1
a1205 1
          The generated DOT code (which is the fed into GraphViz) is somewhat different.
@


1.3.2.3
log
@merged from rel-0-4-dev
@
text
@d5 3
a7 4
    &SISCweb; programs can generate HTTP responses of a variety of
    data types -- HTML/XML/XHTML represented in SXML notation, images
    --, or they can forward requests to standard JSPs/Servlet
    components.  Procedures to generate HTTP errors are also
a11 16
  <para>
    The procedures that produce HTTP responses are in the form
    <function>send-*/*</function>, with the first pattern indicating
    the type of response, and the latter determining whether or not to
    save the execution state, and whether or not to clear previously
    saved states.
  </para>
  <para>
    All the procedures accept an optional association list of HTTP
    response headers as the first, optional argument. The association
    list is in the form <parameter>((name value)
    ...)</parameter>. This can be used to override the default
    Content-Type, to set caching options, etc.
  </para>


d373 2
a374 3
        SISCweb's <function>send-[html/xhtml/xml]/*</function>
        procedures accept a slightly extended version of the SXML
        syntax.
d445 1
a445 2
        generate DTD declarations. For XML/XHTML only, the *PI*
        element should be used to generate the XML declaration.
a452 1
               (*PI* xml "version=\"1.0\"")
a981 179

    <blockquote>
      <para>
        <indexterm>
          <primary>forward/store!</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>k-url</type>
          <methodname>forward/store!</methodname>
          <methodparam>
            <parameter>proc</parameter>
          </methodparam>
          <methodparam choice="opt">
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            This procedure is similar to the first form of
            <function>forward/store!</function>, except that when
            <function>proc</function> is executed, it will run in the
            dynamic context present when
            <function>forward/dynenv/store!</function> is invoked.
          </para>
          <para>
            The main reason to use this procedure is that
            <function>proc</function> will see the same SRFI-39
            parameter bindings established at the time
            <function>forward/dynenv/store!</function> was called.
          </para>
        </blockquote>
      </para>
    </blockquote>
  </section>

  <section id="image">
    <title>Sending Images</title>

    <para>
      &requires;
      <emphasis role="bold">
        (import <emphasis>siscweb/image</emphasis>)
      </emphasis>
      <sbr/>
      &locatedin;
      <emphasis role="bold">
        siscweb.jar
      </emphasis>
    </para>

    <para>
      This module provides procedures to send images from
      <function>java.awt.image.RenderedImage</function> or files.
    </para>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-image/back</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-image/back</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>format</parameter>
          </methodparam>
          <methodparam>
            <parameter>java.awt.image.RenderedImage</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Sends the given image to the browser in the specified
            <parameter>format</parameter>.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-image/finish</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-image/finish</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>format</parameter>
          </methodparam>
          <methodparam>
            <parameter>java.awt.image.RenderedImage</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            This procedure behaves like
            <function>send-image/back</function>, except that it
            clears the continuation table. This will prevent the user
            from using the back button to resume the program flow from
            earlier points.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-image-file/back</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-image-file/back</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>format</parameter>
          </methodparam>
          <methodparam>
            <parameter>filename</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Sends the image contained in the specified
            <parameter>filename</parameter> to the browser in the
            specified <parameter>format</parameter>.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-image-file/finish</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-image-file/finish</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
          <methodparam>
            <parameter>format</parameter>
          </methodparam>
          <methodparam>
            <parameter>filename</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            This procedure behaves like
            <function>send-image-file/back</function>, except that it
            clears the continuation table. This will prevent the user
            from using the back button to resume the program flow from
            earlier points.
          </para>
        </blockquote>
      </para>
    </blockquote>
d1116 1
a1116 1
              This procedure behaves like
d1205 1
a1205 1
          The generated DOT code (which is then fed into GraphViz) is somewhat different.
@


1.3.4.1
log
@minor fixes
@
text
@d13 1
a13 1
    <title>Generating HTML</title>
d232 3
a234 5
          <![CDATA[
            (send-html/back
              `(*VERBATIM*
                "<html><body><p>Hello, &quot;world&quot;</p></body></html>))
          ]]>
d768 1
a768 1
    <title>Generating GraphViz Graphs</title>
@


1.3.4.2
log
@added sxml, xml, xhtml sections; modified prose to fit
@
text
@d9 1
a9 1
    basic set of response procedures.
d12 2
a13 2
  <section id="markup">
    <title>Generating Markup</title>
a20 8
      <emphasis role="bold">
        (import <emphasis>siscweb/xhtml</emphasis>)
      </emphasis>
      <sbr/>
      <emphasis role="bold">
        (import <emphasis>siscweb/xml</emphasis>)
      </emphasis>
      <sbr/>
d28 4
a31 4
      These modules provide simple procedures to produce XML
      responses.  Documents are represented in the SXML syntax, and in
      the case of HTML and XHTML, include a few special elements and
      attributes to assist with continuation-based programming.
a33 20
    <note>
      <para>
        The XHTML and HTML modules serialize SXML differently, with
        the former producing pure XML, and the latter producing markup
        tweaked to display properly in known browsers. When producing
        XHTML for common user agents, it is advisable to keep the
        <link url="http://www.w3.org/TR/xhtml1/#guidelines">HTML
        Compatibility Guidelines</link> in mind.
      </para>

      <para>
        Also, while the XHTML module implements the complete SXML
        specification, the HTML module is more limited in that only
        DTD declarations, *VERBATIM* and *COMMENT* are understood
        besides the basic element+attribute syntax. Also, while the
        XHTML module considers the *TOP* element functional, the HTML
        module silently ignores it.
      </para>
    </note>

d35 1
a35 1
      <title>(X)HTML Core Procedures</title>
d38 4
a41 8
        The core procedures to send (X)HTML content follow the basic
        send-html/* and send-xhtml/* patterns. They differ in whether
        or not they clear the continuation table, and whether or not
        they return after the user interacts with the page.
      </para>
      <para>
        All the procedures accept an optional association list of
        response headers.
a52 18
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>(lambda (k-url) &lt;sxml&gt;)</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xhtml/suspend</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>request</type>
            <methodname>send-xhtml/suspend</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
d60 2
a61 2
              Sends the given SXML to the browser in the form of
              (X)HTML and suspends the execution flow. The
d64 1
a64 1
              forms and links as needed. When the browser submits a
d66 2
a67 1
              request will become the return value of the procedure.
a95 18
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>(lambda (k-url) &lt;sxml&gt;)</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xhtml/forward</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>request</type>
            <methodname>send-xhtml/forward</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
a100 1

d103 3
a105 4
              These procedures behave like
              <function>send-html/suspend</function> and
              <function>send-xhtml/suspend</function>, except that they
              clear the continuation table first. This will make it
a121 18
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;sxml&gt;</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xhtml/back</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-xhtml/back</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
d129 1
a129 1
              These procedures send the provided SXML to the browser and stop.
d135 1
a135 1
      <informalexample>
d140 1
a140 1
                  (a (@@ (href "http://www.w3.org")) "w3c"))))
a152 18
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;sxml&gt;</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xhtml/finish</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-xhtml/finish</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
d160 3
a162 4
              Like <function>send-html/back</function> and
              <function>send-html/back</function>, these procedures
              send the provided SXML to the browser and stop, but
              clear the continuation table first.
d169 2
a170 14
    <section id="send-xml">
      <title>XML Core Procedures</title>

      <para>
        &requires;
        <emphasis role="bold">
          (import <emphasis>siscweb/xml</emphasis>)
        </emphasis>
        <sbr/>
        &locatedin;
        <emphasis role="bold">
          siscweb-sxml.jar
        </emphasis>
      </para>
d173 2
a174 7
        This module provides functions to send XML responses. The same
        functions as for the HTML and XHTML modules are provided,
        which enables clients to conduct a stateful conversation with
        the server. The same features available through (X)HTML
        attributes can be reproduced in any element using the
        <function>store/forward!</function> procedure described in
        <xref linkend="forward"/>.
a175 74

      <blockquote>
        <para>
          <indexterm>
            <primary>send-xml/suspend</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>request</type>
            <methodname>send-xml/suspend</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>(lambda (k-url) &lt;sxml&gt;)</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xml/forward</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>request</type>
            <methodname>send-xml/forward</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>(lambda (k-url) &lt;sxml&gt;)</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xml/back</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-xml/back</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;sxml&gt;</parameter>
            </methodparam>
          </methodsynopsis>
          <sbr/>
          <indexterm>
            <primary>send-xml/finish</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-xml/finish</methodname>
            <methodparam choice="opt">
              <parameter>header-alist</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;sxml&gt;</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              These functions are analogous to the ones in the HTML and XHTML modules.
            </para>
          </blockquote>
        </para>
      </blockquote>
    </section>

    <section id="sxml">
      <title>Extended SXML</title>
d177 6
a182 2
        SISCweb's <function>send-*/*</function> procedures accept a slightly
        extended version of the SXML syntax.
a184 9
      <warning>
        <para>
          The <function>send-html/*</function> procedures transform
          symbols in the markup into entities. This usage is now
          deprecated, and the form <function>(&amp; name)</function>
          should be used instead for HTML, XHTML and XML.
        </para>
      </warning>

d187 5
a191 7
          <![CDATA[
            (send-html/back
              `(html
                (body
                 (p "Can't" (& nbsp) "wrap" (& nbsp) "me.")
                 (p "Nor" (& |#160|) "me."))))
          ]]>
d205 1
a205 1
               (table (@@ (width 42))
d212 1
a212 1
        ignored. This comes handy when generating dynamic content.
d240 1
d242 3
a244 2
        The elements *DTD-INFO* and *DTD-INFO/PUBLIC* can be used to
        generate DTD declarations.
a246 27
      <informalexample>
        <programlisting>
          <![CDATA[
            (send-xhtml/back
             `(*TOP*
               (*DTD-INFO/PUBLIC* "html"
                                  "-//W3C//DTD XHTML 1.0 Strict//EN"
                                  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
               (html (@@ (xmlns "http://www.w3.org/1999/xhtml")
                        (xml:lang "en") (lang "en"))
                (head
                 (title "Hello"))
                (body
                 (p "Hello")))))
          ]]>
        </programlisting>
      </informalexample>
    </section>

    <section id="html-markup">
      <title>Extended HTML markup</title>

      <para>
        A number of extra attributes are defined for HTML and XHTML in
        order to facilitate continuation-centric programming and
        interaction with the J2EE environment.
      </para>
d254 1
a254 1
          <literal>`(a (@@ (bindings ((name value) ...)) [(anchor name)]...) ...)</literal>
d257 1
a257 1
          <literal>`(form (@@ (bindings ((name value) ...)) [(anchor name)] ...) ...)</literal>
d260 1
a260 1
          <literal>`(iframe (@@ (bindings ((name value) ...)) [(anchor name)] ...) ...)</literal>
d269 1
a269 1
          <literal>`(object (@@ (bindings ((name value) ...)) [(anchor name)] ...) ...)</literal>
d275 3
a277 3
              This syntax is only usable from the
              <function>suspend</function> and
              <function>forward</function> procedures. It will produce
d287 12
d300 3
a302 2
              The optional <parameter>anchor</parameter> attribute allowed by some
              of the elements is made part of the generate URL.
d306 9
d332 1
a332 1
          <literal>`(a (@@ (href-p ,proc) [(bindings ,bindings)] [(anchor name)] ...) ...)</literal>
d335 1
a335 1
          <literal>`(form (@@ (action-p ,proc) [(bindings ,bindings)] [(anchor name)] ...) ...)</literal>
d338 1
a338 1
          <literal>`(iframe (@@ (src-p ,proc) [(bindings ,bindings)] [(anchor name)] ...) ...)</literal>
d347 1
a347 1
          <literal>`(object (@@ (data-p ,proc) [(bindings ,bindings)] [(anchor name) ...) ...)</literal>
a365 4
            <para>
              The optional <parameter>anchor</parameter> attribute allowed by some
              of the elements is made part of the generate URL.
            </para>
d406 5
a410 4
              These attributes allow specifying URLs relative to the
              context in which the &SISCweb; application is
              running. They are useful to reference plain HTML files
              or JSPs that co-exist in the same context. If any
a414 5
            <para>
              The <parameter>anchor</parameter> attribute is not
              allowed, as it can be directly specified in the
              <attribute>c-url</attribute>.
            </para>
d455 1
a455 1
              These attributes encode the given
a461 5
            <para>
              The <parameter>anchor</parameter> attribute is not
              allowed, as it can be directly specified in the
              <attribute>c-url</attribute>.
            </para>
d545 1
@


1.3.4.3
log
@some content reorg; clearer sentences
@
text
@d16 17
a32 5
      &SISCweb; provides a number of modules with an uniform API to
      produce HTML, XHTML and XML markup. Their procedures accept
      documents in SXML syntax, and in the case of HTML and XHTML, a
      few extra elements and attributes are used to assist with
      continuation-based programming (see <xref linkend="ehtml"/>.)
d35 6
a40 2
    <section id="send-html">
      <title>(X)HTML Core Procedures</title>
d42 1
d44 6
a49 14
        &requires;
        <emphasis role="bold">
          (import <emphasis>siscweb/html</emphasis>)
        </emphasis>
        <sbr/>
        &requires;
        <emphasis role="bold">
          (import <emphasis>siscweb/xhtml</emphasis>)
        </emphasis>
        <sbr/>
        &locatedin;
        <emphasis role="bold">
          siscweb-sxml.jar
        </emphasis>
d53 6
a58 5
        The core procedures to send (X)HTML content follow the basic
        <function>send-html/*</function> and
        <function>send-xhtml/*</function> patterns. They differ in
        whether or not they clear the continuation table, and whether
        or not they return after the user interacts with the page.
d60 1
d62 2
a63 10
      <note>
        <para>
          The XHTML and HTML modules serialize SXML differently, with
          the former producing pure XML, and the latter producing
          markup tweaked to display properly in known browsers. When
          producing XHTML for common user agents, it is advisable to
          keep the <link
          url="http://www.w3.org/TR/xhtml1/#guidelines">HTML
          Compatibility Guidelines</link> in mind.
        </para>
d65 10
a74 11
        <para>
          Also, while the XHTML module implements the complete SXML
          specification, the HTML module is more limited in that only
          understands DTD declarations,
          <function>*VERBATIM*</function> and
          <function>*COMMENT*</function> elements besides the basic
          element+attribute syntax. Also, while the XHTML module
          considers the <function>*TOP*</function> element functional,
          the HTML module silently ignores it.
        </para>
      </note>
d113 4
a116 5
              resume the program's execution, and should therefore be
              used in forms and links as needed. When the browser
              submits a request to the <parameter>k-url</parameter>,
              said request will become the return value of the
              procedure.
d173 4
a176 4
              <function>send-xhtml/suspend</function>, except that
              they clear the continuation table first. This will
              prevent the client from using the back button to resume
              the program flow from earlier points.
d291 5
a295 5
        This module provides functions to send XML responses with the
        same features as those in the HTML and XHTML modules. This
        enables clients to conduct a stateful conversation with the
        server. The same features available through the extended
        (X)HTML can be reproduced in any XML element by using the
d468 1
a468 1
    <section id="ehtml">
d472 2
a473 2
        The HTML and XHTML modules support a number of extra
        attributes to support continuation-centric programming and
d505 2
a506 2
              <function>*/suspend</function> and
              <function>*/forward</function> procedures. It will produce
d518 1
a518 1
              of the elements is made part of the generated URL.
d560 5
a564 4
              These attributes produce links that invoke the given
              procedure <parameter>proc</parameter> when followed. The
              HTTP request object will be passed as the only parameter
              to the procedure, and will contain the specified
d575 1
a575 1
              of the elements is made part of the generated URL.
d721 1
a721 1
                linkend="ehtml"/>.
d827 1
a827 1
            either a &lt;bindings&gt; object or an a-list as
d857 2
a858 2
            clears the continuation table first. This will prevent the
            client from using the back button and resume the program
d970 1
a970 1
            through the <function>send-forward/*</function> functions,
d972 2
a973 2
            such, and can thus be used to implement the same style of
            page navigation afforded by the tags
d977 5
a981 3
            in the extended (X)HTML described in <xref
            linkend="ehtml"/> Notably missing is the equivalent of the
            plain <function>@@bindings</function>.
@


1.3.4.4
log
@fixed graphviz typos and references
@
text
@d1017 3
a1019 3
      <function>send-graphviz/*</function> functions, or by embedding
      the <parameter>@@type=&quot;graphviz&quot;</parameter> attribute
      in the (X)HTML <function>object</function> tag (see <xref linkend="ehtml"/>.)
d1102 1
a1102 1
            <methodname>send-graphviz/finish</methodname>
d1197 1
a1197 1
        SISCweb does not use code from the DotML project, but it
d1205 1
a1205 1
          The generated DOT code (which is the fed into GraphViz) is somewhat different.
@


1.3.4.5
log
@added docs for siscweb/image module; minor fixes
@
text
@d445 1
a445 2
        generate DTD declarations. For XML/XHTML only, the *PI*
        element should be used to generate the XML declaration.
a452 1
               (*PI* xml "version=\"1.0\"")
a983 132
  <section id="image">
    <title>Sending Images</title>

    <para>
      &requires;
      <emphasis role="bold">
        (import <emphasis>siscweb/image</emphasis>)
      </emphasis>
      <sbr/>
      &locatedin;
      <emphasis role="bold">
        siscweb.jar
      </emphasis>
    </para>

    <para>
      This module provides procedures to send images from
      <function>java.awt.image.RenderedImage</function> or files.
    </para>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-image/back</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-image/back</methodname>
          <methodparam>
            <parameter>format</parameter>
          </methodparam>
          <methodparam>
            <parameter>java.awt.image.RenderedImage</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Sends the given image to the browser in the specified
            <parameter>format</parameter>.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-image/finish</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-image/finish</methodname>
          <methodparam>
            <parameter>format</parameter>
          </methodparam>
          <methodparam>
            <parameter>java.awt.image.RenderedImage</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            This procedure behaves like
            <function>send-image/back</function>, except that it
            clears the continuation table. This will prevent the user
            from using the back button to resume the program flow from
            earlier points.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-image-file/back</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-image-file/back</methodname>
          <methodparam>
            <parameter>format</parameter>
          </methodparam>
          <methodparam>
            <parameter>filename</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Sends the image contained in the specified
            <parameter>filename</parameter> to the browser in the
            specified <parameter>format</parameter>.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-image/finish</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-image/finish</methodname>
          <methodparam>
            <parameter>format</parameter>
          </methodparam>
          <methodparam>
            <parameter>filename</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            This procedure behaves like
            <function>send-image/back</function>, except that it
            clears the continuation table. This will prevent the user
            from using the back button to resume the program flow from
            earlier points.
          </para>
        </blockquote>
      </para>
    </blockquote>
  </section>

d1116 1
a1116 1
              This procedure behaves like
@


1.3.4.6
log
@added forward/dynenv/store! description; minor fixes
@
text
@d373 2
a374 3
        SISCweb's <function>send-[html/xhtml/xml]/*</function>
        procedures accept a slightly extended version of the SXML
        syntax.
a983 35

    <blockquote>
      <para>
        <indexterm>
          <primary>forward/store!</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>k-url</type>
          <methodname>forward/store!</methodname>
          <methodparam>
            <parameter>proc</parameter>
          </methodparam>
          <methodparam choice="opt">
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            This procedure is similar to the first form of
            <function>forward/store!</function>, except that when
            <function>proc</function> is executed, it will run in the
            dynamic context present when
            <function>forward/dynenv/store!</function> is invoked.
          </para>
          <para>
            The main reason to use this procedure is that
            <function>proc</function> will see the same SRFI-39
            parameter bindings established at the time
            <function>forward/dynenv/store!</function> was called.
          </para>
        </blockquote>
      </para>
    </blockquote>
@


1.3.4.7
log
@intro paragraph; added header-alist to image procedures; minor fixes
@
text
@d5 3
a7 4
    &SISCweb; programs can generate HTTP responses of a variety of
    data types -- HTML/XML/XHTML represented in SXML notation, images
    --, or they can forward requests to standard JSPs/Servlet
    components.  Procedures to generate HTTP errors are also
a11 16
  <para>
    The procedures that produce HTTP responses are in the form
    <function>send-*/*</function>, with the first pattern indicating
    the type of response, and the latter determining whether or not to
    save the execution state, and whether or not to clear previously
    saved states.
  </para>
  <para>
    All the procedures accept an optional association list of HTTP
    response headers as the first, optional argument. The association
    list is in the form <parameter>((name value)
    ...)</parameter>. This can be used to override the default
    Content-Type, to set caching options, etc.
  </para>


a1050 3
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
a1076 3
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
a1105 3
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
d1127 1
a1127 1
          <primary>send-image-file/finish</primary>
d1132 1
a1132 4
          <methodname>send-image-file/finish</methodname>
          <methodparam choice="opt">
            <parameter>header-alist</parameter>
          </methodparam>
d1144 1
a1144 1
            <function>send-image-file/back</function>, except that it
@


1.3.4.8
log
@fixed typo
@
text
@d1404 1
a1404 1
          The generated DOT code (which is then fed into GraphViz) is somewhat different.
@


1.2
log
@merged from rel-0-2-dev
@
text
@d6 1
a6 1
    translating an SXML notation to HTML, or by dispatching to JSPs or
d20 5
d196 2
a197 2
        Numbers in attributes and text nodes are converted to strings
        automatically using pretty-print.
d202 1
a202 1
          (send-html
d210 15
d227 16
a242 3
        Additionally a number of extra attributes are defined in order to
        facilitate continuation-centric programming and interaction with the
        surrounding URL-centric environment.
d253 18
d304 9
d318 7
a324 1
            <primary>@@href-e</primary>
d327 1
a327 1
            <primary>@@action-e</primary>
d330 4
a333 1
          <literal>`(a (@@ (href-e ,url) ...)) ...) ...)</literal>
d336 1
a336 1
          <literal>`(link (@@ (href-e ,url) ...)) ...) ...)</literal>
d339 10
a348 1
          <literal>`(form (@@ (action-e ,url) ...)) ...) ...)</literal>
d351 12
a362 6
              These attributes will encode the given
              <parameter>url</parameter> as per the the Java
              <function>HttpServletResponse.encodeURL()</function>
              method. This is useful to support cookie-less
              interaction, as it will encode the session ID in the
              <parameter>url</parameter> as needed.
d371 6
d380 1
a380 1
            <primary>@@action-c</primary>
d383 13
a395 1
          <literal>`(a (@@ (href-c ,url) ...)) ...) ...)</literal>
d398 1
a398 1
          <literal>`(link (@@ (href-c ,url) ...)) ...) ...)</literal>
d401 1
a401 1
          <literal>`(form (@@ (action-c ,url) ...)) ...) ...)</literal>
d404 8
a411 4
              These attributes allow using <parameter>url</parameter>s
              relative to the context in which the &SISCweb; application
              is running. They are useful to reference plain HTML files
              or JSPs that co-exist in the same context.
d420 7
a426 1
            <primary>@@href-ce</primary>
d429 1
a429 1
            <primary>@@action-ce</primary>
d432 1
a432 1
          <literal>`(a (@@ (href-ce ,url) ...)) ...) ...)</literal>
d435 1
a435 1
          <literal>`(link (@@ (href-ce ,url) ...)) ...) ...)</literal>
d438 13
a450 1
          <literal>`(form (@@ (action-ce ,url) ...)) ...) ...)</literal>
d453 6
a458 5
              These attributes combine the above described
              <function>*-c</function> and
              <function>*-e</function> attributes in one. The order
              of the letters in the suffix is, and in case of
              additions will always be, alphabetical.
d464 76
d544 2
a545 2
  <section id="dispatch">
    <title>Dispatching</title>
d552 5
d561 15
a575 2
      convenient to generate content using traditional techniques
      such as JSPs and servlets rather than SXML.
d578 4
a581 9
    <note>
      <para>
        Not all capabilities afforded by the
        <function>send-html/*</function> functions and SXML are
        currently made available to the dispatch mechanism -- namely
        binding and dispatch anchors. These will be added in a later
        version.
      </para>
    </note>
d606 4
a609 5
            either a bindings object or list as specified in <xref
            linkend="bindings"/>; the bindings will be set in the
            attributes of the forwarded request.  Additionally, the
            continuation URL will be set in the request parameter
            <parameter>siscweb.kURL</parameter>.
d652 1
a652 1
          <methodname>send-forward/suspend</methodname>
d697 312
d1011 1
d1020 5
d1054 1
a1054 1
            Sends the specified error <parameter>code</parameter>
@


1.2.2.1
log
@merged from rel-0-3-dev
@
text
@d169 1
a169 2
        slightly extended version of the HTML markup language. We will
        refer to this version as eshtml (extended sxml-based html).
a204 15
      <para>
        The value &f; as an element or attribute value is
        ignored. This is handy when generating dynamic content.
      </para>

      <informalexample>
        <programlisting>
          ;; equivalent to (html (body (p)))
          (send-html
            `(html
              (body
               (p (@@ (align #f))
                #f))))
        </programlisting>
      </informalexample>
d207 1
a207 1
        Additionally, a number of extra attributes are defined in order to
a252 9

        <note>
          <para>
            The <function>dispatch</function> attribute will be
            deprecated in release 0.3 in favor of the
            <function>[action|data|href|src]-p</function> attributes
            described below.
          </para>
        </note>
d258 1
a258 10
            <primary>@@action-p</primary>
          </indexterm>
          <indexterm>
            <primary>@@data-p</primary>
          </indexterm>
          <indexterm>
            <primary>@@href-p</primary>
          </indexterm>
          <indexterm>
            <primary>@@src-p</primary>
a259 32
          &sxml-attribute;
          <literal>`(a (@@ (href-p ,proc) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(form (@@ (action-p ,proc) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(iframe (@@ (src-p ,proc) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(img (@@ (src-p ,proc) ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(link (@@ (href-p ,proc) ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(object (@@ (data-p ,proc) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(script (@@ (src-p ,proc) ...) ...)</literal>
          <blockquote>
            <para>
              These attributes produce links that, when followed,
              invoke the given procedure. The HTTP request object will be
              passed as the only parameter to the procedure.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <blockquote>
        <para>
a262 9
          <indexterm>
            <primary>@@data-e</primary>
          </indexterm>
          <indexterm>
            <primary>@@href-e</primary>
          </indexterm>
          <indexterm>
            <primary>@@src-e</primary>
          </indexterm>
d264 1
a264 1
          <literal>`(a (@@ (href-e ,url) ...) ...)</literal>
d267 1
a267 1
          <literal>`(form (@@ (action-e ,url) ...) ...)</literal>
d270 1
a270 13
          <literal>`(iframe (@@ (src-e ,url) ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(img (@@ (src-e ,url) ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(link (@@ (href-e ,url) ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(object (@@ (data-e ,url) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(script (@@ (src-e ,url) ...) ...)</literal>
a286 6
            <primary>@@action-c</primary>
          </indexterm>
          <indexterm>
            <primary>@@data-c</primary>
          </indexterm>
          <indexterm>
d290 1
a290 1
            <primary>@@src-c</primary>
d293 1
a293 1
          <literal>`(a (@@ (href-c ,url) ...) ...)</literal>
d296 1
a296 1
          <literal>`(form (@@ (action-c ,url) ...) ...)</literal>
d299 1
a299 13
          <literal>`(iframe (@@ (src-c ,url) ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(img (@@ (src-c ,url) ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(link (@@ (href-c ,url) ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(object (@@ (data-c ,url) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(script (@@ (src-c ,url) ...) ...)</literal>
a313 6
            <primary>@@action-ce</primary>
          </indexterm>
          <indexterm>
            <primary>@@data-ce</primary>
          </indexterm>
          <indexterm>
d317 1
a317 1
            <primary>@@src-ce</primary>
d320 1
a320 7
          <literal>`(a (@@ (href-ce ,url) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(form (@@ (action-ce ,url) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(iframe (@@ (src-ce ,url) ...))</literal>
d323 1
a323 1
          <literal>`(img (@@ (src-ce ,url) ...))</literal>
d326 1
a326 7
          <literal>`(link (@@ (href-ce ,url) ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(object (@@ (data-ce ,url) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(script (@@ (src-ce ,url) ...) ...)</literal>
a338 75
      <blockquote>
        <para>
          <indexterm>
            <primary>@@type "graphviz"</primary>
          </indexterm>
          &sxml-attribute;
          <literal>`(object (@@ (type "graphviz") (layout ,layout) (format ,format) ...)
          (graph (@@ (id ,id) ...))</literal>
          <blockquote>
            <para>
              If the attribute <parameter>type "graphviz"</parameter>
              is specified for the <function>object</function>
              element, a Graphviz graph will be embedded in the
              document.
            </para>
            <para>
              The <parameter>layout</parameter> and
              <parameter>format</parameter> attributes are analogous
              to the omonymous parameters to the
              <function>send-graphviz/*</function> functions (see
              <xref linkend="send-graphviz"/>.) However, the value of
              <parameter>format</parameter> determines how the content
              is included:
            </para>

            <itemizedlist>
              <listitem>
                <parameter>gif, jpg, png</parameter>: The graph is
                embedded as an <function>img</function> tag, and a
                corresponding image map is generated. Links associated
                to nodes, edges and records will be mapped
                appropriately. Just as for other document elements,
                the <parameter>href[-[p|c|e|ce]]</parameter>
                attributes are available, and behave as described
                above.
              </listitem>
              <listitem>
                <parameter>ps, svg, etc.</parameter>: The graph is
                embedded as an <function>object</function> tag. The
                appropriate mime type is automatically set, and needs
                not be specified explicitely.
              </listitem>
            </itemizedlist>

            <para>
              In both cases, any attribute specified for the
              <function>object</function> tag will be applied toward
              the generated <function>object</function> or
              <function>img</function> tag.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <informalexample>
        <programlisting>
          (send-html/suspend
           (lambda (k-url)
            `(html
              (head
               (title "Embedded Graphviz")
              (body
              (h3 "Embedded Graphviz")

              (object (@@ (type "graphviz")
                         (layout dot) (format png))
                (graph (@@ (id "G"))
                  (node (@@ (id "c") (label "scissors") (href "http://www.google.com/search?q=scissors")))
                  (node (@@ (id "p") (label "paper") (href "http://www.google.com/search?q=paper")))
                  (node (@@ (id "s") (label "stone") (href "http://www.google.com/search?q=stone")))
                  (edge (@@ (from "c") (to "p") (label "cut") (href-p ,cut)))
                  (edge (@@ (from "p") (to "s") (label "wraps") (href-c "/")))
                  (edge (@@ (from "s") (to "c") (label "breaks") (href-e ,k-url))))))))))
        </programlisting>
      </informalexample>
a485 240
  <section id="graphviz">
    <title>Sending GraphViz graphs</title>

    <para>
      &requires;
      <emphasis role="bold">
        (import <emphasis>siscweb/graphviz</emphasis>)
      </emphasis>
    </para>

    <para>
      This module provides procedures to send graphs in various
      formats as generated by Graphviz (<ulink
      url="http://www.graphviz.org"/>). Most of the functions accept a
      markup representation of DOT, the GraphViz language, in the form
      of DotML (see <xref linkend="dotml"/>.)
    </para>

    <para>
      The GraphViz programs (dot, neato, etc.) should be installed
      somewhere in the system path. This is usually the case in
      UNIX. Alternatively, it is possible to set the absolute paths to
      the GraphViz programs by using the
      <function>graphiz/put-layout-command!</function> function.
    </para>

    <para>
      Graphs can be generated either using the
      <function>send-graphviz/*</function> functions, or by embedding the
      <function>graphviz</function> tag in the markup sent to the
      <function>send-html/*</function> functions.
    </para>

    <section id="send-graphviz">
      <title>Graphviz Procedures</title>

      <para>
        Both <function>send-graphviz/*</function> procedures accept
        the same three parameters:
      </para>
      <itemizedlist>
        <listitem>
          <parameter>layout</parameter>: This is a string specifying
          which Graphviz layout engine to use. The current choices are
          dot, neato, twopi, circo, and fdp.
        </listitem>
        <listitem>
          <parameter>format</parameter>: This is a string specifying
          the output format. The most useful choices currently are
          gif, jpg, 'png, 'ps, and 'svg.
        </listitem>
        <listitem>
          <parameter>&lt;dotml&gt;</parameter>: This is an sxml
          representation of the DotML language. See <xref
          linkend="dotml"/>.
        </listitem>
      </itemizedlist>

      <blockquote>
        <para>
          <indexterm>
            <primary>send-graphviz/back</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-graphviz/back</methodname>
            <methodparam>
              <parameter>layout</parameter>
            </methodparam>
            <methodparam>
              <parameter>format</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;dotml&gt;</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              Sends the given <parameter>dotml</parameter> graph in
              the specified <parameter>format</parameter> to the
              browser after laying the graph out using the indicated
              <parameter>layout</parameter> engine.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <informalexample>
        <programlisting>
          <![CDATA[
          (send-graphviz
            'dot 'png
            `(graph (@@ (id "G"))
              (node (@@ (id "c") (label "scissors")))
              (node (@@ (id "p") (label "paper")))
              (node (@@ (id "s") (label "stone")))
              (edge (@@ (from "c") (to "p") (label "cut")))
              (edge (@@ (from "p") (to "s") (label "wraps")))
              (edge (@@ (from "s") (to "c") (label "breaks")))))
          ]]>
        </programlisting>
      </informalexample>

      <blockquote>
        <para>
          <indexterm>
            <primary>send-graphviz/finish</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-graphviz/back</methodname>
            <methodparam>
              <parameter>layout</parameter>
            </methodparam>
            <methodparam>
              <parameter>format</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;dotml&gt;</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              This function behaves like
              <function>send-graphviz/back</function>, except that it
              clears the continuation table. This will prevent the
              user from using the back button to resume the program
              flow from earlier points.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <blockquote>
        <para>
          <indexterm>
            <primary>graphviz/put-layout-command!</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>undefined</type>
            <methodname>graphviz/put-layout-command!</methodname>
            <methodparam>
              <parameter>layout</parameter>
              <parameter>command</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              Associates a given <parameter>layout</parameter> to the
              specified <parameter>command</parameter>.  This function
              can be used to add Graphviz layout engines, or to
              specify absolute paths for existing engines. The latter
              is likely to be an issue in Windows.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <informalexample>
        <programlisting>
          <![CDATA[
          (graphviz/put-layout-command "dot" "d:/bin/dot.exe")
          ]]>
        </programlisting>
      </informalexample>

      <blockquote>
        <para>
          <indexterm>
            <primary>graphviz/get-layout-command</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>command/&f;</type>
            <methodname>graphviz/get-layout-command</methodname>
            <methodparam>
              <parameter>layout</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              Retrieves the <parameter>command</parameter> associated
              to the given <parameter>layout</parameter>, or &f; if no
              association is present.
            </para>
          </blockquote>
        </para>
      </blockquote>
    </section>

    <section id="dotml">
      <title>DotML</title>

      <para>
        The <function>send-graphviz/*</function> procedures accept a
        graph description expressed in DotML. DotML was created by
        Martin Loetzsch, and an exhaustive description rich with
        excellent examples is at <ulink
        url="http://www.martin-loetzsch.de/DOTML"/>.
      </para>
      <para>
        SISCweb does not use code from the DotML project, but
        implements the same markup syntax in sxml form. There are a
        few differences between SISCweb's implementation and the
        original:
      </para>

      <itemizedlist>
        <listitem>
          The generated DOT code (which is fed into Graphviz) is somewhat different.
        </listitem>
        <listitem>
          The <function>graph</function>,
          <function>sub-graph</function>, <function>cluster</function>
          and <function>node</function> elements must always specify
          an <parameter>id</parameter> attribute.
        </listitem>
        <listitem>
          The <parameter>id</parameter> attribute values at the moment
          are limited to strings of alphanumeric characters and
          underscore.
        </listitem>
        <listitem>
          The enclosing <function>record</function> elements must
          specify an <parameter>id</parameter> attribute, but nested
          <function>record</function> and <function>node</function>
          elements do not have to.
        </listitem>
      </itemizedlist>
    </section>
  </section>


d523 1
a523 1
            Sends the specified HTTP error <parameter>code</parameter>
@


1.2.2.2
log
@merged from rel-0-3-dev
@
text
@a235 18
          <sbr/>
          &sxml-attribute;
          <literal>`(form (@@ (bindings ((name value) ...)) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(iframe (@@ (bindings ((name value) ...)) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(img (@@ (bindings ((name value) ...)) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(link (@@ (bindings ((name value) ...)) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(object (@@ (bindings ((name value) ...)) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(script (@@ (bindings ((name value) ...)) ...) ...)</literal>
d295 1
a295 1
          <literal>`(a (@@ (href-p ,proc) [(bindings ,bindings)] ...) ...)</literal>
d298 1
a298 1
          <literal>`(form (@@ (action-p ,proc) [(bindings ,bindings)] ...) ...)</literal>
d301 1
a301 1
          <literal>`(iframe (@@ (src-p ,proc) [(bindings ,bindings)] ...) ...)</literal>
d304 1
a304 1
          <literal>`(img (@@ (src-p ,proc) [(bindings ,bindings)] ...))</literal>
d307 1
a307 1
          <literal>`(link (@@ (href-p ,proc) [(bindings ,bindings)] ...))</literal>
d310 1
a310 1
          <literal>`(object (@@ (data-p ,proc) [(bindings ,bindings)] ...) ...)</literal>
d313 1
a313 1
          <literal>`(script (@@ (src-p ,proc) [(bindings ,bindings)] ...) ...)</literal>
d317 2
a318 11
              invoke the given procedure
              <parameter>proc</parameter>. The HTTP request object
              will be passed as the only parameter to the procedure,
              and will contain the specified
              <parameter>bindings</parameter>, if any.
            </para>
            <para>
              In the case of <function>@@action-p</function>, the form
              field values and the specified
              <parameter>bindings</parameter> will be merged, with the
              latter taking precedence over the former.
d327 1
a327 1
            <primary>@@action-c</primary>
d330 1
a330 1
            <primary>@@data-c</primary>
d333 1
a333 1
            <primary>@@href-c</primary>
d336 1
a336 1
            <primary>@@src-c</primary>
d339 1
a339 1
          <literal>`(a (@@ (href-c ,c-url) [(bindings ,bindings)] ...) ...)</literal>
d342 1
a342 1
          <literal>`(form (@@ (action-c ,c-url) [(bindings ,bindings)] ...) ...)</literal>
d345 1
a345 1
          <literal>`(iframe (@@ (src-c ,c-url) [(bindings ,bindings)] ...))</literal>
d348 1
a348 1
          <literal>`(img (@@ (src-c ,c-url) [(bindings ,bindings)] ...))</literal>
d351 1
a351 1
          <literal>`(link (@@ (href-c ,c-url) [(bindings ,bindings)] ...))</literal>
d354 1
a354 1
          <literal>`(object (@@ (data-c ,c-url) [(bindings ,bindings)] ...) ...)</literal>
d357 1
a357 1
          <literal>`(script (@@ (src-c ,c-url) [(bindings ,bindings)] ...) ...)</literal>
d360 6
a365 8
              These attributes allow using
              <parameter>c-url</parameter>s relative to the context in
              which the &SISCweb; application is running. They are
              useful to reference plain HTML files or JSPs that
              co-exist in the same context. If any
              <parameter>bindings</parameter> are specified, they will
              be included in the request associated to the
              <parameter>c-url</parameter>.
d374 1
a374 1
            <primary>@@action-e</primary>
d377 1
a377 1
            <primary>@@data-e</primary>
d380 1
a380 1
            <primary>@@href-e</primary>
d383 1
a383 1
            <primary>@@src-e</primary>
d386 1
a386 1
          <literal>`(a (@@ (href-e ,url) ...) ...)</literal>
d389 1
a389 1
          <literal>`(form (@@ (action-e ,url) ...) ...)</literal>
d392 1
a392 1
          <literal>`(iframe (@@ (src-e ,url) ...))</literal>
d395 1
a395 1
          <literal>`(img (@@ (src-e ,url) ...))</literal>
d398 1
a398 1
          <literal>`(link (@@ (href-e ,url) ...))</literal>
d401 1
a401 1
          <literal>`(object (@@ (data-e ,url) ...) ...)</literal>
d404 1
a404 1
          <literal>`(script (@@ (src-e ,url) ...) ...)</literal>
d407 4
a410 6
              These attributes will encode the given
              <parameter>url</parameter> as per the the Java
              <function>HttpServletResponse.encodeURL()</function>
              method. This is useful to support cookie-less
              interaction, as it will encode the session ID in the
              <parameter>url</parameter> as needed.
d452 5
a456 6
              DEPRECATED.  These attributes were used to combine the
              above described <function>*-c</function> and
              <function>*-e</function> attributes in one, but
              <function>href-c</function> now encodes the url by
              default, making the <function>*-ce</function> attributes
              redundant.
d494 3
a496 4
                the <function>@@href[-[p|c|e]]</function> and
                <function>@@bindings</function> attributes are
                available, and behave as described in <xref
                linkend="html-markup"/>.
d557 10
d592 3
a594 4
            <parameter>siscweb.bindings</parameter> attributes of the
            forwarded request.  Additionally, the continuation URL
            will be set in the <parameter>siscweb.kURL</parameter>
            request attribute.
d637 1
a637 1
          <methodname>send-forward/back</methodname>
a681 66

    <blockquote>
      <para>
        <indexterm>
          <primary>forward/store!</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>k-url</type>
          <methodname>forward/store!</methodname>
          <methodparam>
            <parameter>proc</parameter>
          </methodparam>
          <methodparam choice="opt">
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>
        <sbr/>
        &procedure;
        <methodsynopsis language="scheme">
          <type>k-url</type>
          <methodname>forward/store!</methodname>
          <methodparam>
            <parameter>c-url</parameter>
          </methodparam>
          <methodparam choice="opt">
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            In the first form, stores a closure
            <parameter>proc</parameter> in the continuation table, and
            returns the url that will invoke it.  The
            <parameter>proc</parameter> procedure should accept a
            request object as its only argument.  If
            <parameter>bindings</parameter> are specified, either as
            an a-list or a &lt;bindings&gt; object,
            <procedure>proc</procedure> will see them as bindings in
            its request.
          </para>
          <para>
            In the second form <function>forward/store!</function>
            stores a closure that forwards the request to the given
            context-relative <parameter>c-url</parameter>, including
            any specified bindings, if any.
          </para>
          <para>
            This function is especially useful when passing bindings
            using the <function>send-forward/*</function> functions,
            as it allows to embed links to closures in JSPs and the
            such, and allows to implement the same style of page
            navigation afforded by the tags
            <function>@@*-c</function>+<function>@@bindings</function>
            and
            <function>@@*-c</function>+<function>@@bindings</function>
            in the sxml recognized by the
            <function>send-html/*</function> functions. Notably
            missing is the equivalent of the plain
            <function>@@bindings</function>, which is still
            unimplemented.
          </para>
        </blockquote>
      </para>
    </blockquote>
d697 1
a697 1
      url="http://www.graphviz.org">http://www.graphviz.org</ulink>). Most of the functions accept a
d923 1
@


1.2.2.3
log
@merged from rel-0-3-dev
@
text
@d6 1
a6 1
    translating an SXML notation to HTML, or by forwarding to JSPs or
d574 2
a575 2
  <section id="forward">
    <title>Forwarding Requests</title>
d586 2
a587 20
      convenient to generate content using traditional techniques such
      as JSPs and servlets rather than SXML.
    </para>

    <para>
      The <function>send-forward/*</function> procedures dispatch the
      request to the indicated context-relative URL. Bindings can be
      attached in the form of &lt;bindings&gt; objects or a-lists. The
      <function>forward/store!</function> function can also be used to
      pass URLs mapped to closures in the style of the
      <function>@@[action|data|href|src]-p</function> tags. Coupled
      with the URL corresponding to the current-continuation being set
      in the <parameter>siscweb.kURL</parameter> request attribute,
      this enables one to use SISCweb for control, and JSP/Servlets
      for presentation without losing too many features.
    </para>

    <para>
      See <xref linkend="bindings-java"/> for details on how to access
      bindings from Java.
d613 5
a617 3
            either a &quot;bindings&quot; object or an a-list as
            specified in <xref linkend="bindings"/>. The continuation
            URL will be set in the <parameter>siscweb.kURL</parameter>
a747 1

a753 1

a1012 1

@


1.2.4.1
log
@added src-[c|e|ce] attributes to img and script tags
@
text
@a262 3
          <indexterm>
            <primary>@@src-e</primary>
          </indexterm>
a270 6
          <sbr/>
          &sxml-attribute;
          <literal>`(img (@@ (src-e ,url) ...)) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(script (@@ (src-e ,url) ...)) ...) ...)</literal>
a299 6
          <sbr/>
          &sxml-attribute;
          <literal>`(img (@@ (src-c ,url) ...)) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(script (@@ (src-c ,url) ...)) ...) ...)</literal>
a318 3
          <indexterm>
            <primary>@@src-ce</primary>
          </indexterm>
a326 6
          <sbr/>
          &sxml-attribute;
          <literal>`(img (@@ (src-ce ,url) ...)) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(script (@@ (src-ce ,url) ...)) ...) ...)</literal>
@


1.2.4.2
log
@added graphviz documentation; corrected html tags
@
text
@d169 1
a169 2
        slightly extended version of the HTML markup language. We will
        refer to this version as eshtml (extended sxml-based html).
d207 1
a207 1
        Additionally, a number of extra attributes are defined in order to
d258 1
a258 7
            <primary>@@action-p</primary>
          </indexterm>
          <indexterm>
            <primary>@@data-p</primary>
          </indexterm>
          <indexterm>
            <primary>@@href-p</primary>
a260 35
            <primary>@@src-p</primary>
          </indexterm>
          &sxml-attribute;
          <literal>`(a (@@ (href-p ,proc) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(form (@@ (action-p ,proc) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(iframe (@@ (src-p ,proc) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(img (@@ (src-p ,proc) ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(link (@@ (href-p ,proc) ...))</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(object (@@ (data-p ,proc) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(script (@@ (src-p ,proc) ...) ...)</literal>
          <blockquote>
            <para>
              These attributes produce links that, when followed,
              invoke the given procedure. The HTTP request object will be
              passed as the only parameter to the procedure.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <blockquote>
        <para>
          <indexterm>
a263 6
            <primary>@@data-e</primary>
          </indexterm>
          <indexterm>
            <primary>@@href-e</primary>
          </indexterm>
          <indexterm>
d267 1
a267 7
          <literal>`(a (@@ (href-e ,url) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(form (@@ (action-e ,url) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(iframe (@@ (src-e ,url) ...))</literal>
d270 1
a270 1
          <literal>`(img (@@ (src-e ,url) ...))</literal>
d273 1
a273 1
          <literal>`(link (@@ (href-e ,url) ...))</literal>
d276 1
a276 1
          <literal>`(object (@@ (data-e ,url) ...) ...)</literal>
d279 1
a279 1
          <literal>`(script (@@ (src-e ,url) ...) ...)</literal>
a295 6
            <primary>@@action-c</primary>
          </indexterm>
          <indexterm>
            <primary>@@data-c</primary>
          </indexterm>
          <indexterm>
d299 1
a299 1
            <primary>@@src-c</primary>
d302 1
a302 7
          <literal>`(a (@@ (href-c ,url) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(form (@@ (action-c ,url) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(iframe (@@ (src-c ,url) ...))</literal>
d305 1
a305 1
          <literal>`(img (@@ (src-c ,url) ...))</literal>
d308 1
a308 1
          <literal>`(link (@@ (href-c ,url) ...))</literal>
d311 1
a311 1
          <literal>`(object (@@ (data-c ,url) ...) ...)</literal>
d314 1
a314 1
          <literal>`(script (@@ (src-c ,url) ...) ...)</literal>
d329 1
a329 1
            <primary>@@action-ce</primary>
d332 1
a332 4
            <primary>@@data-ce</primary>
          </indexterm>
          <indexterm>
            <primary>@@href-ce</primary>
d338 1
a338 7
          <literal>`(a (@@ (href-ce ,url) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(form (@@ (action-ce ,url) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(iframe (@@ (src-ce ,url) ...))</literal>
d341 1
a341 1
          <literal>`(img (@@ (src-ce ,url) ...))</literal>
d344 1
a344 1
          <literal>`(link (@@ (href-ce ,url) ...))</literal>
d347 1
a347 1
          <literal>`(object (@@ (data-ce ,url) ...) ...)</literal>
d350 1
a350 1
          <literal>`(script (@@ (src-ce ,url) ...) ...)</literal>
a362 75
      <blockquote>
        <para>
          <indexterm>
            <primary>@@type "graphviz"</primary>
          </indexterm>
          &sxml-attribute;
          <literal>`(object (@@ (type "graphviz") (layout ,layout) (format ,format) ...)
          (graph (@@ (id ,id) ...))</literal>
          <blockquote>
            <para>
              If the attribute <parameter>type "graphviz"</parameter>
              is specified for the <function>object</function>
              element, a Graphviz graph will be embedded in the
              document.
            </para>
            <para>
              The <parameter>layout</parameter> and
              <parameter>format</parameter> attributes are analogous
              to the omonymous parameters to the
              <function>send-graphviz/*</function> functions (see
              <xref linkend="bindings"/>.) However, the value of
              <parameter>format</parameter> determines how the content
              is included:
            </para>

            <itemizedlist>
              <listitem>
                <parameter>gif, jpg, png</parameter>: The graph is
                embedded as an <function>img</function> tag, and a
                corresponding image map is generated. Links associated
                to nodes, edges and records will be mapped
                appropriately. Just as for other document elements,
                the <parameter>href[-[p|c|e|ce]]</parameter>
                attributes are available, and behave as described
                above.
              </listitem>
              <listitem>
                <parameter>ps, svg, etc.</parameter>: The graph is
                embedded as an <function>object</function> tag. The
                appropriate mime type is automatically set, and needs
                not be specified explicitely.
              </listitem>
            </itemizedlist>

            <para>
              In both cases, any attribute specified for the
              <function>object</function> tag will be applied toward
              the generated <function>object</function> or
              <function>img</function> tag.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <informalexample>
        <programlisting>
          (send-html/suspend
           (lambda (k-url)
            `(html
              (head
               (title "Embedded Graphviz")
              (body
              (h3 "Embedded Graphviz")

              (object (@@ (type "graphviz")
                         (layout dot) (format png))
                (graph (@@ (id G))
                  (node (@@ (id c) (label "scissors") (href "http://www.google.com/search?q=scissors")))
                  (node (@@ (id p) (label "paper") (href "http://www.google.com/search?q=paper")))
                  (node (@@ (id s) (label "stone") (href "http://www.google.com/search?q=stone")))
                  (edge (@@ (from c) (to p) (label "cut") (href-p ,cut)))
                  (edge (@@ (from p) (to s) (label "wraps") (href-c "/")))
                  (edge (@@ (from s) (to c) (label "breaks") (href-e ,k-url))))))))))
        </programlisting>
      </informalexample>
a509 210


  <section id="graphviz">
    <title>Sending GraphViz graphs</title>

    <para>
      &requires;
      <emphasis role="bold">
        (import <emphasis>siscweb/graphviz</emphasis>)
      </emphasis>
    </para>

    <para>
      This module provides procedures to send graphs in various
      formats as generated by Graphviz (<ulink
      url="http://www.graphviz.org"/>). Most of the functions accept a
      markup representation of DOT, the GraphViz language, in the form
      of DotML (see <xref linkend="dotml"/>.)
    </para>

    <para>
      The GraphViz programs (dot, neato, etc.) should be installed
      somewhere in the system path. This is usually the case in
      UNIX. Alternatively, it is possible to set the absolute paths to
      the GraphViz programs by using the
      <function>graphiz/put-layout-command!</function> function.
    </para>

    <para>
      Graphs can be generated either using the
      <function>send-graphviz/*</function> functions, or by embedding the
      <function>graphviz</function> tag in the markup sent to the
      <function>send-html/*</function> functions.
    </para>

    <section id="send-graphviz">
      <title>Graphviz Procedures</title>

      <para>
        Both <function>send-graphviz/*</function> procedures accept
        the same three parameters:
      </para>
      <itemizedlist>
        <listitem>
          <parameter>layout</parameter>: This is a symbol specifying
          which Graphviz layout engine to use. The current choices are
          'dot, 'neato, 'twopi, 'circo, and 'fdp.
        </listitem>
        <listitem>
          <parameter>format</parameter>: This is a symbol specifying
          the output format. The most useful choices currently are
          'gif, 'jpg, 'png, 'ps, and 'svg.
        </listitem>
        <listitem>
          <parameter>&lt;dotml&gt;</parameter>: This is an sxml
          representation of the DotML language. See <xref
          linkend="dotml"/>.
        </listitem>
      </itemizedlist>

      <blockquote>
        <para>
          <indexterm>
            <primary>send-graphviz/back</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-graphviz/back</methodname>
            <methodparam>
              <parameter>layout</parameter>
            </methodparam>
            <methodparam>
              <parameter>format</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;dotml&gt;</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              Sends the given <parameter>dotml</parameter> graph in
              the specified <parameter>format</parameter> to the
              browser after laying the graph out using the indicated
              <parameter>layout</parameter> engine.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <informalexample>
        <programlisting>
          <![CDATA[
          (send-graphviz
            'dot 'png
            `(graph (@@ (id G))
              (node (@@ (id c) (label "scissors")))
              (node (@@ (id p) (label "paper")))
              (node (@@ (id s) (label "stone")))
              (edge (@@ (from c) (to p) (label "cut")))
              (edge (@@ (from p) (to s) (label "wraps")))
              (edge (@@ (from s) (to c) (label "breaks")))))
          ]]>
        </programlisting>
      </informalexample>

      <blockquote>
        <para>
          <indexterm>
            <primary>send-graphviz/finish</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-graphviz/back</methodname>
            <methodparam>
              <parameter>layout</parameter>
            </methodparam>
            <methodparam>
              <parameter>format</parameter>
            </methodparam>
            <methodparam>
              <parameter>&lt;dotml&gt;</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              This function behaves like
              <function>send-graphviz/back</function>, except that it
              clears the continuation table. This will prevent the
              user from using the back button to resume the program
              flow from earlier points.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <blockquote>
        <para>
          <indexterm>
            <primary>graphviz/put-layout-command!</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>undefined</type>
            <methodname>graphviz/put-layout-command!</methodname>
            <methodparam>
              <parameter>layout</parameter>
              <parameter>path</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              Associates a given <parameter>layout</parameter> to the
              specified <parameter>command</parameter>.  This function
              can be used to add Graphviz layout engines, or to
              specify absolute paths for existing engines. The latter
              is likely to be an issue in Windows.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <informalexample>
        <programlisting>
          <![CDATA[
          (graphviz/put-layout-command 'dot "d:/bin/dot.exe")
          ]]>
        </programlisting>
      </informalexample>
    </section>

    <section id="dotml">
      <title>DotML</title>

      <para>
        The <function>send-graphviz/*</function> procedures accept a
        graph description expressed in DotML. DotML was created by
        Martin Loetzsch, and an exhaustive description rich with
        excellent examples is at <ulink
        url="http://www.martin-loetzsch.de/DOTML"/>.
      </para>
      <para>
        SISCweb does not use code from the DotML project, but
        implements the same markup syntax in sxml form. There are a
        few differences between SISCweb's implementation and the
        original:
      </para>

      <itemizedlist>
        <listitem>
          The generated DOT code (which is fed into Graphviz) is somewhat different.
        </listitem>
        <listitem>
          The <function>graph</function>,
          <function>sub-graph</function>, <function>cluster</function>
          and <function>node</function> elements must always specify
          an <parameter>id</parameter> attribute.
        </listitem>
        <listitem>
          The toplevel <function>record</function> element must specify an <parameter>id</parameter> attribute, but nested <function>record</function> elements do not have to.
        </listitem>
      </itemizedlist>
    </section>
  </section>


@


1.2.4.3
log
@added details about #f in HTML; note about deprecating dispatch;
adapted graphviz text and examples to modified graphviz/dotml syntax
(no symbol ids); minor fixes and omissions
@
text
@a205 15
      <para>
        The value &f; as an element or attribute value is
        ignored. This is handy when generating dynamic content.
      </para>

      <informalexample>
        <programlisting>
          ;; equivalent to (html (body (p)))
          (send-html
            `(html
              (body
               (p (@@ (align #f))
                #f))))
        </programlisting>
      </informalexample>
a253 9

        <note>
          <para>
            The <function>dispatch</function> attribute will be
            deprecated in release 0.3 in favor of the
            <function>[action|data|href|src]-p</function> attributes
            described below.
          </para>
        </note>
d458 1
a458 1
              <xref linkend="send-graphviz"/>.) However, the value of
d504 7
a510 7
                (graph (@@ (id "G"))
                  (node (@@ (id "c") (label "scissors") (href "http://www.google.com/search?q=scissors")))
                  (node (@@ (id "p") (label "paper") (href "http://www.google.com/search?q=paper")))
                  (node (@@ (id "s") (label "stone") (href "http://www.google.com/search?q=stone")))
                  (edge (@@ (from "c") (to "p") (label "cut") (href-p ,cut)))
                  (edge (@@ (from "p") (to "s") (label "wraps") (href-c "/")))
                  (edge (@@ (from "s") (to "c") (label "breaks") (href-e ,k-url))))))))))
d660 2
d704 1
a704 1
          <parameter>layout</parameter>: This is a string specifying
d706 1
a706 1
          dot, neato, twopi, circo, and fdp.
d709 1
a709 1
          <parameter>format</parameter>: This is a string specifying
d711 1
a711 1
          gif, jpg, 'png, 'ps, and 'svg.
d756 7
a762 7
            `(graph (@@ (id "G"))
              (node (@@ (id "c") (label "scissors")))
              (node (@@ (id "p") (label "paper")))
              (node (@@ (id "s") (label "stone")))
              (edge (@@ (from "c") (to "p") (label "cut")))
              (edge (@@ (from "p") (to "s") (label "wraps")))
              (edge (@@ (from "s") (to "c") (label "breaks")))))
d810 1
a810 1
              <parameter>command</parameter>
d829 1
a829 1
          (graphviz/put-layout-command "dot" "d:/bin/dot.exe")
a832 24

      <blockquote>
        <para>
          <indexterm>
            <primary>graphviz/get-layout-command</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>command/&f;</type>
            <methodname>graphviz/get-layout-command</methodname>
            <methodparam>
              <parameter>layout</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              Retrieves the <parameter>command</parameter> associated
              to the given <parameter>layout</parameter>, or &f; if no
              association is present.
            </para>
          </blockquote>
        </para>
      </blockquote>
d863 1
a863 9
          The <parameter>id</parameter> attribute values at the moment
          are limited to strings of alphanumeric characters and
          underscore.
        </listitem>
        <listitem>
          The enclosing <function>record</function> elements must
          specify an <parameter>id</parameter> attribute, but nested
          <function>record</function> and <function>node</function>
          elements do not have to.
d907 1
a907 1
            Sends the specified HTTP error <parameter>code</parameter>
@


1.2.4.4
log
@fixed typo
@
text
@d637 1
a637 1
          <methodname>send-forward/back</methodname>
@


1.2.4.5
log
@added notes to send-forward/suspend
@
text
@d592 3
a594 4
            <parameter>siscweb.bindings</parameter> attributes of the
            forwarded request.  Additionally, the continuation URL
            will be set in the <parameter>siscweb.kURL</parameter>
            request attribute.
@


1.2.4.6
log
@updated @@*-p, @@-c, @@bindings docs; added forward/store! description; added a couple of live links
@
text
@a235 18
          <sbr/>
          &sxml-attribute;
          <literal>`(form (@@ (bindings ((name value) ...)) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(iframe (@@ (bindings ((name value) ...)) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(img (@@ (bindings ((name value) ...)) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(link (@@ (bindings ((name value) ...)) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(object (@@ (bindings ((name value) ...)) ...) ...)</literal>
          <sbr/>
          &sxml-attribute;
          <literal>`(script (@@ (bindings ((name value) ...)) ...) ...)</literal>
d295 1
a295 1
          <literal>`(a (@@ (href-p ,proc) [(bindings ,bindings)] ...) ...)</literal>
d298 1
a298 1
          <literal>`(form (@@ (action-p ,proc) [(bindings ,bindings)] ...) ...)</literal>
d301 1
a301 1
          <literal>`(iframe (@@ (src-p ,proc) [(bindings ,bindings)] ...) ...)</literal>
d304 1
a304 1
          <literal>`(img (@@ (src-p ,proc) [(bindings ,bindings)] ...))</literal>
d307 1
a307 1
          <literal>`(link (@@ (href-p ,proc) [(bindings ,bindings)] ...))</literal>
d310 1
a310 1
          <literal>`(object (@@ (data-p ,proc) [(bindings ,bindings)] ...) ...)</literal>
d313 1
a313 1
          <literal>`(script (@@ (src-p ,proc) [(bindings ,bindings)] ...) ...)</literal>
d317 2
a318 11
              invoke the given procedure
              <parameter>proc</parameter>. The HTTP request object
              will be passed as the only parameter to the procedure,
              and will contain the specified
              <parameter>bindings</parameter>, if any.
            </para>
            <para>
              In the case of <function>@@action-p</function>, the form
              field values and the specified
              <parameter>bindings</parameter> will be merged, with the
              latter taking precedence over the former.
d327 1
a327 1
            <primary>@@action-c</primary>
d330 1
a330 1
            <primary>@@data-c</primary>
d333 1
a333 1
            <primary>@@href-c</primary>
d336 1
a336 1
            <primary>@@src-c</primary>
d339 1
a339 1
          <literal>`(a (@@ (href-c ,c-url) [(bindings ,bindings)] ...) ...)</literal>
d342 1
a342 1
          <literal>`(form (@@ (action-c ,c-url) [(bindings ,bindings)] ...) ...)</literal>
d345 1
a345 1
          <literal>`(iframe (@@ (src-c ,c-url) [(bindings ,bindings)] ...))</literal>
d348 1
a348 1
          <literal>`(img (@@ (src-c ,c-url) [(bindings ,bindings)] ...))</literal>
d351 1
a351 1
          <literal>`(link (@@ (href-c ,c-url) [(bindings ,bindings)] ...))</literal>
d354 1
a354 1
          <literal>`(object (@@ (data-c ,c-url) [(bindings ,bindings)] ...) ...)</literal>
d357 1
a357 1
          <literal>`(script (@@ (src-c ,c-url) [(bindings ,bindings)] ...) ...)</literal>
d360 6
a365 8
              These attributes allow using
              <parameter>c-url</parameter>s relative to the context in
              which the &SISCweb; application is running. They are
              useful to reference plain HTML files or JSPs that
              co-exist in the same context. If any
              <parameter>bindings</parameter> are specified, they will
              be included in the request associated to the
              <parameter>c-url</parameter>.
d374 1
a374 1
            <primary>@@action-e</primary>
d377 1
a377 1
            <primary>@@data-e</primary>
d380 1
a380 1
            <primary>@@href-e</primary>
d383 1
a383 1
            <primary>@@src-e</primary>
d386 1
a386 1
          <literal>`(a (@@ (href-e ,url) ...) ...)</literal>
d389 1
a389 1
          <literal>`(form (@@ (action-e ,url) ...) ...)</literal>
d392 1
a392 1
          <literal>`(iframe (@@ (src-e ,url) ...))</literal>
d395 1
a395 1
          <literal>`(img (@@ (src-e ,url) ...))</literal>
d398 1
a398 1
          <literal>`(link (@@ (href-e ,url) ...))</literal>
d401 1
a401 1
          <literal>`(object (@@ (data-e ,url) ...) ...)</literal>
d404 1
a404 1
          <literal>`(script (@@ (src-e ,url) ...) ...)</literal>
d407 4
a410 6
              These attributes will encode the given
              <parameter>url</parameter> as per the the Java
              <function>HttpServletResponse.encodeURL()</function>
              method. This is useful to support cookie-less
              interaction, as it will encode the session ID in the
              <parameter>url</parameter> as needed.
d452 5
a456 6
              DEPRECATED.  These attributes were used to combine the
              above described <function>*-c</function> and
              <function>*-e</function> attributes in one, but
              <function>href-c</function> now encodes the url by
              default, making the <function>*-ce</function> attributes
              redundant.
d494 3
a496 4
                the <function>@@href[-[p|c|e]]</function> and
                <function>@@bindings</function> attributes are
                available, and behave as described in <xref
                linkend="html-markup"/>.
d557 10
a682 66

    <blockquote>
      <para>
        <indexterm>
          <primary>forward/store!</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>k-url</type>
          <methodname>forward/store!</methodname>
          <methodparam>
            <parameter>proc</parameter>
          </methodparam>
          <methodparam choice="opt">
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>
        <sbr/>
        &procedure;
        <methodsynopsis language="scheme">
          <type>k-url</type>
          <methodname>forward/store!</methodname>
          <methodparam>
            <parameter>c-url</parameter>
          </methodparam>
          <methodparam choice="opt">
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            In the first form, stores a closure
            <parameter>proc</parameter> in the continuation table, and
            returns the url that will invoke it.  The
            <parameter>proc</parameter> procedure should accept a
            request object as its only argument.  If
            <parameter>bindings</parameter> are specified, either as
            an a-list or a &lt;bindings&gt; object,
            <procedure>proc</procedure> will see them as bindings in
            its request.
          </para>
          <para>
            In the second form <function>forward/store!</function>
            stores a closure that forwards the request to the given
            context-relative <parameter>c-url</parameter>, including
            any specified bindings, if any.
          </para>
          <para>
            This function is especially useful when passing bindings
            using the <function>send-forward/*</function> functions,
            as it allows to embed links to closures in JSPs and the
            such, and allows to implement the same style of page
            navigation afforded by the tags
            <function>@@*-c</function>+<function>@@bindings</function>
            and
            <function>@@*-c</function>+<function>@@bindings</function>
            in the sxml recognized by the
            <function>send-html/*</function> functions. Notably
            missing is the equivalent of the plain
            <function>@@bindings</function>, which is still
            unimplemented.
          </para>
        </blockquote>
      </para>
    </blockquote>
d698 1
a698 1
      url="http://www.graphviz.org">http://www.graphviz.org</ulink>). Most of the functions accept a
@


1.2.4.7
log
@updated forwarding section
@
text
@d6 1
a6 1
    translating an SXML notation to HTML, or by forwarding to JSPs or
d574 2
a575 2
  <section id="forward">
    <title>Forwarding Requests</title>
d586 2
a587 20
      convenient to generate content using traditional techniques such
      as JSPs and servlets rather than SXML.
    </para>

    <para>
      The <function>send-forward/*</function> procedures dispatch the
      request to the indicated context-relative URL. Bindings can be
      attached in the form of &lt;bindings&gt; objects or a-lists. The
      <function>forward/store!</function> function can also be used to
      pass URLs mapped to closures in the style of the
      <function>@@[action|data|href|src]-p</function> tags. Coupled
      with the URL corresponding to the current-continuation being set
      in the <parameter>siscweb.kURL</parameter> request attribute,
      this enables one to use SISCweb for control, and JSP/Servlets
      for presentation without losing too many features.
    </para>

    <para>
      See <xref linkend="bindings-java"/> for details on how to access
      bindings from Java.
d613 5
a617 3
            either a &quot;bindings&quot; object or an a-list as
            specified in <xref linkend="bindings"/>. The continuation
            URL will be set in the <parameter>siscweb.kURL</parameter>
a747 1

a753 1

@


1.2.4.8
log
@removed deprecated entries; minor fixes
@
text
@d450 47
d599 1
a599 1
      this enables one to use &SISCweb; for control and JSP/Servlets
@


1.2.4.9
log
@edits; added locations
@
text
@a19 5
      <sbr/>
      &locatedin;
      <emphasis role="bold">
        siscweb-sxml.jar
      </emphasis>
d169 2
a170 1
        slightly extended version of the HTML markup language.
d192 2
a193 2
        Numbers in attributes and text nodes are automatically
        converted to strings using <function>pretty-print</function>.
d198 1
a198 1
          (send-html/back
d214 1
a214 1
          (send-html/back
d218 1
a218 13
                ,(hashtable/get ht 'para)))))
        </programlisting>
      </informalexample>

      <para>
        The element *VERBATIM* can be used to produce non-escaped text.
      </para>

      <informalexample>
        <programlisting>
          (send-html/back
            `(*VERBATIM*
               "<html><body><p>Hello, &quot;world&quot;</p></body></html>))
a221 1

d223 3
a225 3
        A number of extra attributes are defined in order to
        facilitate continuation-centric programming and interaction
        with the J2EE environment.
a534 5
      <sbr/>
      &locatedin;
      <emphasis role="bold">
        siscweb.jar
      </emphasis>
a752 5
      <sbr/>
      &locatedin;
      <emphasis role="bold">
        siscweb-sxml.jar
      </emphasis>
a992 5
      <sbr/>
      &locatedin;
      <emphasis role="bold">
        siscweb.jar
      </emphasis>
@


1.1
log
@file pages.xml was initially added on branch rel-0-2-dev.
@
text
@d1 556
@


1.1.2.1
log
@initial import
@
text
@a0 315
<chapter id="pages">
  <title>Generating content</title>

  <para>
    &SISCweb; programs can currently generate HTTP responses either by
    translating an SXML notation to HTML, or by dispatching to JSPs or
    servlets. Functions to generate HTTP errors are also
    available. Other response types can be easily plugged on top of a
    basic set of response functions.
  </para>

  <section id="html">
    <title>Sending HTML</title>

    <para>
      &requires;
      <emphasis role="bold">
        (import <emphasis>siscweb/html</emphasis>)
      </emphasis>
    </para>

    <para>
      This module provides simple procedures to send HTML content to
      the browser. HTML documents are represented in the SXML syntax,
      and include a few special elements and attributes to assist with
      continuation-based programming.
    </para>

    <section id="send-html">
      <title>HTML Core Procedures</title>

      <para>
        The core procedures to send HTML content follow the basic
        send-html/* pattern. They differ in whether or not they clear
        the continuation table, and whether or not they return when
        the user interacts with the page.
      </para>

      <blockquote>
        <para>
          <indexterm>
            <primary>send-html/suspend</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>request</type>
            <methodname>send-html/suspend</methodname>
            <methodparam>
              <parameter>(lambda (k-url) &lt;sxml&gt;)</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              Sends the given SXML to the browser in the form of HTML
              and suspends execution. The <parameter>k-url</parameter>
              will contain a hash used to resume the execution, and
              should therefore be used in forms and anchors as
              needed. When the browser submits a request to the
              <parameter>k-url</parameter>, said request will become
              the return value of
              <function>send-html/suspend</function>.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <informalexample>
        <programlisting>
          <![CDATA[
          (let loop ((n 0))
            (send-html/suspend
              (lambda (k-url)
                `(html
                   (body
                     (a (@@ (href ,k-url)) ,n)))))
            (loop (+ n 1)))
          ]]>
        </programlisting>
      </informalexample>

      <blockquote>
        <para>
          <indexterm>
            <primary>send-html/forward</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>request</type>
            <methodname>send-html/forward</methodname>
            <methodparam>
              <parameter>(lambda (k-url) &lt;sxml&gt;)</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              This function behaves like
              <function>send-html/suspend</function>, except that it
              clears the continuation table first. This will make it
              impossible to use the back button and resume the program
              flow from earlier points.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <blockquote>
        <para>
          <indexterm>
            <primary>send-html/back</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-html/back</methodname>
            <methodparam>
              <parameter>&lt;sxml&gt;</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              Sends the provided SXML to the browser and stops.
            </para>
          </blockquote>
        </para>
      </blockquote>

     <informalexample>
        <programlisting>
            (send-html/back
              `(html
                (body
                  (a (@@ (href ,k-url)) ,n))))
        </programlisting>
      </informalexample>

      <blockquote>
        <para>
          <indexterm>
            <primary>send-html/finish</primary>
          </indexterm>
          &procedure;
          <methodsynopsis language="scheme">
            <type>does not return</type>
            <methodname>send-html/finish</methodname>
            <methodparam>
              <parameter>&lt;sxml&gt;</parameter>
            </methodparam>
          </methodsynopsis>

          <blockquote>
            <para>
              Like <function>send-html/back</function>, this function
              sends the provided SXML to the browser and stops, but
              clears the continuation table first.
            </para>
          </blockquote>
        </para>
      </blockquote>
    </section>

    <section id="html-markup">
      <title>Extended HTML markup</title>

      <para>coming soon</para>
    </section>
  </section>


  <section id="dispatch">
    <title>Dispatching</title>

    <para>
      &requires;
      <emphasis role="bold">
        (import <emphasis>siscweb/forward</emphasis>)
      </emphasis>
    </para>

    <para>
      Since &SISCweb; lives in a J2EE environment, it is sometimes
      convenient to generate content using traditional techniques
      such as JSPs and servlets rather than SXML.
    </para>

    <note>
      <para>
        Not all capabilities possible using the
        <function>send-html/*</function> functions and SXML are
        currently made available to the dispatch mechanism, namely
        binding and dispatch anchors. This will be fixed in a later
        version.
      </para>
    </note>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-forward/suspend</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>request</type>
          <methodname>send-forward/suspend</methodname>
          <methodparam>
            <parameter>context-url</parameter>
          </methodparam>
          <methodparam choice="opt">
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Forwards the current request and suspends. The
            <parameter>context-url</parameter> is relative to the
            context in which the &SISCweb; application is running.
            The optional <parameter>bindings</parameter> parameter is
            a binding list as specified in the bindings chapter; the
            bindings will be set in the attributes of the forwarded
            request.  Additionally, the continuation URL will be set
            in the request parameter
            <parameter>siscweb.kURL</parameter>.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-forward/forward</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>request</type>
          <methodname>send-forward/forward</methodname>
          <methodparam>
            <parameter>context-url</parameter>
          </methodparam>
          <methodparam choice="opt">
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            This function behaves like
            <function>send-forward/suspend</function>, except that it
            clears the continuation table first. This will make it
            impossible to use the back button and resume the program
            flow from earlier points.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-forward/back</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-forward/suspend</methodname>
          <methodparam>
            <parameter>context-url</parameter>
          </methodparam>
          <methodparam choice="opt">
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Forwards the current request to the provided
            <parameter>context-url</parameter>, and stops.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-forward/finish</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-forward/finish</methodname>
          <methodparam>
            <parameter>context-url</parameter>
          </methodparam>
          <methodparam choice="opt">
            <parameter>bindings</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Like <function>send-forward/back</function>, this function
            forwards the current request to the provided
            <parameter>context-url</parameter> and stops, but clears
            the continuation table first.
          </para>
        </blockquote>
      </para>
    </blockquote>

  </section>
</chapter>@


1.1.2.2
log
@fixed reference to bindings chapter
@
text
@d221 4
a224 4
            either a bindings object or list as specified in <xref
            linkend="bindings"/>; the bindings will be set in the
            attributes of the forwarded request.  Additionally, the
            continuation URL will be set in the request parameter
@


1.1.2.3
log
@added siscweb/error section
@
text
@a312 63
  </section>

  <section id="errors">
    <title>Generating HTTP errors</title>

    <para>
      &requires;
      <emphasis role="bold">
        (import <emphasis>siscweb/error</emphasis>)
      </emphasis>
    </para>

    <para>
      HTTP error responses can be generated using two functions, which
      differ in their behavior in respect of the continuation
      table. Neither of them returns. The error codes should abide to
      the <ulink
      url="http://www.faqs.org/rfcs/rfc2616.html">RFC2616</ulink>
      specifications.
    </para>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-error/back</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-forward/back</methodname>
          <methodparam>
            <parameter>code</parameter>
          </methodparam>
          <methodparam>
            <parameter>message</parameter>
          </methodparam>
        </methodsynopsis>

        <blockquote>
          <para>
            Sends the specified error <parameter>code</parameter>
            and <parameter>message</parameter>.
          </para>
        </blockquote>
      </para>
    </blockquote>

    <blockquote>
      <para>
        <indexterm>
          <primary>send-error/finish</primary>
        </indexterm>
        &procedure;
        <methodsynopsis language="scheme">
          <type>does not return</type>
          <methodname>send-forward/finish</methodname>
          <methodparam>
            <parameter>code</parameter>
          </methodparam>
          <methodparam>
            <parameter>message</parameter>
          </methodparam>
        </methodsynopsis>
a313 8
        <blockquote>
          <para>
            Like <function>send-error/back</function>, but clears the
            continuation table.
          </para>
        </blockquote>
      </para>
    </blockquote>
d315 1
a315 1
</chapter>
@


1.1.2.4
log
@fixed typos
@
text
@d342 1
a342 1
          <methodname>send-error/back</methodname>
d368 1
a368 1
          <methodname>send-error/finish</methodname>
@


1.1.2.5
log
@added section about extended html
@
text
@d167 1
a167 165
      <para>
        SISCweb's <function>send-html/*</function> procedures accept a
        slightly extended version of the HTML markup language.
      </para>
      <para>
        Symbols are converted to entities. Numerical entities should
        be surrounded by pipes so that the Scheme reader does not
        interpret the pound character. Note that XML reserved
        characters (quotes, tag delimiters) are automatically
        converted to entities. The following example shows a possible
        usage:
      </para>

      <informalexample>
        <programlisting>
          (send-html/back
            `(html
              (body
               (p "Can't" nbsp "wrap" nbsp "me")
               (p "I'm" |#10| "wrapped"))))
        </programlisting>
      </informalexample>

      <para>
        Numbers in attributes and text nodes are converted to strings
        automatically using pretty-print.
      </para>

      <informalexample>
        <programlisting>
          (send-html
            `(html
              (body
               (table (@@ (width 10))
                 (tr (td 42))))))
        </programlisting>
      </informalexample>


      <para>
        Additionally a number of extra attributes are defined in order to
        facilitate continuation-centric programming and interaction with the
        surrounding URL-centric environment.
      </para>


      <blockquote>
        <para>
          <indexterm>
            <primary>@@bindings</primary>
          </indexterm>
          &sxml-attribute;
          <screen>`(a (@@ (bindings ((name value) ...)) ...) ...)</screen>
          <blockquote>
            <para>
              This syntax is only usable from
              <function>send-html/suspend</function> and
              <function>send-html/forward</function>. It will produce
              a link that, when followed, will bind the given
              name/value pairs to the request object returned by these
              two functions. The bindings can the be fetched and used
              as detailed in <xref linkend="bindings"/>. The
              <parameter>name</parameter> parameter is either a string
              or symbol, while the <parameter>value</parameter>
              parameter can by any Scheme value at all.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <blockquote>
        <para>
          <indexterm>
            <primary>@@dispatch</primary>
          </indexterm>
          &sxml-attribute;
          <screen>`(a (@@ (dispatch ,proc) ...)) ...) ...)</screen>
          <blockquote>
            <para>
              This will produce a link that, when followed, will
              invoke the given procedure. The HTTP request will be
              passed as a parameter to the procedure.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <blockquote>
        <para>
          <indexterm>
            <primary>@@href-e</primary>
          </indexterm>
          <indexterm>
            <primary>@@action-e</primary>
          </indexterm>
          &sxml-attribute;
          <screen>`(a (@@ (href-e url) ...)) ...) ...)</screen>
          &sxml-attribute;
          <screen>`(link (@@ (href-e url) ...)) ...) ...)</screen>
          &sxml-attribute;
          <screen>`(form (@@ (action-e url) ...)) ...) ...)</screen>
          <blockquote>
            <para>
              These attributes will encode the given
              <parameter>url</parameter> as per the the Java
              <function>HttpServletResponse.encodeURL()</function>
              method. This is useful to support cookie-less
              interaction, as it will encode the session ID in the
              <parameter>url</parameter> as needed.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <blockquote>
        <para>
          <indexterm>
            <primary>@@href-c</primary>
          </indexterm>
          <indexterm>
            <primary>@@action-c</primary>
          </indexterm>
          &sxml-attribute;
          <screen>`(a (@@ (href-c url) ...)) ...) ...)</screen>
          &sxml-attribute;
          <screen>`(link (@@ (href-c url) ...)) ...) ...)</screen>
          &sxml-attribute;
          <screen>`(form (@@ (action-c url) ...)) ...) ...)</screen>
          <blockquote>
            <para>
              These attributes allow using <parameter>url</parameter>s
              relative to the context in which the &SISCweb; application
              is running. They are useful to reference plain HTML files
              or JSPs that co-exist in the same context.
            </para>
          </blockquote>
        </para>
      </blockquote>

      <blockquote>
        <para>
          <indexterm>
            <primary>@@href-ce</primary>
          </indexterm>
          <indexterm>
            <primary>@@action-ce</primary>
          </indexterm>
          &sxml-attribute;
          <screen>`(a (@@ (href-ce url) ...)) ...) ...)</screen>
          &sxml-attribute;
          <screen>`(link (@@ (href-ce url) ...)) ...) ...)</screen>
          &sxml-attribute;
          <screen>`(form (@@ (action-ce url) ...)) ...) ...)</screen>
          <blockquote>
            <para>
              These attributes combine the above described
              <parameter>*-c</parameter> and
              <parameter>*-e</parameter> attributes in one. The order
              of the letters in the suffix is, and in case of
              additions will always be, alphabetical.
            </para>
          </blockquote>
        </para>
      </blockquote>

@


1.1.2.6
log
@fixed display of attribute synopsis; other minor fixes
@
text
@d219 1
a219 1
          <literal>`(a (@@ (bindings ((name value) ...)) ...) ...)</literal>
d226 3
a228 4
              <parameter>name</parameter>/<parameter>value</parameter>
              pairs to the request object returned by these two
              functions. The bindings can the be fetched and used as
              detailed in <xref linkend="bindings"/>. The
d243 1
a243 1
          <literal>`(a (@@ (dispatch ,proc) ...)) ...) ...)</literal>
d263 1
a263 2
          <literal>`(a (@@ (href-e ,url) ...)) ...) ...)</literal>
          <sbr/>
d265 1
a265 2
          <literal>`(link (@@ (href-e ,url) ...)) ...) ...)</literal>
          <sbr/>
d267 1
a267 1
          <literal>`(form (@@ (action-e ,url) ...)) ...) ...)</literal>
d290 1
a290 2
          <literal>`(a (@@ (href-c ,url) ...)) ...) ...)</literal>
          <sbr/>
d292 1
a292 2
          <literal>`(link (@@ (href-c ,url) ...)) ...) ...)</literal>
          <sbr/>
d294 1
a294 1
          <literal>`(form (@@ (action-c ,url) ...)) ...) ...)</literal>
d315 1
a315 2
          <literal>`(a (@@ (href-ce ,url) ...)) ...) ...)</literal>
          <sbr/>
d317 1
a317 2
          <literal>`(link (@@ (href-ce ,url) ...)) ...) ...)</literal>
          <sbr/>
d319 1
a319 1
          <literal>`(form (@@ (action-ce ,url) ...)) ...) ...)</literal>
d323 2
a324 2
              <function>*-c</function> and
              <function>*-e</function> attributes in one. The order
d357 1
a357 1
        binding and dispatch anchors. These will be added in a later
@


1.1.2.7
log
@changed entity example
@
text
@d185 2
a186 2
               (p "Can't" nbsp "wrap" nbsp "me.")
               (p "Nor" |#160| "me."))))
@


1.1.2.8
log
@corrected typos and mechanics
@
text
@d56 6
a61 6
              and suspends the execution flow. The
              <parameter>k-url</parameter> will contain a hash used to
              resume the execution, and should therefore be used in
              forms and anchors as needed. When the browser submits a
              request to the <parameter>k-url</parameter>, said
              request will become the return value of
d228 1
a228 1
              functions. The bindings can then be fetched and used as
d232 1
a232 1
              parameter can be any Scheme value.
d361 1
a361 1
        Not all capabilities afforded by the
d363 1
a363 1
        currently made available to the dispatch mechanism -- namely
d451 1
a451 1
            <parameter>context-url</parameter> and stops.
d498 3
a500 2
      differ in how the affect the continuation table. Neither
      function returns. The error codes should abide to the <ulink
@


