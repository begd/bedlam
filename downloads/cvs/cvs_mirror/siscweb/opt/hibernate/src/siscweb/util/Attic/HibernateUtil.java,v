head	1.3;
access;
symbols
	rel-0-3-fix-3:1.2
	rel-0-3-fix-2:1.2
	rel-0-4-dev-sisc-1-11:1.2
	rel-0-3-fix-1:1.2
	rel-0-4-dev:1.2.0.4
	rel-0-3-fix:1.2.0.2
	rel-0-3:1.2
	rel-0-3-dev:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2006.09.03.01.42.24;	author acolomba;	state dead;
branches;
next	1.2;

1.2
date	2005.11.25.20.46.38;	author acolomba;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2005.10.30.22.45.57;	author acolomba;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.10.30.22.45.57;	author acolomba;	state Exp;
branches;
next	;

1.2.4.1
date	2006.08.30.23.07.55;	author acolomba;	state dead;
branches;
next	;


desc
@@


1.3
log
@merged from rel-0-4-dev
@
text
@/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is SISCweb.
 *
 * The Initial Developer of the Original Code is Alessandro Colomba.
 * Portions created by the Alessandro Colomba are Copyright (C) 2005
 * Alessandro Colomba. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

package siscweb.util;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;


/**
 * this code is derived from the omonymous utility class in the book
 * "Hibernate in Action" isbn 193239415X; a few improvements were made
 * to better clean up resources
 */
public class HibernateUtil
{
    private static Log log = LogFactory.getLog(HibernateUtil.class);
    private static final SessionFactory sessionFactory;
    private static final ThreadLocal session = new ThreadLocal();
    private static final ThreadLocal transaction = new ThreadLocal();


    static {
        try {
            sessionFactory = new Configuration().configure().buildSessionFactory();
        }
        catch (Throwable ex) {
            log.error("Initial SessionFactory creation failed.", ex);
            throw new ExceptionInInitializerError(ex);
        }
    }


    public static Session getSession()
        throws HibernateException
    {
        Session s = (Session) session.get();

        if(s == null) {
            s = sessionFactory.openSession();
            session.set(s);
        }

        return s;
    }

    public static void closeSession()
        throws HibernateException
    {
        Session s = (Session) session.get();
        session.set(null);
        transaction.set(null);

        if(s != null && s.isOpen()) {
            s.close();
        }
    }

    public static void beginTransaction()
        throws HibernateException
    {
        Transaction tx = (Transaction) transaction.get();

        if(tx == null) {
            tx = getSession().beginTransaction();
            transaction.set(tx);
        }
    }

    public static void commitTransaction()
        throws HibernateException
    {
        try {
            final Transaction tx = (Transaction) transaction.get();

            if(tx != null && !tx.wasCommitted() && !tx.wasRolledBack()) {
                tx.commit();
            }
        }
        catch(final HibernateException e) {
            rollbackTransaction();
            throw e;
        }
    }

    public static void rollbackTransaction()
        throws HibernateException
    {
        try {
            final Transaction tx = (Transaction) transaction.get();

            if(tx != null && !tx.wasCommitted() && !tx.wasRolledBack()) {
                tx.rollback();
            }
        }
        finally {
            closeSession();
        }
    }
}
@


1.2
log
@merged from rel-0-3-dev
@
text
@@


1.2.4.1
log
@removed hibernate continuation store (adieu mon ami)
@
text
@@


1.1
log
@file HibernateUtil.java was initially added on branch rel-0-3-dev.
@
text
@d1 137
@


1.1.2.1
log
@moved from siscweb/ to siscweb/opt/hibernate/
@
text
@a0 137
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is SISCweb.
 *
 * The Initial Developer of the Original Code is Alessandro Colomba.
 * Portions created by the Alessandro Colomba are Copyright (C) 2005
 * Alessandro Colomba. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

package siscweb.util;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;


/**
 * this code is derived from the omonymous utility class in the book
 * "Hibernate in Action" isbn 193239415X; a few improvements were made
 * to better clean up resources
 */
public class HibernateUtil
{
    private static Log log = LogFactory.getLog(HibernateUtil.class);
    private static final SessionFactory sessionFactory;
    private static final ThreadLocal session = new ThreadLocal();
    private static final ThreadLocal transaction = new ThreadLocal();


    static {
        try {
            sessionFactory = new Configuration().configure().buildSessionFactory();
        }
        catch (Throwable ex) {
            log.error("Initial SessionFactory creation failed.", ex);
            throw new ExceptionInInitializerError(ex);
        }
    }


    public static Session getSession()
        throws HibernateException
    {
        Session s = (Session) session.get();

        if(s == null) {
            s = sessionFactory.openSession();
            session.set(s);
        }

        return s;
    }

    public static void closeSession()
        throws HibernateException
    {
        Session s = (Session) session.get();
        session.set(null);
        transaction.set(null);

        if(s != null && s.isOpen()) {
            s.close();
        }
    }

    public static void beginTransaction()
        throws HibernateException
    {
        Transaction tx = (Transaction) transaction.get();

        if(tx == null) {
            tx = getSession().beginTransaction();
            transaction.set(tx);
        }
    }

    public static void commitTransaction()
        throws HibernateException
    {
        try {
            final Transaction tx = (Transaction) transaction.get();

            if(tx != null && !tx.wasCommitted() && !tx.wasRolledBack()) {
                tx.commit();
            }
        }
        catch(final HibernateException e) {
            rollbackTransaction();
            throw e;
        }
    }

    public static void rollbackTransaction()
        throws HibernateException
    {
        try {
            final Transaction tx = (Transaction) transaction.get();

            if(tx != null && !tx.wasCommitted() && !tx.wasRolledBack()) {
                tx.rollback();
            }
        }
        finally {
            closeSession();
        }
    }
}
@

