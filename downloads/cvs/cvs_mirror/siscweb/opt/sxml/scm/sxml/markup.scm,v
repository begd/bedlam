head	1.4;
access;
symbols
	rel-0-6-dev:1.4.0.4
	rel-0-5-fix:1.4.0.2
	rel-0-5:1.4
	rel-0-5-dev-safe-frames:1.3.4.1.0.2
	Root_rel-0-5-dev-safe-frames:1.3.4.1
	rel-0-4-fix-0:1.3
	rel-0-5-dev:1.3.0.4
	rel-0-4-fix:1.3.0.2
	rel-0-3-fix-3:1.2.2.2
	rel-0-3-fix-2:1.2.2.1
	rel-0-4-dev-sisc-1-11:1.2.4.5
	rel-0-3-fix-1:1.2
	rel-0-4-dev:1.2.0.4
	rel-0-3-fix:1.2.0.2
	rel-0-3:1.2
	rel-0-3-dev:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2007.04.12.03.51.18;	author acolomba;	state Exp;
branches
	1.4.2.1
	1.4.4.1;
next	1.3;

1.3
date	2006.09.03.01.42.23;	author acolomba;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2005.11.25.20.46.38;	author acolomba;	state Exp;
branches
	1.2.2.1
	1.2.4.1;
next	1.1;

1.1
date	2005.11.20.18.44.01;	author acolomba;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.11.20.18.44.01;	author acolomba;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.11.20.20.03.35;	author acolomba;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2005.11.25.04.52.16;	author acolomba;	state Exp;
branches;
next	;

1.2.2.1
date	2006.02.25.17.12.02;	author acolomba;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2006.04.15.15.55.24;	author acolomba;	state Exp;
branches;
next	;

1.2.4.1
date	2005.12.01.03.53.44;	author acolomba;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2006.01.14.02.24.51;	author acolomba;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2006.01.15.23.53.12;	author acolomba;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2006.01.16.00.06.00;	author acolomba;	state Exp;
branches;
next	1.2.4.5;

1.2.4.5
date	2006.02.11.03.55.53;	author acolomba;	state Exp;
branches;
next	1.2.4.6;

1.2.4.6
date	2006.04.08.22.33.45;	author acolomba;	state Exp;
branches;
next	;

1.3.4.1
date	2006.10.09.22.03.10;	author acolomba;	state Exp;
branches;
next	;

1.4.2.1
date	2008.03.21.04.12.58;	author acolomba;	state Exp;
branches;
next	;

1.4.4.1
date	2008.03.21.04.11.28;	author acolomba;	state Exp;
branches;
next	;


desc
@@


1.4
log
@merged from rel-0-5-dev
@
text
@;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.

(require-library 'sisc/libs/srfi/srfi-1) ; list library
(require-library 'sisc/libs/srfi/srfi-13) ; string library

(require-library 'siscweb/config)
(require-library 'sxml/sxml-match)
(require-library 'util/misc)
(require-library 'util/regexp)


(module sxml/markup
  (sxml->string)

  (import s2j)
  (import string-io)
  (import type-system)

  (import srfi-1)
  (import srfi-13)

  (import siscweb/config)
  (import sxml-matcher)
  (import util/misc)
  (import util/regexp)


  (define (sxml->string sxml)
    (define (xml-element? elt)
      (and (pair? elt)
           (symbol? (car elt))))

    (define (escape-string str)
      (fold-right (lambda (regexp replacement text)
                    (regexp-replace regexp text replacement))
                  str '("\"" "<" ">" "'" "&") '("&#34;" "&lt;" "&gt;" "&#39;" "&amp;")))

    (define (leaf? elt)
      (if (memq elt '(base br hr img input link meta)) #t #f))

    (define (->html-text value)
      (typecase value
        ((<string>) (escape-string value))
        ((<number>) (number->string value))
        (else (escape-string
               (with-output-to-string
                 (lambda () (pretty-print value)))))))

    (define (attr pair)
      (if (cadr pair) ; if attr value is #f, skip the attr
          (format " ~a=~s" (car pair) (->html-text (cadr pair)))
          ""))

    (import sxml-accessors)

    (sxml-match sxml
      ((*TOP* ,[x] ...)
       (string-append x ...))
      ((*DTD-INFO* ,name ,system)
       (guard (and (string? name) (string? system)))
       (format "<!DOCTYPE ~a SYSTEM ~s>" name system))
      ((*DTD-INFO/PUBLIC* ,name ,system ,public)
       (guard (and (string? name) (string? system) (string? public)))
       (format "<!DOCTYPE ~a PUBLIC ~s ~s>" name system public))
      ((*VERBATIM* ,string) (guard (string? string)) string)
      ((*COMMENT* ,string)
       (guard (and (string? string)
                   (not (string-contains string "--"))))
       (if (config/sxml-output-comments?)
           (format "<!--~a-->" string)
           ""))
      ((& ,symbol)
       (guard (symbol? symbol))
       (format "&~a;" symbol))
      (,elt
       (guard (and (xml-element? elt)
                   (or (leaf? (car elt))
                       (null? (xml-element-contents elt)))))
       (format "<~a~a />"
               (car elt)
               (fold-right string-append ""
                           (map attr
                                (xml-element-attributes elt)))))
      (,elt
       (guard (xml-element? elt))
       (format "<~a~a>~a</~a>"
               (car elt)
               (fold-right string-append ""
                           (map attr
                                (xml-element-attributes elt)))
               ;; tag content, properbly terminated
               (let ((c (xml-element-contents elt)))
                 (fold-right string-append "" (map sxml->string c)))
               (car elt)))
      (,string (guard (string? string)) (escape-string string))
      (,number (guard (number? number)) (number->string number))
      (,symbol (guard (symbol? symbol))
               (format "&~a;" symbol))
      (#f "")
      (,else (error (string-append
                     "siscweb/html: Invalid element : \""
                     (with-output-to-string
                       (lambda ()
                         (display else)))
                     "\"")))))
  )
@


1.4.2.1
log
@fixed output of attribute values
@
text
@d79 1
a79 1
          (format " ~a=\"~a\"" (car pair) (->html-text (cadr pair)))
@


1.4.4.1
log
@fixed output of attribute values
@
text
@d79 1
a79 1
          (format " ~a=\"~a\"" (car pair) (->html-text (cadr pair)))
@


1.3
log
@merged from rel-0-4-dev
@
text
@d55 1
d66 3
d104 9
d119 1
a119 1
               ;; tag content, properly terminated
@


1.3.4.1
log
@some <tag>s are now not terminated with </tag>
@
text
@a54 1

a64 3
    (define (leaf? elt)
      (if (memq elt '(base br hr img input link meta)) #t #f))

a99 9
       (guard (and (xml-element? elt)
                   (or (leaf? (car elt))
                       (null? (xml-element-contents elt)))))
       (format "<~a~a />"
               (car elt)
               (fold-right string-append ""
                           (map attr
                                (xml-element-attributes elt)))))
      (,elt
d106 1
a106 1
               ;; tag content, properbly terminated
@


1.2
log
@merged from rel-0-3-dev
@
text
@d31 2
a32 2
(require-library 'sisc/libs/srfi/srfi-1)
(require-library 'sisc/libs/srfi/srfi-13)
d63 1
a63 1
                  str '("\"" "<" ">" "'" "&") '("&quot;" "&lt;" "&gt;" "&apos;" "&amp;")))
d75 1
a75 2
          (string-append
           " " (symbol->string (car pair)) "=\"" (->html-text (cadr pair)) "\"")
d81 8
a88 2
      ((*TOP* ,[x])
       x)
d93 2
a94 2
       (if *sxml-output-comments?*
           (string-append "<!--" string "-->")
d98 1
a98 1
       (string-append "&" (symbol->string symbol) ";"))
d101 9
a109 18
       (string-append
        "<"
        ;; tag name
        (symbol->string (car elt))
        ;; attribute list
        (fold-right string-append ""
                    (map attr
                         (xml-element-attributes elt)))
        ;; tag content, properly terminated
        (let ((c (xml-element-contents elt)))
          (if (null? c)
              " />"
              (string-append
               ">"
               (fold-right string-append "" (map sxml->string c))
               "</"
               (symbol->string (car elt))
               ">")))))
d113 1
a113 1
               (string-append "&" (symbol->string symbol) ";"))
@


1.2.2.1
log
@merged from rel-0-4-dev-sisc-1-11
@
text
@d31 2
a32 2
(require-library 'sisc/libs/srfi/srfi-1) ; list library
(require-library 'sisc/libs/srfi/srfi-13) ; string library
d63 1
a63 1
                  str '("\"" "<" ">" "'" "&") '("&#34;" "&lt;" "&gt;" "&#39;" "&amp;")))
d75 2
a76 1
          (format " ~a=~s" (car pair) (->html-text (cadr pair)))
d82 2
a83 8
      ((*TOP* ,[x] ...)
       (string-append x ...))
      ((*DTD-INFO* ,name ,system)
       (guard (and (string? name) (string? system)))
       (format "<!DOCTYPE ~a SYSTEM ~s>" name system))
      ((*DTD-INFO/PUBLIC* ,name ,system ,public)
       (guard (and (string? name) (string? system) (string? public)))
       (format "<!DOCTYPE ~a PUBLIC ~s ~s>" name system public))
d89 1
a89 1
           (format "<!--~a-->" string)
d93 1
a93 1
       (format "&~a;" symbol))
d96 18
a113 9
       (format "<~a~a>~a</~a>"
               (car elt)
               (fold-right string-append ""
                           (map attr
                                (xml-element-attributes elt)))
               ;; tag content, properly terminated
               (let ((c (xml-element-contents elt)))
                 (fold-right string-append "" (map sxml->string c)))
               (car elt)))
d117 1
a117 1
               (format "&~a;" symbol))
@


1.2.2.2
log
@merged from rel-0-4-dev
@
text
@d93 1
a93 1
       (if (config/sxml-output-comments?)
@


1.2.4.1
log
@added comments to imported srfis
@
text
@d31 2
a32 2
(require-library 'sisc/libs/srfi/srfi-1) ; list library
(require-library 'sisc/libs/srfi/srfi-13) ; string library
@


1.2.4.2
log
@now does not close empty tags with the shorthand "/>" notation
@
text
@a103 1
        ">"
d106 8
a113 4
          (fold-right string-append "" (map sxml->string c)))
        "</"
        (symbol->string (car elt))
        ">"))
@


1.2.4.3
log
@added *DTD-INFO*, *DTD-INFO/PUBLIC* (inspired to webit!); *TOP* now
allows more than one inner element to allow for *DTD-INFO** and
*COMMENT*
@
text
@d82 2
a83 8
      ((*TOP* ,[x] ...)
       (string-append x ...))
      ((*DTD-INFO* ,name ,system)
       (guard (and (symbol? name) (string? system)))
       (format "<!DOCTYPE ~a SYSTEM ~s>" name system))
      ((*DTD-INFO/PUBLIC* ,name ,system ,public)
       (guard (and (symbol? name) (string? system) (string? public)))
       (format "<!DOCTYPE ~a PUBLIC ~s ~s>" name system public))
@


1.2.4.4
log
@substituted string-appends with more concise format function
@
text
@d75 2
a76 1
          (format " ~a=~s" (car pair) (->html-text (cadr pair)))
d95 1
a95 1
           (format "<!--~a-->" string)
d99 1
a99 1
       (format "&~a;" symbol))
d102 15
a116 9
       (format "<~a~a>~a</~a>"
               (car elt)
               (fold-right string-append ""
                           (map attr
                                (xml-element-attributes elt)))
               ;; tag content, properly terminated
               (let ((c (xml-element-contents elt)))
                 (fold-right string-append "" (map sxml->string c)))
               (car elt)))
d120 1
a120 1
               (format "&~a;" symbol))
@


1.2.4.5
log
@outputs numeric entities instead of &quot; and &apos;
@
text
@d63 1
a63 1
                  str '("\"" "<" ">" "'" "&") '("&#34;" "&lt;" "&gt;" "&#39;" "&amp;")))
d84 1
a84 1
       (guard (and (string? name) (string? system)))
d87 1
a87 1
       (guard (and (string? name) (string? system) (string? public)))
@


1.2.4.6
log
@uses new config api
@
text
@d93 1
a93 1
       (if (config/sxml-output-comments?)
@


1.1
log
@file markup.scm was initially added on branch rel-0-3-dev.
@
text
@d1 125
@


1.1.2.1
log
@moved from siscweb root to opt/sxml
@
text
@a0 123
;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.

(require-library 'sisc/libs/srfi/srfi-1)
(require-library 'sisc/libs/srfi/srfi-13)

(require-library 'siscweb/config)
(require-library 'sxml/sxml-match)
(require-library 'util/misc)
(require-library 'util/regexp)


(module sxml/markup
  (sxml->string)

  (import s2j)
  (import string-io)
  (import type-system)

  (import srfi-1)
  (import srfi-13)

  (import siscweb/config)
  (import sxml-matcher)
  (import util/misc)
  (import util/regexp)

  (define (sxml->string sxml)
    (define (xml-element? elt)
      (and (pair? elt)
           (symbol? (car elt))))

    (define (escape-string str)
      (fold-right (lambda (regexp replacement text)
                    (regexp-replace regexp text replacement))
                  str '("\"" "<" ">" "'" "&") '("&quot;" "&lt;" "&gt;" "&apos;" "&amp;")))

    (define (->html-text value)
      (typecase value
        ((<string>) (escape-string value))
        ((<number>) (number->string value))
        (else (escape-string
               (with-output-to-string
                 (lambda () (pretty-print value)))))))

    (define (attr pair)
      (if (cadr pair) ; if attr value is #f, skip the attr
          (string-append
           " " (symbol->string (car pair)) "=\"" (->html-text (cadr pair)) "\"")
          ""))

    (import sxml-accessors)

    (sxml-match sxml
      ((verbatim ,string) (guard (string? string)) string)
      ((*COMMENT* ,string)
       (guard (and (string? string)
                   (not (string-contains string "--"))))
       (if *sxml-output-comments?*
           (string-append "<!--" string "-->")
           ""))
      ((& ,symbol)
       (guard (symbol? symbol))
       (string-append "&" (symbol->string symbol) ";"))
      (,elt
       (guard (xml-element? elt))
       (string-append
        "<"
        ;; tag name
        (symbol->string (car elt))
        ;; attribute list
        (fold-right string-append ""
                    (map attr
                         (xml-element-attributes elt)))
        ;; tag content, properly terminated
        (let ((c (xml-element-contents elt)))
          (if (null? c)
              " />"
              (string-append
               ">"
               (fold-right string-append "" (map sxml->string c))
               "</"
               (symbol->string (car elt))
               ">")))))
      (,string (guard (string? string)) (escape-string string))
      (,number (guard (number? number)) (number->string number))
      (,symbol (guard (symbol? symbol))
               (string-append "&" (symbol->string symbol) ";"))
      (#f "")
      (,else (error (string-append
                     "siscweb/html: Invalid element : \""
                     (with-output-to-string
                       (lambda ()
                         (display else)))
                     "\"")))))
  )
@


1.1.2.2
log
@renamed verbatim element -> *VERBATIM*
@
text
@d82 1
a82 1
      ((*VERBATIM* ,string) (guard (string? string)) string)
@


1.1.2.3
log
@added *TOP* element (ignored)
@
text
@a81 2
      ((*TOP* ,[x])
       x)
@


