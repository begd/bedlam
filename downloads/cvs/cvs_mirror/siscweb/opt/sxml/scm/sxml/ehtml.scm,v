head	1.3;
access;
symbols
	rel-0-6-dev:1.3.0.4
	rel-0-5-fix:1.3.0.2
	rel-0-5:1.3
	rel-0-5-dev-safe-frames:1.2.4.1.0.2
	Root_rel-0-5-dev-safe-frames:1.2.4.1
	rel-0-4-fix-0:1.2
	rel-0-5-dev:1.2.0.4
	rel-0-4-fix:1.2.0.2
	rel-0-3-fix-3:1.1.4.3
	rel-0-3-fix-2:1.1.4.2
	rel-0-3-fix:1.1.0.4
	rel-0-4-dev-sisc-1-11:1.1.2.2
	rel-0-4-dev:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2007.04.12.03.51.18;	author acolomba;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.03.01.42.23;	author acolomba;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2006.01.15.23.14.12;	author acolomba;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2006.01.15.23.14.12;	author acolomba;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.17.05.04.52;	author acolomba;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.02.02.02.56.13;	author acolomba;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.02.05.16.41.06;	author acolomba;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2006.02.05.20.12.05;	author acolomba;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2006.02.22.04.26.05;	author acolomba;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2006.03.28.23.48.19;	author acolomba;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2006.04.13.00.33.46;	author acolomba;	state Exp;
branches;
next	1.1.2.9;

1.1.2.9
date	2006.04.17.23.44.17;	author acolomba;	state Exp;
branches;
next	;

1.1.4.1
date	2006.01.15.23.14.12;	author acolomba;	state dead;
branches;
next	1.1.4.2;

1.1.4.2
date	2006.02.25.17.12.02;	author acolomba;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2006.04.15.15.55.24;	author acolomba;	state Exp;
branches;
next	1.1.4.4;

1.1.4.4
date	2006.04.17.23.51.14;	author acolomba;	state Exp;
branches;
next	;

1.2.4.1
date	2007.03.03.03.09.45;	author acolomba;	state Exp;
branches;
next	;


desc
@@


1.3
log
@merged from rel-0-5-dev
@
text
@;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005-2006
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.

(require-library 'sisc/libs/srfi/srfi-16) ; syntax for procedures of variable arity

(require-library 'siscweb/bindings)
(require-library 'siscweb/forward)
(require-library 'siscweb/graphviz)
(require-library 'siscweb/request)
(require-library 'siscweb/response)
(require-library 'sxml/sxml-match)
(require-library 'util/misc)

(module sxml/ehtml
  (ehtml->html)

  (import string-io)

  (import srfi-16)

  (import siscweb/bindings)
  (import siscweb/forward)
  (import siscweb/graphviz)
  (import siscweb/request)
  (import siscweb/response)
  (import sxml-matcher)
  (import util/misc)


  (define (ehtml->html html resume-k)
    (define (make-graphviz layout id fmt attrs graph)
      (define (make-graph-dispatcher)
        (forward/store!
         (lambda (request)
           (set! request #f)
           (send-graphviz/back layout fmt graph))))

      (define (make-image-map)
        (with/fc
         (lambda (m e) (display m))
         (lambda ()
           `(div
             (*VERBATIM*
              ,(let ((str-out (open-output-string)))
                 (graphviz/write layout "cmapx" graph str-out)
                 (get-output-string str-out)))
             (img (@@ (src ,(make-graph-dispatcher))
                     (border 0)
                     (type ,(graphviz/get-mime-type fmt))
                     (usemap ,(string-append "#" id)) . ,attrs))))))

      (define (make-object)
        `(object (@@ (data ,(make-graph-dispatcher)) (type ,(graphviz/get-mime-type fmt)) . ,attrs)))

      (if (member fmt '("gif" "jpg" "png"))
          (make-image-map)
          (make-object)))

    (define make-context-url
      (case-lambda
        ((url)
         (response/encode-url (string-append (request/get-context-path) url)))
        ((url bindings)
         (if (null? bindings)
             (make-context-url url)
             (forward/store! url bindings)))
        ((url bindings anchor)
         (make-context-url (make-anchor-url url anchor)))))

    (define (make-anchor-url url anchor)
      (if anchor (format "~a#~a" url anchor) url))

    (define (T html)
      (import sxml-accessors)

      (define (xml-element? elt)
        (and (pair? elt)
             (symbol? (car elt))))

      (sxml-match html
        ;; @@href-p [@@bindings]
        ((a (@@ (href-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(a (@@ (href ,(make-anchor-url (forward/store! proc bindings) anchor)) . ,rest)
             ,x ...))
        ((link (@@ (href-p ,proc) (bindings (,bindings ())) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(link (@@ (href ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((form (@@ (action-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(form (@@ (action ,(make-anchor-url (forward/store! proc bindings) anchor)) . ,rest)
             ,x ...))
        ((img (@@ (src-p ,proc) (bindings (,bindings ())) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(img (@@ (src ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((script (@@ (src-p ,proc) (bindings (,bindings ())) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(script (@@ (src ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((object (@@ (data-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(object (@@ (data ,(make-anchor-url (forward/store! proc bindings))) . ,rest)
             ,x ...))
        ((iframe (@@ (src-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(iframe (@@ (src ,(make-anchor-url (forward/store! proc bindings))) . ,rest)
             ,x ...))
        ((node (@@ (href-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(node (@@ (href ,(make-anchor-url (forward/store! proc bindings) anchor)) . ,rest)
             ,x ...))
        ((edge (@@ (href-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(edge (@@ (href ,(make-anchor-url (forward/store! proc bindings) anchor)) . ,rest)
             ,x ...))
        ((record (@@ (href-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(record (@@ (href ,(make-anchor-url (forward/store! proc bindings) anchor)) . ,rest)
             ,x ...))


        ;; @@bindings
        ((a (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(a (@@ (href ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
             ,x ...))
        ((link (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(link (@@ (href ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((form (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(form (@@ (action ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
             ,x ...))
        ((img (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(img (@@ (src ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((script (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(script (@@ (src ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((object (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(object (@@ (data ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
             ,x ...))
        ((iframe (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(iframe (@@ (src ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
             ,x ...))
        ((node (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(node (@@ (href ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
             ,x ...))
        ((edge (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(edge (@@ (href ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
             ,x ...))
        ((record (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(record (@@ (href ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
             ,x ...))


        ;; @@href-e
        ((a (@@ (href-e ,url) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         (guard (string? url))
         `(a (@@ (href ,(response/encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))
        ((link (@@ (href-e ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(link (@@ (href ,(response/encode-url url)) . ,rest) ,x ...))
        ((form (@@ (action-e ,url) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         (guard (string? url))
         `(form (@@ (action ,(response/encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))
        ((img (@@ (src-e ,url) . ,rest))
         (guard (string? url))
         `(img (@@ (src ,(response/encode-url url)) . ,rest)))
        ((script (@@ (src-e ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(script (@@ (src ,(response/encode-url url)) . ,rest) ,x ...))
        ((object (@@ (data-e ,url) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         (guard (string? url))
         `(object (@@ (data ,(response/encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))
        ((iframe (@@ (src-e ,url) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         (guard (string? url))
         `(iframe (@@ (src ,(response/encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))
        ((node (@@ (href-e ,url) (anchor (,anchor #f)) . ,rest))
         (guard (string? url))
         `(node (@@ (href ,(response/encode-url (make-anchor-url url anchor))) . ,rest)))
        ((edge (@@ (href-e ,url) (anchor (,anchor #f)) . ,rest))
         (guard (string? url))
         `(edge (@@ (href ,(response/encode-url (make-anchor-url url anchor))) . ,rest)))
        ((record (@@ (href-e ,url) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         (guard (string? url))
         `(record (@@ (href ,(response/encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))


        ;; @@href-c [@@bindings]
        ((a (@@ (href-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         (guard (string? url))
         `(a (@@ (href ,(make-context-url url bindings anchor)) . ,rest) ,x ...))
        ((link (@@ (href-c ,url) (bindings (,bindings ())) . ,rest) ,[x] ...)
         (guard (string? url))
         `(link (@@ (href ,(make-context-url url bindings)) . ,rest) ,x ...))
        ((form (@@ (action-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         (guard (string? url))
         `(form (@@ (action ,(make-context-url url bindings anchor)) . ,rest) ,x ...))
        ((img (@@ (src-c ,url) (bindings (,bindings ())) . ,rest))
         (guard (string? url))
         `(img (@@ (src ,(make-context-url url bindings)) . ,rest)))
        ((script (@@ (src-c ,url) (bindings (,bindings ())) . ,rest) ,[x] ...)
         (guard (string? url))
         `(script (@@ (src ,(make-context-url url bindings)) . ,rest) ,x ...))
        ((object (@@ (data-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         (guard (string? url))
         `(object (@@ (data ,(make-context-url url bindings anchor)) . ,rest) ,x ...))
        ((iframe (@@ (src-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         (guard (string? url))
         `(iframe (@@ (src ,(make-context-url url bindings anchor)) . ,rest) ,x ...))
        ((node (@@ (href-c ,url) (bindings (,bindings ()))  (anchor (,anchor #f)) . ,rest))
         (guard (string? url))
         `(node (@@ (href ,(make-context-url url bindings anchor)) . ,rest)))
        ((edge (@@ (href-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest))
         (guard (string? url))
         `(edge (@@ (href ,(make-context-url url bindings anchor)) . ,rest)))
        ((record (@@ (href-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         (guard (string? url))
         `(record (@@ (href ,(make-context-url url bindings anchor)) . ,rest) ,x ...))


        ;; @@type=graphviz [@@layout] [@@format] [@@alt-format]
        ((object (@@ (type "graphviz") (layout (,layout "dot")) (format (,fmt "svg")) (alt-format (,alt-fmt #f)) . ,obj-attrs)
          (graph (@@ (id ,id) . ,attrs) ,[x] ...))
         (make-graphviz layout id fmt obj-attrs `(graph (@@ (id ,id) . ,attrs) ,x ...)))


        ;; everything that looks like an element, recur over
        (,elt (guard (xml-element? elt))
              (cons (xml-element-tag elt)
                    (let ((attributes (xml-element-attributes elt))
                          (contents (map T (xml-element-contents elt))))
                      (if (not (null? attributes))
                          (cons (cons '|@@| attributes) contents)
                          contents))))


        ;; strings and symbols are untouched
        (,s (guard (or (string? s) (symbol? s))) s)


        ;; #f is converted to the empty string
        (,false (guard (not false)) "")


        ;; anything else is pretty-printed
        (,any (with-output-to-string (lambda () (pretty-print any))))))

    (T html))
    )@


1.2
log
@merged from rel-0-4-dev
@
text
@a107 7
        ((form (@@ (action-p ,proc) (update ,id) (options (,options ())). ,rest) ,[x] ...)
         (error "sxml/ehtml: (form (@@ (update ...) ...) ...) is now deprecated. Simply use plain Prototype.js + forward/store! for the same result"))

        ((a (@@ (href-p ,proc) (update ,id) (options (,options ())) . ,rest) ,[x] ...)
         (error "sxml/ehtml: (form (@@ (update ...) ...) ...) is now deprecated. Simply use plain Prototype.js + forward/store! for the same result"))


@


1.2.4.1
log
@removed deprecated form @@href-p + @@update
@
text
@d108 7
@


1.1
log
@file ehtml.scm was initially added on branch rel-0-4-dev.
@
text
@d1 285
@


1.1.4.1
log
@file ehtml.scm was added on branch rel-0-3-fix on 2006-02-25 17:12:02 +0000
@
text
@@


1.1.4.2
log
@merged from rel-0-4-dev-sisc-1-11
@
text
@a0 383
;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005-2006
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.


(require-library 'siscweb/bindings)
(require-library 'siscweb/forward)
(require-library 'siscweb/graphviz)
(require-library 'sxml/sxml-match)
(require-library 'util/misc)

(module sxml/ehtml
  (ehtml->html)

  (import s2j)
  (import string-io)

  (import siscweb/bindings)
  (import siscweb/forward)
  (import siscweb/graphviz)
  (import sxml-matcher)
  (import util/misc)

  (define-generic-java-methods
    get-context-path
    (jencode-url |encodeURL|))


  (define (ehtml->html request response html resume-k)
    (define (encode-url url)
      (->string (jencode-url response (->jstring url))))

    (define (make-graphviz layout id fmt attrs graph)
      (define (make-graph-dispatcher)
        (forward/store!
         (lambda (request)
           (set! request #f)
           (send-graphviz/back layout fmt graph))))

      (define (make-image-map)
        (with/fc
         (lambda (m e) #f)
         (lambda ()
           `(div
             (*VERBATIM* ,(with-output-to-string
                            (lambda ()
                              (graphviz/write layout "cmapx" graph))))
             (img (@@ (src ,(make-graph-dispatcher))
                     (border 0)
                     (type ,(graphviz/get-mime-type fmt))
                     (usemap ,(string-append "#" id)) . ,attrs))))))

      (define (make-object)
        `(object (@@ (data ,(make-graph-dispatcher)) (type ,(graphviz/get-mime-type fmt)) . ,attrs)))

      (if (member fmt '("gif" "jpg" "png"))
          (make-image-map)
          (make-object)))

    (define (make-context-url url)
      (encode-url (string-append (->string (get-context-path request))
                     url)))

    (define (T html)
      (import sxml-accessors)

      (define (xml-element? elt)
        (and (pair? elt)
             (symbol? (car elt))))

      (sxml-match html
        ;; href-p + bindings
        ((a (@@ (href-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(a (@@ (href ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((link (@@ (href-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(link (@@ (href ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((form (@@ (action-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(form (@@ (action ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((img (@@ (src-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(img (@@ (src ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((script (@@ (src-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(script (@@ (src ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((object (@@ (data-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(object (@@ (data ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((iframe (@@ (src-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(iframe (@@ (src ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((node (@@ (href-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(node (@@ (href ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((edge (@@ (href-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(edge (@@ (href ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((record (@@ (href-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(record (@@ (href ,(forward/store! proc bindings)) . ,rest)
             ,x ...))

        ;; href-c + bindings
        ((a (@@ (href-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(a (@@ (href ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((link (@@ (href-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(link (@@ (href ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((form (@@ (action-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(form (@@ (action ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((img (@@ (src-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(img (@@ (src ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((script (@@ (src-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(script (@@ (src ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((object (@@ (data-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(object (@@ (data ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((iframe (@@ (src-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(iframe (@@ (src ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((node (@@ (href-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(node (@@ (href ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((edge (@@ (href-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(edge (@@ (href ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((record (@@ (href-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(record (@@ (href ,(forward/store! url bindings)) . ,rest)
             ,x ...))


        ;; href-p + update + options (ajax)
        ((form (@@ (href-p ,proc) (update ,id) (options ,options). ,rest) ,[x] ...)
         (guard (and (string? id) (procedure? proc) (list? options)))
         `(form (@@ (onsubmit
                    ,(string-append
                      "new Ajax.Updater('" id "', "
                      "'" (forward/store! proc) "', "
                      "{" (alist->lstring options ": " ", ") "});"
                      "return false;"))
                   . ,rest) ,x ...))
        ((a (@@ (href-p ,proc) (update ,id) (options ,options) . ,rest) ,[x] ...)
         (guard (and (string? id) (procedure? proc) (list? options)))
         `(a (@@ (href "#")
                (onclick
                 ,(string-append
                   "new Ajax.Updater('" id "', "
                   "'" (forward/store! proc) "', "
                   "{" (alist->lstring options ": " ", ") "});"
                   "return false;"))
                . ,rest) ,x ...))

        ;; href-p + update (ajax)
        ((form (@@ (href-p ,proc) (update ,id) . ,rest) ,[x] ...)
         (guard (and (string? id) (procedure? proc)))
         `(form (@@ (onsubmit
                    ,(string-append
                      "new Ajax.Updater('" id "', "
                      "'" (forward/store! proc) "', {});"
                      "return false;"))
                   . ,rest) ,x ...))
        ((a (@@ (href-p ,proc) (update ,id) . ,rest) ,[x] ...)
         (guard (and (string? id) (procedure? proc)))
         `(a (@@ (href "#")
                (onclick
                 ,(string-append
                   "new Ajax.Updater('" id "', "
                   "'" (forward/store! proc) "', {});"
                   "return false;"))
                . ,rest) ,x ...))


        ;; bindings to resume-k
        ((a (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(a (@@ (href ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((link (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(link (@@ (href ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((form (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(form (@@ (action ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((img (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(img (@@ (src ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((script (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(script (@@ (src ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((object (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(object (@@ (data ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((iframe (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(iframe (@@ (src ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((node (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(node (@@ (href ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((edge (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(edge (@@ (href ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((record (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(record (@@ (href ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))

        ;; href-p
        ((a (@@ (href-p ,proc) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(a (@@ (href ,(forward/store! proc)) . ,rest)
             ,x ...))
        ((link (@@ (href-p ,proc) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(link (@@ (href ,(forward/store! proc)) . ,rest)
             ,x ...))
        ((form (@@ (action-p ,proc) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(form (@@ (action ,(forward/store! proc)) . ,rest)
             ,x ...))
        ((img (@@ (src-p ,proc) . ,rest))
         (guard (procedure? proc))
         `(img (@@ (src ,(forward/store! proc)) . ,rest)))
        ((script (@@ (src-p ,proc) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(script (@@ (src ,(forward/store! proc)) . ,rest)
             ,x ...))
        ((object (@@ (data-p ,proc) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(object (@@ (data ,(forward/store! proc)) . ,rest)
             ,x ...))
        ((iframe (@@ (src-p ,proc) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(iframe (@@ (src ,(forward/store! proc)) . ,rest)
             ,x ...))
        ((node (@@ (href-p ,proc) . ,rest))
         (guard (procedure? proc))
         `(node (@@ (href ,(forward/store! proc)) . ,rest)))
        ((edge (@@ (href-p ,proc) . ,rest))
         (guard (procedure? proc))
         `(edge (@@ (href ,(forward/store! proc)) . ,rest)))
        ((record (@@ (href-p ,proc) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(record (@@ (href ,(forward/store! proc)) . ,rest)
             ,x ...))

        ;; href-e
        ((a (@@ (href-e ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(a (@@ (href ,(encode-url url)) . ,rest) ,x ...))
        ((link (@@ (href-e ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(link (@@ (href ,(encode-url url)) . ,rest) ,x ...))
        ((form (@@ (action-e ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(form (@@ (action ,(encode-url url)) . ,rest) ,x ...))
        ((img (@@ (src-e ,url) . ,rest))
         (guard (string? url))
         `(img (@@ (src ,(encode-url url)) . ,rest)))
        ((script (@@ (src-e ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(script (@@ (src ,(encode-url url)) . ,rest) ,x ...))
        ((object (@@ (data-e ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(object (@@ (data ,(encode-url url)) . ,rest) ,x ...))
        ((iframe (@@ (src-e ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(iframe (@@ (src ,(encode-url url)) . ,rest) ,x ...))
        ((node (@@ (href-e ,url) . ,rest))
         (guard (string? url))
         `(node (@@ (href ,(encode-url url)) . ,rest)))
        ((edge (@@ (href-e ,url) . ,rest))
         (guard (string? url))
         `(edge (@@ (href ,(encode-url url)) . ,rest)))
        ((record (@@ (href-e ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(record (@@ (href ,(encode-url url)) . ,rest) ,x ...))

        ;; href-c
        ((a (@@ (href-c ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(a (@@ (href ,(make-context-url url)) . ,rest) ,x ...))
        ((link (@@ (href-c ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(link (@@ (href ,(make-context-url url)) . ,rest) ,x ...))
        ((form (@@ (action-c ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(form (@@ (action ,(make-context-url url)) . ,rest) ,x ...))
        ((img (@@ (src-c ,url) . ,rest))
         (guard (string? url))
         `(img (@@ (src ,(make-context-url url)) . ,rest)))
        ((script (@@ (src-c ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(script (@@ (src ,(make-context-url url)) . ,rest) ,x ...))
        ((object (@@ (data-c ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(object (@@ (data ,(make-context-url url)) . ,rest) ,x ...))
        ((iframe (@@ (src-c ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(iframe (@@ (src ,(make-context-url url)) . ,rest) ,x ...))
        ((node (@@ (href-c ,url) . ,rest))
         (guard (string? url))
         `(node (@@ (href ,(make-context-url url)) . ,rest)))
        ((edge (@@ (href-c ,url) . ,rest))
         (guard (string? url))
         `(edge (@@ (href ,(make-context-url url)) . ,rest)))
        ((record (@@ (href-c ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(record (@@ (href ,(make-context-url url)) . ,rest) ,x ...))

        ;; graphviz object
        ((object (@@ (type "graphviz") (layout ,layout) (format ,fmt) . ,obj-attrs) (graph (@@ (id ,id) . ,attrs) ,[x] ...))
         (make-graphviz layout id fmt obj-attrs `(graph (@@ (id ,id) . ,attrs) ,x ...)))


        ;; everything that looks like an element, recur over
        (,elt (guard (xml-element? elt))
              (cons (xml-element-tag elt)
                    (let ((attributes (xml-element-attributes elt))
                          (contents (map T (xml-element-contents elt))))
                      (if (not (null? attributes))
                          (cons (cons '|@@| attributes) contents)
                          contents))))

        ;; numbers, strings, symbols will be left untouched
        (,nss (guard (or (string? nss) (symbol? nss) (number? nss))) nss)

        ;; #f is converted to the empty string
        (,false (guard (not false)) "")

        ;; anything else is pretty-printed
        (,any (with-output-to-string (lambda () (pretty-print any))))))

    (T html))
)@


1.1.4.3
log
@merged from rel-0-4-dev
@
text
@a30 1
(require-library 'sisc/libs/srfi/srfi-16) ; syntax for procedures of variable arity
a34 2
(require-library 'siscweb/request)
(require-library 'siscweb/response)
d41 1
a43 2
  (import srfi-16)

a46 2
  (import siscweb/request)
  (import siscweb/response)
d50 8
a58 1
  (define (ehtml->html html resume-k)
d68 1
a68 1
         (lambda (m e) (display m))
d71 3
a73 4
             (*VERBATIM*
              ,(let ((str-out (open-output-string)))
                 (graphviz/write layout "cmapx" graph str-out)
                 (get-output-string str-out)))
d86 3
a88 13
    (define make-context-url
      (case-lambda
        ((url)
         (response/encode-url (string-append (request/get-context-path) url)))
        ((url bindings)
         (if (null? bindings)
             (make-context-url url)
             (forward/store! url bindings)))
        ((url bindings anchor)
         (make-context-url (make-anchor-url url anchor)))))

    (define (make-anchor-url url anchor)
      (if anchor (format "~a#~a" url anchor) url))
d98 2
a99 9
        ((form (@@ (action-p ,proc) (update ,id) (options (,options ())). ,rest) ,[x] ...)
         (error "sxml/ehtml: (form (@@ (update ...) ...) ...) is now deprecated. Simply use plain Prototype.js + forward/store! for the same result"))

        ((a (@@ (href-p ,proc) (update ,id) (options (,options ())) . ,rest) ,[x] ...)
         (error "sxml/ehtml: (form (@@ (update ...) ...) ...) is now deprecated. Simply use plain Prototype.js + forward/store! for the same result"))


        ;; @@href-p [@@bindings]
        ((a (@@ (href-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d101 1
a101 1
         `(a (@@ (href ,(make-anchor-url (forward/store! proc bindings) anchor)) . ,rest)
d103 1
a103 1
        ((link (@@ (href-p ,proc) (bindings (,bindings ())) . ,rest) ,[x] ...)
d107 1
a107 1
        ((form (@@ (action-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d109 1
a109 1
         `(form (@@ (action ,(make-anchor-url (forward/store! proc bindings) anchor)) . ,rest)
d111 1
a111 1
        ((img (@@ (src-p ,proc) (bindings (,bindings ())) . ,rest) ,[x] ...)
d115 1
a115 1
        ((script (@@ (src-p ,proc) (bindings (,bindings ())) . ,rest) ,[x] ...)
d119 1
a119 1
        ((object (@@ (data-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d121 1
a121 1
         `(object (@@ (data ,(make-anchor-url (forward/store! proc bindings))) . ,rest)
d123 1
a123 1
        ((iframe (@@ (src-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d125 1
a125 1
         `(iframe (@@ (src ,(make-anchor-url (forward/store! proc bindings))) . ,rest)
d127 1
a127 1
        ((node (@@ (href-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d129 1
a129 1
         `(node (@@ (href ,(make-anchor-url (forward/store! proc bindings) anchor)) . ,rest)
d131 1
a131 1
        ((edge (@@ (href-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d133 1
a133 1
         `(edge (@@ (href ,(make-anchor-url (forward/store! proc bindings) anchor)) . ,rest)
d135 1
a135 1
        ((record (@@ (href-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d137 1
a137 1
         `(record (@@ (href ,(make-anchor-url (forward/store! proc bindings) anchor)) . ,rest)
d140 41
d182 45
a226 3
        ;; @@bindings
        ((a (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(a (@@ (href ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
d231 2
a232 2
        ((form (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(form (@@ (action ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
d240 2
a241 2
        ((object (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(object (@@ (data ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
d243 2
a244 2
        ((iframe (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(iframe (@@ (src ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
d246 2
a247 2
        ((node (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(node (@@ (href ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
d249 2
a250 2
        ((edge (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(edge (@@ (href ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
d252 2
a253 2
        ((record (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(record (@@ (href ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
d256 38
d295 2
a296 2
        ;; @@href-e
        ((a (@@ (href-e ,url) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d298 1
a298 1
         `(a (@@ (href ,(response/encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))
d301 2
a302 2
         `(link (@@ (href ,(response/encode-url url)) . ,rest) ,x ...))
        ((form (@@ (action-e ,url) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d304 1
a304 1
         `(form (@@ (action ,(response/encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))
d307 1
a307 1
         `(img (@@ (src ,(response/encode-url url)) . ,rest)))
d310 2
a311 2
         `(script (@@ (src ,(response/encode-url url)) . ,rest) ,x ...))
        ((object (@@ (data-e ,url) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d313 2
a314 2
         `(object (@@ (data ,(response/encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))
        ((iframe (@@ (src-e ,url) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d316 2
a317 2
         `(iframe (@@ (src ,(response/encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))
        ((node (@@ (href-e ,url) (anchor (,anchor #f)) . ,rest))
d319 2
a320 2
         `(node (@@ (href ,(response/encode-url (make-anchor-url url anchor))) . ,rest)))
        ((edge (@@ (href-e ,url) (anchor (,anchor #f)) . ,rest))
d322 2
a323 2
         `(edge (@@ (href ,(response/encode-url (make-anchor-url url anchor))) . ,rest)))
        ((record (@@ (href-e ,url) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d325 1
a325 2
         `(record (@@ (href ,(response/encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))

d327 2
a328 2
        ;; @@href-c [@@bindings]
        ((a (@@ (href-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d330 2
a331 2
         `(a (@@ (href ,(make-context-url url bindings anchor)) . ,rest) ,x ...))
        ((link (@@ (href-c ,url) (bindings (,bindings ())) . ,rest) ,[x] ...)
d333 2
a334 2
         `(link (@@ (href ,(make-context-url url bindings)) . ,rest) ,x ...))
        ((form (@@ (action-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d336 2
a337 2
         `(form (@@ (action ,(make-context-url url bindings anchor)) . ,rest) ,x ...))
        ((img (@@ (src-c ,url) (bindings (,bindings ())) . ,rest))
d339 2
a340 2
         `(img (@@ (src ,(make-context-url url bindings)) . ,rest)))
        ((script (@@ (src-c ,url) (bindings (,bindings ())) . ,rest) ,[x] ...)
d342 2
a343 2
         `(script (@@ (src ,(make-context-url url bindings)) . ,rest) ,x ...))
        ((object (@@ (data-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d345 2
a346 2
         `(object (@@ (data ,(make-context-url url bindings anchor)) . ,rest) ,x ...))
        ((iframe (@@ (src-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d348 2
a349 2
         `(iframe (@@ (src ,(make-context-url url bindings anchor)) . ,rest) ,x ...))
        ((node (@@ (href-c ,url) (bindings (,bindings ()))  (anchor (,anchor #f)) . ,rest))
d351 2
a352 2
         `(node (@@ (href ,(make-context-url url bindings anchor)) . ,rest)))
        ((edge (@@ (href-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest))
d354 2
a355 2
         `(edge (@@ (href ,(make-context-url url bindings anchor)) . ,rest)))
        ((record (@@ (href-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d357 1
a357 2
         `(record (@@ (href ,(make-context-url url bindings anchor)) . ,rest) ,x ...))

d359 2
a360 3
        ;; @@type=graphviz [@@layout] [@@format] [@@alt-format]
        ((object (@@ (type "graphviz") (layout (,layout "dot")) (format (,fmt "svg")) (alt-format (,alt-fmt #f)) . ,obj-attrs)
          (graph (@@ (id ,id) . ,attrs) ,[x] ...))
d373 2
a374 4

        ;; strings will be left untouched
        (,str (guard (string? str)) str)

a378 1

d383 1
a383 1
    )@


1.1.4.4
log
@symbols are now also left untouched (was breaking entities in
downstream sxml -> xml conversion)
@
text
@d273 2
a274 2
        ;; strings and symbols are untouched
        (,s (guard (or (string? s) (symbol? s))) s)
@


1.1.2.1
log
@initial import
@
text
@a0 379
;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005-2006
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.


(require-library 'siscweb/bindings)
(require-library 'siscweb/forward)
(require-library 'siscweb/graphviz)
(require-library 'sxml/sxml-match)
(require-library 'util/misc)

(module sxml/ehtml
  (ehtml->html)

  (import s2j)
  (import string-io)

  (import siscweb/bindings)
  (import siscweb/forward)
  (import siscweb/graphviz)
  (import sxml-matcher)
  (import util/misc)

  (define-generic-java-methods
    get-context-path
    (jencode-url |encodeURL|))


  (define (ehtml->html request response html resume-k)
    (define (encode-url url)
      (->string (jencode-url response (->jstring url))))

    (define (make-graphviz layout id fmt attrs graph)
      (define (make-graph-dispatcher)
        (forward/store!
         (lambda (request)
           (set! request #f)
           (send-graphviz/back layout fmt graph))))

      (define (make-image-map)
        (with/fc
         (lambda (m e) #f)
         (lambda ()
           `(div
             (*VERBATIM* ,(with-output-to-string
                            (lambda ()
                              (graphviz/write layout "cmapx" graph))))
             (img (@@ (src ,(make-graph-dispatcher))
                     (border 0)
                     (type ,(graphviz/get-mime-type fmt))
                     (usemap ,(string-append "#" id)) . ,attrs))))))

      (define (make-object)
        `(object (@@ (data ,(make-graph-dispatcher)) (type ,(graphviz/get-mime-type fmt)) . ,attrs)))

      (if (member fmt '("gif" "jpg" "png"))
          (make-image-map)
          (make-object)))

    (define (make-context-url url)
      (encode-url (string-append (->string (get-context-path request))
                     url)))

    (define (T html)
      (import sxml-accessors)

      (define (xml-element? elt)
        (and (pair? elt)
             (symbol? (car elt))))

      (sxml-match html
        ;; href-p + bindings
        ((a (@@ (href-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(a (@@ (href ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((link (@@ (href-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(link (@@ (href ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((form (@@ (action-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(form (@@ (action ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((img (@@ (src-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(img (@@ (src ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((script (@@ (src-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(script (@@ (src ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((object (@@ (data-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(object (@@ (data ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((iframe (@@ (src-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(iframe (@@ (src ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((node (@@ (href-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(node (@@ (href ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((edge (@@ (href-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(edge (@@ (href ,(forward/store! proc bindings)) . ,rest)
             ,x ...))
        ((record (@@ (href-p ,proc) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(record (@@ (href ,(forward/store! proc bindings)) . ,rest)
             ,x ...))

        ;; href-c + bindings
        ((a (@@ (href-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(a (@@ (href ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((link (@@ (href-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(link (@@ (href ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((form (@@ (action-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(form (@@ (action ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((img (@@ (src-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(img (@@ (src ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((script (@@ (src-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(script (@@ (src ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((object (@@ (data-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(object (@@ (data ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((iframe (@@ (src-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(iframe (@@ (src ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((node (@@ (href-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(node (@@ (href ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((edge (@@ (href-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(edge (@@ (href ,(forward/store! url bindings)) . ,rest)
             ,x ...))
        ((record (@@ (href-c ,url) (bindings ,bindings) . ,rest) ,[x] ...)
         (guard (string? url))
         `(record (@@ (href ,(forward/store! url bindings)) . ,rest)
             ,x ...))


        ;; href-p + update + options (ajax)
        ((form (@@ (href-p ,proc) (update ,id) (options ,options). ,rest) ,[x] ...)
         (guard (and (string? id) (procedure? proc) (list? options)))
         `(form (@@ (onsubmit
                    ,(string-append
                      "new Ajax.Updater('" id "', "
                      "'" (forward/store! proc) "', "
                      "{" (alist->lstring options ": " ", ") "});"
                      "return false;"))
                   . ,rest) ,x ...))
        ((a (@@ (href-p ,proc) (update ,id) (options ,options) . ,rest) ,[x] ...)
         (guard (and (string? id) (procedure? proc) (list? options)))
         `(a (@@ (href "#")
                (onclick
                 ,(string-append
                   "new Ajax.Updater('" id "', "
                   "'" (forward/store! proc) "', "
                   "{" (alist->lstring options ": " ", ") "});"
                   "return false;"))
                . ,rest) ,x ...))

        ;; href-p + update (ajax)
        ((form (@@ (href-p ,proc) (update ,id) . ,rest) ,[x] ...)
         (guard (and (string? id) (procedure? proc)))
         `(form (@@ (onsubmit
                    ,(string-append
                      "new Ajax.Updater('" id "', "
                      "'" (forward/store! proc) "', {});"
                      "return false;"))
                   . ,rest) ,x ...))
        ((a (@@ (href-p ,proc) (update ,id) . ,rest) ,[x] ...)
         (guard (and (string? id) (procedure? proc)))
         `(a (@@ (href "#")
                (onclick
                 ,(string-append
                   "new Ajax.Updater('" id "', "
                   "'" (forward/store! proc) "', {});"
                   "return false;"))
                . ,rest) ,x ...))


        ;; bindings to resume-k
        ((a (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(a (@@ (href ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((link (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(link (@@ (href ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((form (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(form (@@ (action ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((img (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(img (@@ (src ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((script (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(script (@@ (src ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((object (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(object (@@ (data ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((iframe (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(iframe (@@ (src ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((node (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(node (@@ (href ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((edge (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(edge (@@ (href ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))
        ((record (@@ (bindings ,bindings) . ,rest) ,[x] ...)
         `(record (@@ (href ,(forward/store! resume-k bindings)) . ,rest)
             ,x ...))

        ;; href-p
        ((a (@@ (href-p ,proc) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(a (@@ (href ,(forward/store! proc)) . ,rest)
             ,x ...))
        ((link (@@ (href-p ,proc) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(link (@@ (href ,(forward/store! proc)) . ,rest)
             ,x ...))
        ((form (@@ (action-p ,proc) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(form (@@ (action ,(forward/store! proc)) . ,rest)
             ,x ...))
        ((img (@@ (src-p ,proc) . ,rest))
         (guard (procedure? proc))
         `(img (@@ (src ,(forward/store! proc)) . ,rest)))
        ((script (@@ (src-p ,proc) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(script (@@ (src ,(forward/store! proc)) . ,rest)
             ,x ...))
        ((object (@@ (data-p ,proc) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(object (@@ (data ,(forward/store! proc)) . ,rest)
             ,x ...))
        ((iframe (@@ (src-p ,proc) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(iframe (@@ (src ,(forward/store! proc)) . ,rest)
             ,x ...))
        ((node (@@ (href-p ,proc) . ,rest))
         (guard (procedure? proc))
         `(node (@@ (href ,(forward/store! proc)) . ,rest)))
        ((edge (@@ (href-p ,proc) . ,rest))
         (guard (procedure? proc))
         `(edge (@@ (href ,(forward/store! proc)) . ,rest)))
        ((record (@@ (href-p ,proc) . ,rest) ,[x] ...)
         (guard (procedure? proc))
         `(record (@@ (href ,(forward/store! proc)) . ,rest)
             ,x ...))

        ;; href-e
        ((a (@@ (href-e ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(a (@@ (href ,(encode-url url)) . ,rest) ,x ...))
        ((link (@@ (href-e ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(link (@@ (href ,(encode-url url)) . ,rest) ,x ...))
        ((form (@@ (action-e ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(form (@@ (action ,(encode-url url)) . ,rest) ,x ...))
        ((img (@@ (src-e ,url) . ,rest))
         (guard (string? url))
         `(img (@@ (src ,(encode-url url)) . ,rest)))
        ((script (@@ (src-e ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(script (@@ (src ,(encode-url url)) . ,rest) ,x ...))
        ((object (@@ (data-e ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(object (@@ (data ,(encode-url url)) . ,rest) ,x ...))
        ((iframe (@@ (src-e ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(iframe (@@ (src ,(encode-url url)) . ,rest) ,x ...))
        ((node (@@ (href-e ,url) . ,rest))
         (guard (string? url))
         `(node (@@ (href ,(encode-url url)) . ,rest)))
        ((edge (@@ (href-e ,url) . ,rest))
         (guard (string? url))
         `(edge (@@ (href ,(encode-url url)) . ,rest)))
        ((record (@@ (href-e ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(record (@@ (href ,(encode-url url)) . ,rest) ,x ...))

        ;; href-c
        ((a (@@ (href-c ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(a (@@ (href ,(make-context-url url)) . ,rest) ,x ...))
        ((link (@@ (href-c ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(link (@@ (href ,(make-context-url url)) . ,rest) ,x ...))
        ((form (@@ (action-c ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(form (@@ (action ,(make-context-url url)) . ,rest) ,x ...))
        ((img (@@ (src-c ,url) . ,rest))
         (guard (string? url))
         `(img (@@ (src ,(make-context-url url)) . ,rest)))
        ((script (@@ (src-c ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(script (@@ (src ,(make-context-url url)) . ,rest) ,x ...))
        ((object (@@ (data-c ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(object (@@ (data ,(make-context-url url)) . ,rest) ,x ...))
        ((iframe (@@ (src-c ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(iframe (@@ (src ,(make-context-url url)) . ,rest) ,x ...))
        ((node (@@ (href-c ,url) . ,rest))
         (guard (string? url))
         `(node (@@ (href ,(make-context-url url)) . ,rest)))
        ((edge (@@ (href-c ,url) . ,rest))
         (guard (string? url))
         `(edge (@@ (href ,(make-context-url url)) . ,rest)))
        ((record (@@ (href-c ,url) . ,rest) ,[x] ...)
         (guard (string? url))
         `(record (@@ (href ,(make-context-url url)) . ,rest) ,x ...))

        ;; graphviz object
        ((object (@@ (type "graphviz") (layout ,layout) (format ,fmt) . ,obj-attrs) (graph (@@ (id ,id) . ,attrs) ,[x] ...))
         (make-graphviz layout id fmt obj-attrs `(graph (@@ (id ,id) . ,attrs) ,x ...)))


        ;; everything that looks like an element, recur over
        (,elt (guard (xml-element? elt))
              `(,(xml-element-tag elt) (@@ ,@@(xml-element-attributes elt))
                ,@@(map T (xml-element-contents elt))))

        ;; numbers, strings, symbols will be left untouched
        (,nss (guard (or (string? nss) (symbol? nss) (number? nss))) nss)

        ;; #f is converted to the empty string
        (,false (guard (not false)) "")

        ;; anything else is pretty-printed
        (,any (with-output-to-string (lambda () (pretty-print any))))))

    (T html))
)@


1.1.2.2
log
@now does not introduce empty attribute lists (were causing problems
with *TOP* etc. elements)
@
text
@d366 2
a367 6
              (cons (xml-element-tag elt)
                    (let ((attributes (xml-element-attributes elt))
                          (contents (map T (xml-element-contents elt))))
                      (if (not (null? attributes))
                          (cons (cons '|@@| attributes) contents)
                          contents))))
@


1.1.2.3
log
@removed redundant rule about numbers and symbols
@
text
@d373 2
a374 2
        ;; strings will be left untouched
        (,str (guard (string? str)) str)
@


1.1.2.4
log
@simplified rules
@
text
@d86 3
a88 6
    (define (make-context-url url bindings)
      (if (null? bindings)
          (encode-url (string-append
                       (->string (get-context-path request))
                       url))
          (forward/store! url bindings)))
d98 2
a99 23
        ;; @@href-p @@update [@@options]
        ((form (@@ (href-p ,proc) (update ,id) (options (,options ())). ,rest) ,[x] ...)
         (guard (and (string? id) (procedure? proc) (list? options)))
         `(form (@@ (onsubmit
                    ,(string-append
                      "new Ajax.Updater('" id "', "
                      "'" (forward/store! proc) "', "
                      "{" (alist->lstring options ": " ", ") "});"
                      "return false;"))
                   . ,rest) ,x ...))
        ((a (@@ (href-p ,proc) (update ,id) (options (,options ())) . ,rest) ,[x] ...)
         (guard (and (string? id) (procedure? proc) (list? options)))
         `(a (@@ (href "#")
                (onclick
                 ,(string-append
                   "new Ajax.Updater('" id "', "
                   "'" (forward/store! proc) "', "
                   "{" (alist->lstring options ": " ", ") "});"
                   "return false;"))
                . ,rest) ,x ...))

        ;; @@href-p [@@bindings]
        ((a (@@ (href-p ,proc) (bindings (,bindings ())) . ,rest) ,[x] ...)
d103 1
a103 1
        ((link (@@ (href-p ,proc) (bindings (,bindings ())) . ,rest) ,[x] ...)
d107 1
a107 1
        ((form (@@ (action-p ,proc) (bindings (,bindings ())) . ,rest) ,[x] ...)
d111 1
a111 1
        ((img (@@ (src-p ,proc) (bindings (,bindings ())) . ,rest) ,[x] ...)
d115 1
a115 1
        ((script (@@ (src-p ,proc) (bindings (,bindings ())) . ,rest) ,[x] ...)
d119 1
a119 1
        ((object (@@ (data-p ,proc) (bindings (,bindings ())) . ,rest) ,[x] ...)
d123 1
a123 1
        ((iframe (@@ (src-p ,proc) (bindings (,bindings ())) . ,rest) ,[x] ...)
d127 1
a127 1
        ((node (@@ (href-p ,proc) (bindings (,bindings ())) . ,rest) ,[x] ...)
d131 1
a131 1
        ((edge (@@ (href-p ,proc) (bindings (,bindings ())) . ,rest) ,[x] ...)
d135 1
a135 1
        ((record (@@ (href-p ,proc) (bindings (,bindings ())) . ,rest) ,[x] ...)
d140 42
d183 42
a224 1
        ;; @@bindings
d256 38
d295 1
a295 1
        ;; @@href-e
d327 2
a328 2
        ;; @@href-c [@@bindings]
        ((a (@@ (href-c ,url) (bindings (,bindings ())) . ,rest) ,[x] ...)
d330 2
a331 2
         `(a (@@ (href ,(make-context-url url bindings)) . ,rest) ,x ...))
        ((link (@@ (href-c ,url) (bindings (,bindings ())) . ,rest) ,[x] ...)
d333 2
a334 2
         `(link (@@ (href ,(make-context-url url bindings)) . ,rest) ,x ...))
        ((form (@@ (action-c ,url) (bindings (,bindings ())) . ,rest) ,[x] ...)
d336 2
a337 2
         `(form (@@ (action ,(make-context-url url bindings)) . ,rest) ,x ...))
        ((img (@@ (src-c ,url) (bindings (,bindings ())) . ,rest))
d339 2
a340 2
         `(img (@@ (src ,(make-context-url url bindings)) . ,rest)))
        ((script (@@ (src-c ,url) (bindings (,bindings ())) . ,rest) ,[x] ...)
d342 2
a343 2
         `(script (@@ (src ,(make-context-url url bindings)) . ,rest) ,x ...))
        ((object (@@ (data-c ,url) (bindings (,bindings ())) . ,rest) ,[x] ...)
d345 2
a346 2
         `(object (@@ (data ,(make-context-url url bindings)) . ,rest) ,x ...))
        ((iframe (@@ (src-c ,url) (bindings (,bindings ())) . ,rest) ,[x] ...)
d348 2
a349 2
         `(iframe (@@ (src ,(make-context-url url bindings)) . ,rest) ,x ...))
        ((node (@@ (href-c ,url) (bindings (,bindings ())) . ,rest))
d351 2
a352 2
         `(node (@@ (href ,(make-context-url url bindings)) . ,rest)))
        ((edge (@@ (href-c ,url) (bindings (,bindings ())) . ,rest))
d354 2
a355 2
         `(edge (@@ (href ,(make-context-url url bindings)) . ,rest)))
        ((record (@@ (href-c ,url) (bindings (,bindings ())) . ,rest) ,[x] ...)
d357 1
a357 1
         `(record (@@ (href ,(make-context-url url bindings)) . ,rest) ,x ...))
d359 2
a360 3
        ;; @@type=graphviz [@@layout] [@@format] [@@alt-format]
        ((object (@@ (type "graphviz") (layout (,layout "dot")) (format (,fmt "svg")) (alt-format (,alt-fmt #f)) . ,obj-attrs)
          (graph (@@ (id ,id) . ,attrs) ,[x] ...))
@


1.1.2.5
log
@added @@anchor to @@href-[c|e]
@
text
@a30 1
(require-library 'sisc/libs/srfi/srfi-16) ; syntax for procedures of variable arity
a43 2
  (import srfi-16)

d86 6
a91 17
    (define make-context-url
      (case-lambda
        ((url)
         (encode-url (string-append
                      (->string (get-context-path request))
                      url)))
        ((url bindings)
         (if (null? bindings)
             (make-context-url url)
             (forward/store! url bindings)))
        ((url bindings anchor)
         (make-context-url (make-anchor-url url anchor)))))

    (define (make-anchor-url url anchor)
      (if anchor
          (string-append url "#" anchor)
          url))
a121 1

d123 1
a123 1
        ((a (@@ (href-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d125 1
a125 1
         `(a (@@ (href ,(make-anchor-url (forward/store! proc bindings) anchor)) . ,rest)
d131 1
a131 1
        ((form (@@ (action-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d133 1
a133 1
         `(form (@@ (action ,(make-anchor-url (forward/store! proc bindings) anchor)) . ,rest)
d143 1
a143 1
        ((object (@@ (data-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d145 1
a145 1
         `(object (@@ (data ,(make-anchor-url (forward/store! proc bindings))) . ,rest)
d147 1
a147 1
        ((iframe (@@ (src-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d149 1
a149 1
         `(iframe (@@ (src ,(make-anchor-url (forward/store! proc bindings))) . ,rest)
d151 1
a151 1
        ((node (@@ (href-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d153 1
a153 1
         `(node (@@ (href ,(make-anchor-url (forward/store! proc bindings) anchor)) . ,rest)
d155 1
a155 1
        ((edge (@@ (href-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d157 1
a157 1
         `(edge (@@ (href ,(make-anchor-url (forward/store! proc bindings) anchor)) . ,rest)
d159 1
a159 1
        ((record (@@ (href-p ,proc) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d161 1
a161 1
         `(record (@@ (href ,(make-anchor-url (forward/store! proc bindings) anchor)) . ,rest)
d166 2
a167 2
        ((a (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(a (@@ (href ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
d172 2
a173 2
        ((form (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(form (@@ (action ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
d181 2
a182 2
        ((object (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(object (@@ (data ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
d184 2
a185 2
        ((iframe (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(iframe (@@ (src ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
d187 2
a188 2
        ((node (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(node (@@ (href ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
d190 2
a191 2
        ((edge (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(edge (@@ (href ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
d193 2
a194 2
        ((record (@@ (bindings ,bindings) (anchor (,anchor #f)) . ,rest) ,[x] ...)
         `(record (@@ (href ,(make-anchor-url (forward/store! resume-k bindings) anchor)) . ,rest)
d199 1
a199 1
        ((a (@@ (href-e ,url) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d201 1
a201 1
         `(a (@@ (href ,(encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))
d205 1
a205 1
        ((form (@@ (action-e ,url) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d207 1
a207 1
         `(form (@@ (action ,(encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))
d214 1
a214 1
        ((object (@@ (data-e ,url) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d216 2
a217 2
         `(object (@@ (data ,(encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))
        ((iframe (@@ (src-e ,url) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d219 2
a220 2
         `(iframe (@@ (src ,(encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))
        ((node (@@ (href-e ,url) (anchor (,anchor #f)) . ,rest))
d222 2
a223 2
         `(node (@@ (href ,(encode-url (make-anchor-url url anchor))) . ,rest)))
        ((edge (@@ (href-e ,url) (anchor (,anchor #f)) . ,rest))
d225 2
a226 2
         `(edge (@@ (href ,(encode-url (make-anchor-url url anchor))) . ,rest)))
        ((record (@@ (href-e ,url) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d228 1
a228 2
         `(record (@@ (href ,(encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))

d231 1
a231 1
        ((a (@@ (href-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d233 1
a233 1
         `(a (@@ (href ,(make-context-url url bindings anchor)) . ,rest) ,x ...))
d237 1
a237 1
        ((form (@@ (action-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d239 1
a239 1
         `(form (@@ (action ,(make-context-url url bindings anchor)) . ,rest) ,x ...))
d246 1
a246 1
        ((object (@@ (data-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d248 2
a249 2
         `(object (@@ (data ,(make-context-url url bindings anchor)) . ,rest) ,x ...))
        ((iframe (@@ (src-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d251 2
a252 2
         `(iframe (@@ (src ,(make-context-url url bindings anchor)) . ,rest) ,x ...))
        ((node (@@ (href-c ,url) (bindings (,bindings ()))  (anchor (,anchor #f)) . ,rest))
d254 2
a255 2
         `(node (@@ (href ,(make-context-url url bindings anchor)) . ,rest)))
        ((edge (@@ (href-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest))
d257 2
a258 2
         `(edge (@@ (href ,(make-context-url url bindings anchor)) . ,rest)))
        ((record (@@ (href-c ,url) (bindings (,bindings ())) (anchor (,anchor #f)) . ,rest) ,[x] ...)
d260 1
a260 2
         `(record (@@ (href ,(make-context-url url bindings anchor)) . ,rest) ,x ...))

a276 1

a279 1

a282 1

d287 1
a287 1
    )@


1.1.2.6
log
@adapted to response/send, and send functions look up request/response on their own,
instead of needing them passed as parameters
@
text
@a33 1
(require-library 'siscweb/contcentric)
a47 1
  (import siscweb/contcentric)
d58 1
a58 1
  (define (ehtml->html html resume-k)
d60 1
a60 1
      (->string (jencode-url (current-response) (->jstring url))))
d71 1
a71 1
         (lambda (m e) (display m))
d93 1
a93 1
                      (->string (get-context-path (current-request)))
@


1.1.2.7
log
@deprecated (elt (@@ (*-p ...) (update ...) ...) ...); minor fix to graphviz cmapx
@
text
@d76 3
a78 4
             (*VERBATIM*
              ,(let ((str-out (open-output-string)))
                 (graphviz/write layout "cmapx" graph str-out)
                 (get-output-string str-out)))
d117 10
a126 3
        ((form (@@ (action-p ,proc) (update ,id) (options (,options ())). ,rest) ,[x] ...)
         (error "sxml/ehtml: (form (@@ (update ...) ...) ...) is now deprecated. Simply use plain Prototype.js + forward/store! for the same result"))

d128 9
a136 1
         (error "sxml/ehtml: (form (@@ (update ...) ...) ...) is now deprecated. Simply use plain Prototype.js + forward/store! for the same result"))
@


1.1.2.8
log
@refactoring: request/response are now just wrappers, with send/*
functions now in contcentric; moved many s2j calls to
request/response/session objects
@
text
@d34 1
a36 2
(require-library 'siscweb/request)
(require-library 'siscweb/response)
d43 1
d49 1
a51 2
  (import siscweb/request)
  (import siscweb/response)
d55 4
d61 3
d95 3
a97 1
         (response/encode-url (string-append (request/get-context-path) url)))
d106 3
a108 1
      (if anchor (format "~a#~a" url anchor) url))
d204 1
a204 1
         `(a (@@ (href ,(response/encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))
d207 1
a207 1
         `(link (@@ (href ,(response/encode-url url)) . ,rest) ,x ...))
d210 1
a210 1
         `(form (@@ (action ,(response/encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))
d213 1
a213 1
         `(img (@@ (src ,(response/encode-url url)) . ,rest)))
d216 1
a216 1
         `(script (@@ (src ,(response/encode-url url)) . ,rest) ,x ...))
d219 1
a219 1
         `(object (@@ (data ,(response/encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))
d222 1
a222 1
         `(iframe (@@ (src ,(response/encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))
d225 1
a225 1
         `(node (@@ (href ,(response/encode-url (make-anchor-url url anchor))) . ,rest)))
d228 1
a228 1
         `(edge (@@ (href ,(response/encode-url (make-anchor-url url anchor))) . ,rest)))
d231 1
a231 1
         `(record (@@ (href ,(response/encode-url (make-anchor-url url anchor))) . ,rest) ,x ...))
@


1.1.2.9
log
@symbols are now also left untouched (was breaking entities in
downstream sxml -> xml conversion)
@
text
@d273 2
a274 2
        ;; strings and symbols are untouched
        (,s (guard (or (string? s) (symbol? s))) s)
@


