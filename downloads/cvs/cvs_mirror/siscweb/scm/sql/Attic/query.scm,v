head	1.3;
access;
symbols
	rel-0-3-dev-1:1.2.4.1
	rel-0-2-fix-2:1.2
	rel-0-2-fix-1:1.2
	rel-0-2-fix:1.2.0.2
	rel-0-3-dev:1.2.0.4
	rel-0-2:1.2
	rel-0-2-dev:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2005.11.25.20.46.38;	author acolomba;	state dead;
branches;
next	1.2;

1.2
date	2005.06.19.03.03.51;	author acolomba;	state Exp;
branches
	1.2.2.1
	1.2.4.1;
next	1.1;

1.1
date	2005.06.10.01.38.14;	author acolomba;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.06.10.01.38.14;	author acolomba;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.06.11.04.59.33;	author acolomba;	state Exp;
branches;
next	;

1.2.2.1
date	2005.11.12.16.28.51;	author acolomba;	state Exp;
branches;
next	;

1.2.4.1
date	2005.08.13.04.37.26;	author acolomba;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2005.11.12.21.55.27;	author acolomba;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2005.11.17.02.49.39;	author acolomba;	state dead;
branches;
next	;


desc
@@


1.3
log
@merged from rel-0-3-dev
@
text
@;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.


(require-library 'sisc/libs/srfi/srfi-42) ; eager comprehensions
(require-library 'sisc/libs/srfi/srfi-45) ; primitives for expressing iterative lazy algorithms

(require-library 'sql/jdbc)
(require-library 'sql/result-set)
(require-library 'sql/type-conversion)


(module sql/query
  (sql/execute sql/execute-query sql/execute-update
   sql/map-row sql/for-each-row)

  (import s2j)
  (import generic-procedures)
  (import hashtable)

  (import sql/jdbc)
  (import sql/result-set)
  (import sql/type-conversion)

  (import srfi-42)
  (import srfi-45)

  (define-generic-java-methods
    get-column-name
    get-result-set
    get-update-count
    get-meta-data
    execute execute-query execute-update next
    prepare-statement set-null set-object)


  (define (sql/execute conn sql . bindings)
    (let* ((pstmt (prepare-and-bind-statement conn sql bindings))
           (rs? (execute pstmt))
           (vendor (jdbc/get-vendor conn)))
      (if (->boolean rs?)
          (make-cursor (get-result-set pstmt) vendor)
          (->number (get-update-count pstmt)))))

  (define (sql/execute-query conn sql . bindings)
    (let* ((pstmt (prepare-and-bind-statement conn sql bindings))
           (rs (execute-query pstmt))
           (vendor (jdbc/get-vendor conn)))
      (make-cursor rs vendor)))

  (define (sql/execute-update conn sql . bindings)
    (->number
     (execute-update (prepare-and-bind-statement conn sql bindings))))

  ;; TODO: use eager comprehensions instead
  (define-syntax sql/for-each-row
    (syntax-rules ()
      ((_ resultset ((var name) ...) body ...)
       (let loop ((rs resultset))
         (when (not (null? (force rs)))
           (let ((row (car (force rs))))
             (let ((var (hashtable/get row name)) ...)
               body ...))
             (loop (cdr (force rs))))))))

  (define-syntax sql/map-row
    (syntax-rules ()
      ((_ resultset ((var name) ...) body ...)
       (let loop ((rs resultset))
         (cond ((null? (force rs)) '())
               (else
                (cons
                 (let ((row (car (force rs))))
                   (let ((var (hashtable/get row name)) ...)
                     body ...))
                 (loop (cdr (force rs))))))))))


  (define (prepare-and-bind-statement conn sql bindings)
    (let ((pstmt (prepare-statement conn (->jstring sql))))
      (do-ec (:parallel (:range i 1 (+ 1 (length bindings)))
                        (:list value bindings))
        (set-object pstmt (->jint i) (scheme->sql value)))
      pstmt))

  (define (make-cursor rs vendor)
    (define :rs (make-rs-accessor rs vendor))

    (define (get-row)
      (let ((row (make-hashtable eqv? #f)))
        (do-ec (:list name (get-column-names rs))
          (hashtable/put! row name (:rs name)))
        row))

    (define (L)
      (lazy
       (if (not (->boolean (next rs)))
           (delay '())
           (delay (cons (get-row) (L))))))

    (L))
  )
@


1.2
log
@merged from rel-0-2-dev
@
text
@@


1.2.2.1
log
@now performs resource cleanup on stmt/rs; modified
sql/[map|for-each]-row methods for clarity
@
text
@a41 1
   rs/map rs/for-each
d56 4
a59 2
    close
    get-column-name get-result-set get-update-count get-meta-data
d65 6
a70 17
    (let ((pstmt (prepare-statement conn (->jstring sql))))
      (with/fc
       (lambda (e m)
         (close pstmt)
         (throw e))
       (lambda ()
         (bind-statement! pstmt bindings)
         (let ((rs? (execute pstmt)))
           (cond ((->boolean rs?)
                  (make-cursor pstmt (jdbc/get-vendor conn)))
                 (else
                  (dynamic-wind
                      (lambda () #t)
                      (lambda ()
                        (->number (get-update-count pstmt)))
                      (lambda ()
                        (close pstmt))))))))))
d73 4
a76 10
    (let ((pstmt (prepare-statement conn (->jstring sql))))
      (with/fc
       (lambda (e m)
         (close pstmt)
         (throw e))
       (lambda ()
         (bind-statement! pstmt bindings)
         (execute-query pstmt)
         (make-cursor pstmt (jdbc/get-vendor conn))))))

d79 2
a80 17
    (let ((pstmt (prepare-statement conn (->jstring sql))))
      (dynamic-wind
          (lambda () #t)
          (lambda ()
            (bind-statement! pstmt bindings)
            (let ((vendor (jdbc/get-vendor conn)))
              (->number (execute-update pstmt))))
          (lambda ()
            (close pstmt)))))


  (define (rs/map proc resultset)
    (define (M rs)
      (if (null? (force rs))
          '()
          (cons (proc (car (force rs)))
                (M (cdr (force rs))))))
d82 10
a91 1
    (M resultset))
d96 8
a103 11
       (rs/map
        (lambda (ht)
          (let ((var (hashtable/get ht name)) ...)
            body ...))
        resultset))))

  (define (rs/for-each proc resultset)
    (let loop ((rs resultset))
      (when (not (null? (force rs)))
        (proc (car (force rs)))
        (loop (cdr (force rs))))))
d105 24
a128 43
  (define-syntax sql/for-each-row
    (syntax-rules ()
      ((_ resultset ((var name) ...) body ...)
       (rs/for-each
        (lambda (ht)
          (let ((var (hashtable/get ht name)) ...)
            body ...))
        resultset))))


  (define (bind-statement! pstmt bindings)
    (do-ec (:parallel (:range i 1 (+ 1 (length bindings)))
                      (:list value bindings))
      (set-object pstmt (->jint i) (scheme->sql value))))


  (define (make-cursor pstmt vendor)
    (let* ((rs (get-result-set pstmt))
           (:rs (make-rs-accessor rs vendor))
           (get-row (lambda ()
                      (let ((row (make-hashtable eqv? #f)))
                        (do-ec (:list name (get-column-names rs))
                          (hashtable/put! row name (:rs name)))
                        row)))
           (cleanup (lambda ()
                     (dynamic-wind
                         (lambda () #t)
                         (lambda () (close rs))
                         (lambda () (close pstmt))))))
      (letrec ((L
        (lambda ()
          (with/fc
           (lambda (e m)
             (cleanup)
             (throw e))
           (lambda ()
             (lazy
              (cond ((not (->boolean (next rs)))
                     (cleanup)
                     (delay '()))
                    (else
                     (delay (cons (get-row) (L)))))))))))
        (L))))
@


1.2.4.1
log
@now obtains scheme->sql conversion function through
sql/type-conversion
@
text
@d65 3
a67 3
    (let* ((vendor (jdbc/get-vendor conn))
           (pstmt (prepare-and-bind-statement conn sql bindings))
           (rs? (execute pstmt)))
d107 1
a107 2
    (let ((pstmt (prepare-statement conn (->jstring sql)))
          (scheme->sql (get-scheme->sql-proc (jdbc/get-vendor conn))))
@


1.2.4.2
log
@now performs resource cleanup on stmt/rs; modified
sql/[map|for-each]-row methods for clarity
@
text
@d56 4
a59 3
    close
    get-connection get-column-name get-result-set
    get-update-count get-meta-data
d65 6
a70 17
    (let ((pstmt (prepare-statement conn (->jstring sql))))
      (with/fc
       (lambda (e m)
         (close pstmt)
         (throw e))
       (lambda ()
         (bind-statement! pstmt bindings)
         (let ((rs? (execute pstmt)))
           (cond ((->boolean rs?)
                  (make-cursor pstmt (jdbc/get-vendor conn)))
                 (else
                  (dynamic-wind
                      (lambda () #t)
                      (lambda ()
                        (->number (get-update-count pstmt)))
                      (lambda ()
                        (close pstmt))))))))))
d73 4
a76 10
    (let ((pstmt (prepare-statement conn (->jstring sql))))
      (with/fc
       (lambda (e m)
         (close pstmt)
         (throw e))
       (lambda ()
         (bind-statement! pstmt bindings)
         (execute-query pstmt)
         (make-cursor pstmt (jdbc/get-vendor conn))))))

d79 2
a80 9
    (let ((pstmt (prepare-statement conn (->jstring sql))))
      (dynamic-wind
          (lambda () #t)
          (lambda ()
            (bind-statement! pstmt bindings)
            (let ((vendor (jdbc/get-vendor conn)))
              (->number (execute-update pstmt))))
          (lambda ()
            (close pstmt)))))
d82 2
a83 2

  (define-syntax sql/map-row
d86 6
a91 5
       (rs/map
        (lambda (ht)
          (let ((var (hashtable/get ht name)) ...)
            body ...))
        resultset))))
d93 1
a93 2

  (define-syntax sql/for-each-row
d96 8
a103 5
       (rs/for-each
        (lambda (ht)
          (let ((var (hashtable/get ht name)) ...)
            body ...))
        resultset))))
a105 7
  (define (bind-statement! pstmt bindings)
    (let ((scheme->sql
           (get-scheme->sql-proc (jdbc/get-vendor (get-connection pstmt)))))
      (do-ec (:parallel (:range i 1 (+ 1 (length bindings)))
                        (:list value bindings))
        (set-object pstmt (->jint i) (scheme->sql value)))))

d114 14
a127 27
  (define (make-cursor pstmt vendor)
    (let* ((rs (get-result-set pstmt))
           (:rs (make-rs-accessor rs vendor))
           (get-row (lambda ()
                      (let ((row (make-hashtable eqv? #f)))
                        (do-ec (:list name (get-column-names rs))
                          (hashtable/put! row name (:rs name)))
                        row)))
           (cleanup (lambda ()
                     (dynamic-wind
                         (lambda () #t)
                         (lambda () (close rs))
                         (lambda () (close pstmt))))))
      (letrec ((L
        (lambda ()
          (with/fc
           (lambda (e m)
             (cleanup)
             (throw e))
           (lambda ()
             (lazy
              (cond ((not (->boolean (next rs)))
                     (cleanup)
                     (delay '()))
                    (else
                     (delay (cons (get-row) (L)))))))))))
        (L))))
d129 1
@


1.2.4.3
log
@moved from project root to opt/sql/
@
text
@@


1.1
log
@file query.scm was initially added on branch rel-0-2-dev.
@
text
@d1 129
@


1.1.2.1
log
@moved content of util/sql.scm to sql/hsqldb.scm, sql/jdbc.scm,
sql/query.scm, sql/result-set.scm, sql/type-conversion.scm,
sql/types.scm; also introduced some support for vendor-dependent
sql->scheme type conversions; fixed make-rs-cursor to be more
efficient
@
text
@a0 104
;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.


(require-library 'sisc/libs/srfi/srfi-42) ; eager comprehensions
(require-library 'sisc/libs/srfi/srfi-45) ; primitives for expressing iterative lazy algorithms

(require-library 'sql/jdbc)
(require-library 'sql/result-set)
(require-library 'sql/type-conversion)


(module sql/query
  (sql/execute sql/execute-query sql/execute-update)

  (import s2j)
  (import generic-procedures)
  (import hashtable)

  (import sql/jdbc)
  (import sql/result-set)
  (import sql/type-conversion)

  (import srfi-42)
  (import srfi-45)

  (define-generic-java-methods
    get-column-name
    get-result-set
    get-update-count
    get-meta-data
    execute execute-query execute-update next
    prepare-statement set-null set-object)


  (define (sql/execute conn sql . bindings)
    (let* ((pstmt (prepare-and-bind-statement conn sql bindings))
           (rs? (execute pstmt)))
      (if (->boolean rs?)
          (make-cursor (get-result-set pstmt))
          (->number (get-update-count pstmt)))))

  (define (sql/execute-query conn sql . bindings)
    (let* ((pstmt (prepare-and-bind-statement conn sql bindings))
           (rs (execute-query pstmt))
           (vendor (jdbc/get-vendor conn)))
      (make-cursor rs vendor)))

  (define (sql/execute-update conn sql . bindings)
    (->number
     (execute-update (prepare-and-bind-statement conn sql bindings))))


  (define (prepare-and-bind-statement conn sql bindings)
    (let ((pstmt (prepare-statement conn (->jstring sql))))
      (do-ec (:parallel (:range i 1 (+ 1 (length bindings)))
                        (:list value bindings))
        (set-object pstmt (->jint i) (scheme->sql value)))
      pstmt))

  (define (make-cursor rs vendor)
    (define :rs (make-rs-accessor rs vendor))

    (define (get-row)
      (let ((row (make-hashtable eqv? #f)))
        (do-ec (:list name (get-column-names rs))
          (hashtable/put! row name (:rs name)))
        row))

    (define (L)
      (lazy
       (if (not (->boolean (next rs)))
           (delay '())
           (delay (cons (get-row) (L))))))

    (L))
  )
@


1.1.2.2
log
@added sql/map-row, sql/for-each-row functions to help iterating over
resultsets
@
text
@d41 1
a41 2
  (sql/execute sql/execute-query sql/execute-update
   sql/map-row sql/for-each-row)
d65 1
a65 2
           (rs? (execute pstmt))
           (vendor (jdbc/get-vendor conn)))
d67 1
a67 1
          (make-cursor (get-result-set pstmt) vendor)
a79 23
  ;; TODO: use eager comprehensions instead
  (define-syntax sql/for-each-row
    (syntax-rules ()
      ((_ resultset ((var name) ...) body ...)
       (let loop ((rs resultset))
         (when (not (null? (force rs)))
           (let ((row (car (force rs))))
             (let ((var (hashtable/get row name)) ...)
               body ...))
             (loop (cdr (force rs))))))))

  (define-syntax sql/map-row
    (syntax-rules ()
      ((_ resultset ((var name) ...) body ...)
       (let loop ((rs resultset))
         (cond ((null? (force rs)) '())
               (else
                (cons
                 (let ((row (car (force rs))))
                   (let ((var (hashtable/get row name)) ...)
                     body ...))
                 (loop (cdr (force rs))))))))))

@


