head	1.1;
access;
symbols
	rel-0-3-dev-1:1.1.2.3
	rel-0-2-fix-2:1.1.4.2
	rel-0-2-fix:1.1.0.4
	rel-0-3-dev:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2005.07.16.03.13.04;	author acolomba;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2005.07.16.03.13.04;	author acolomba;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.08.23.02.48.49;	author acolomba;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2005.09.13.02.54.34;	author acolomba;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2005.11.18.05.38.13;	author acolomba;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2005.11.20.18.44.01;	author acolomba;	state dead;
branches;
next	;

1.1.4.1
date	2005.07.16.03.13.04;	author acolomba;	state dead;
branches;
next	1.1.4.2;

1.1.4.2
date	2005.07.31.20.04.03;	author acolomba;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2005.11.18.05.38.52;	author acolomba;	state Exp;
branches;
next	1.1.4.4;

1.1.4.4
date	2005.11.25.04.53.13;	author acolomba;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file markup.scm was initially added on branch rel-0-3-dev.
@
text
@@


1.1.4.1
log
@file markup.scm was added on branch rel-0-2-fix on 2005-07-31 20:04:03 +0000
@
text
@@


1.1.4.2
log
@merged from rel-0-3-dev
@
text
@a0 110
;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.

(require-library 'sisc/libs/srfi/srfi-1)
(require-library 'sxml/sxml-match)
(require-library 'util/misc)
(require-library 'util/regexp)

(module sxml/markup
  (sxml->string)

  (import s2j)
  (import string-io)
  (import type-system)
  (import srfi-1)
  (import sxml-matcher)
  (import util/misc)
  (import util/regexp)

  (define (sxml->string sxml)
    (define (xml-element? elt)
      (and (pair? elt)
           (symbol? (car elt))))

    (define (escape-string str)
      (fold-right (lambda (regexp replacement text)
                    (regexp-replace regexp text replacement))
                  str '("\"" "<" ">" "'" "&") '("&quot;" "&lt;" "&gt;" "&apos;" "&amp;")))

    (define (->html-text value)
      (typecase value
        ((<string>) (escape-string value))
        ((<number>) (number->string value))
        (else (escape-string
               (with-output-to-string
                 (lambda () (pretty-print value)))))))

    (define (attr pair)
      (if (cadr pair) ; if attr value is #f, skip the attr
          (string-append
           " " (symbol->string (car pair)) "=\"" (->html-text (cadr pair)) "\"")
          ""))

    (import sxml-accessors)

    (sxml-match sxml
      ((text-as-is ,string) (guard (string? string)) string)
      ((*COMMENT* ,string)
       (guard (and (string? string)
                   (not (string-contains string "--"))))
       (string-append "<!--" string "-->"))
      (,elt
       (guard (xml-element? elt))
       (string-append
        "<"
        ;; tag name
        (symbol->string (car elt))
        ;; attribute list
        (fold-right string-append ""
                    (map attr
                         (xml-element-attributes elt)))
        ;; tag content, properly terminated
        (let ((c (xml-element-contents elt)))
          (if (null? c)
              "/>"
              (string-append
               ">"
               (fold-right string-append "" (map sxml->string c))
               "</"
               (symbol->string (car elt))
               ">")))))
      (,string (guard (string? string)) (escape-string string))
      (,number (guard (number? number)) (number->string number))
      (,symbol (guard (symbol? symbol))
               (string-append "&" (symbol->string symbol) ";"))
      (#f "")
      (,else (error (string-append
                     "siscweb/html: Invalid element : \""
                     (with-output-to-string
                       (lambda ()
                         (display else)))
                     "\"")))))
  )
@


1.1.4.3
log
@"/>" => " />" for empty html elements as per w3c user agent
compatibility recommendations
@
text
@d92 1
a92 1
              " />"
@


1.1.4.4
log
@added *TOP* element (ignored)
@
text
@a74 2
      ((*TOP* ,[x])
       x)
@


1.1.2.1
log
@initial import
@
text
@a0 110
;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.

(require-library 'sisc/libs/srfi/srfi-1)
(require-library 'sxml/sxml-match)
(require-library 'util/misc)
(require-library 'util/regexp)

(module sxml/markup
  (sxml->string)

  (import s2j)
  (import string-io)
  (import type-system)
  (import srfi-1)
  (import sxml-matcher)
  (import util/misc)
  (import util/regexp)

  (define (sxml->string sxml)
    (define (xml-element? elt)
      (and (pair? elt)
           (symbol? (car elt))))

    (define (escape-string str)
      (fold-right (lambda (regexp replacement text)
                    (regexp-replace regexp text replacement))
                  str '("\"" "<" ">" "'" "&") '("&quot;" "&lt;" "&gt;" "&apos;" "&amp;")))

    (define (->html-text value)
      (typecase value
        ((<string>) (escape-string value))
        ((<number>) (number->string value))
        (else (escape-string
               (with-output-to-string
                 (lambda () (pretty-print value)))))))

    (define (attr pair)
      (if (cadr pair) ; if attr value is #f, skip the attr
          (string-append
           " " (symbol->string (car pair)) "=\"" (->html-text (cadr pair)) "\"")
          ""))

    (import sxml-accessors)

    (sxml-match sxml
      ((text-as-is ,string) (guard (string? string)) string)
      ((*COMMENT* ,string)
       (guard (and (string? string)
                   (not (string-contains string "--"))))
       (string-append "<!--" string "-->"))
      (,elt
       (guard (xml-element? elt))
       (string-append
        "<"
        ;; tag name
        (symbol->string (car elt))
        ;; attribute list
        (fold-right string-append ""
                    (map attr
                         (xml-element-attributes elt)))
        ;; tag content, properly terminated
        (let ((c (xml-element-contents elt)))
          (if (null? c)
              "/>"
              (string-append
               ">"
               (fold-right string-append "" (map sxml->string c))
               "</"
               (symbol->string (car elt))
               ">")))))
      (,string (guard (string? string)) (escape-string string))
      (,number (guard (number? number)) (number->string number))
      (,symbol (guard (symbol? symbol))
               (string-append "&" (symbol->string symbol) ";"))
      (#f "")
      (,else (error (string-append
                     "siscweb/html: Invalid element : \""
                     (with-output-to-string
                       (lambda ()
                         (display else)))
                     "\"")))))
  )
@


1.1.2.2
log
@added missing srfi-13 import
@
text
@a31 1
(require-library 'sisc/libs/srfi/srfi-13)
a42 1
  (import srfi-13)
@


1.1.2.3
log
@comment output is now optional to *sxml-output-comments*; added (&
symbol) syntax to produce entities; renamed "text-as-is" to "verbatim"
@
text
@a32 2

(require-library 'siscweb/config)
a36 1

a42 1

a44 2

  (import siscweb/config)
d76 1
a76 1
      ((verbatim ,string) (guard (string? string)) string)
d80 1
a80 6
       (if *sxml-output-comments?*
           (string-append "<!--" string "-->")
           ""))
      ((& ,symbol)
       (guard (symbol? symbol))
       (string-append "&" (symbol->string symbol) ";"))
@


1.1.2.4
log
@"/>" => " />" for empty html elements as per w3c user agent
compatibility recommendations
@
text
@d105 1
a105 1
              " />"
@


1.1.2.5
log
@moved from siscweb root to opt/sxml
@
text
@@


