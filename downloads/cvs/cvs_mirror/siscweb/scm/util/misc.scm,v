head	1.4;
access;
symbols
	rel-0-6-dev:1.4.0.4
	rel-0-5-fix:1.4.0.2
	rel-0-5:1.4
	rel-0-5-dev-safe-frames:1.3.4.5.0.2
	Root_rel-0-5-dev-safe-frames:1.3.4.5
	rel-0-4-fix-0:1.3
	rel-0-5-dev:1.3.0.4
	rel-0-4-fix:1.3.0.2
	rel-0-3-fix-3:1.2.6.2
	rel-0-3-fix-2:1.2.6.1
	rel-0-4-dev-sisc-1-11:1.2.8.1
	rel-0-3-fix-1:1.2
	rel-0-4-dev:1.2.0.8
	rel-0-3-fix:1.2.0.6
	rel-0-3:1.2
	rel-0-3-dev-1:1.2
	rel-0-2-fix-2:1.2
	rel-0-2-fix-1:1.2
	rel-0-2-fix:1.2.0.2
	rel-0-3-dev:1.2.0.4
	rel-0-2:1.2
	rel-0-2-dev:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2007.04.12.03.51.19;	author acolomba;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.03.01.42.22;	author acolomba;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2005.06.19.03.03.51;	author acolomba;	state Exp;
branches
	1.2.6.1
	1.2.8.1;
next	1.1;

1.1
date	2005.05.22.20.07.31;	author acolomba;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.05.22.20.07.31;	author acolomba;	state Exp;
branches;
next	;

1.2.6.1
date	2006.02.25.17.12.01;	author acolomba;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2006.04.15.15.55.23;	author acolomba;	state Exp;
branches;
next	;

1.2.8.1
date	2005.12.01.03.55.05;	author acolomba;	state Exp;
branches;
next	1.2.8.2;

1.2.8.2
date	2006.03.10.02.35.16;	author acolomba;	state Exp;
branches;
next	;

1.3.4.1
date	2007.01.08.00.27.29;	author acolomba;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2007.01.22.05.01.52;	author acolomba;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2007.01.27.05.46.49;	author acolomba;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2007.01.29.04.18.54;	author acolomba;	state Exp;
branches;
next	1.3.4.5;

1.3.4.5
date	2007.03.01.03.36.00;	author acolomba;	state Exp;
branches;
next	;


desc
@@


1.4
log
@merged from rel-0-5-dev
@
text
@;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005-2007
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.

(require-library 'sisc/libs/srfi/srfi-1) ; list library

(module util/misc
  (let/cc typecase
   ->jbool
   enumeration/map enumeration/for-each
   iterator/map iterator/for-each
   jlist/map jlist/for-each
   jmap/map jmap/for-each
   jarray/map jarray/for-each
   alist->lstring)

  (import s2j)
  (import string-io)
  (import type-system)

  (import srfi-1)

  (define-java-classes
    (<jbool> |java.lang.Boolean|))

  (define-generic-java-methods entry-set get-key get-value iterator has-more-elements has-next next next-element)


  (define-syntax let/cc
    (syntax-rules ()
      ((_ k body ...)
       (call/cc (lambda (k) body ...)))))


  (define-syntax typecase
    (syntax-rules (else)
      ((_ value
          ((type ...) expr ...) ...)
       (cond ((or (instance-of? value type) ...)
              expr ...)
             ...))
      ((_ value
          ((type ...) expr ...)
          ...
          (else expr1 ...))
       (cond ((or (instance-of? value type) ...)
              expr ...)
             ...
             (else expr1 ...)))))


  (define (->jbool x)
    (define jtrue ((generic-java-field-accessor '|TRUE|) (java-null <jbool>)))
    (define jfalse ((generic-java-field-accessor '|FALSE|) (java-null <jbool>)))

    (if x jtrue jfalse))

  (define (enumeration/map proc enum)
    (define (M l)
      (if (->boolean (has-more-elements enum))
        (let ((x (proc (next-element enum))))
          (M (cons x l)))
        (reverse l)))

    (M '()))

  (define (enumeration/for-each proc enum)
    (define (F)
      (when (->boolean (has-more-elements enum))
        (proc (next-element enum))
        (F)))

    (F))


  (define (iterator/map proc iter)
    (define (M l)
      (if (->boolean (has-next iter))
        (let ((x (proc (next iter))))
          (M (cons x l)))
        (reverse l)))

    (M '()))

  (define (iterator/for-each proc iter)
    (define (F)
      (when (->boolean (has-next iter))
        (proc (next iter))
        (F)))

    (F))

  (define (jarray/map proc array)
    (define (R i acc)
      (if (>= i 0)
          (R (- i 1) (cons (proc (java-array-ref array i)) acc))
          acc))
    (R (- (java-array-length array) 1) '()))

  (define (jarray/for-each proc array)
    (define (R i)
      (when (>= i 0)
        (proc (java-array-ref array i))
        (R (- i 1))))

    (R (- (java-array-length array) 1)))


  (define (jlist/map proc jlist)
    (iterator/map proc (iterator jlist)))

  (define (jlist/for-each proc jlist)
    (iterator/for-each proc (iterator jlist)))

  (define (jmap/map proc jmap)
    (iterator/map
     (lambda (entry)
       (let ((jkey (get-key entry))
             (jvalue (get-value entry)))
         (proc jkey jvalue)))
     (iterator (entry-set jmap))))

  (define (jmap/for-each proc jmap)
    (iterator/for-each
     (lambda (entry)
       (let ((jkey (get-key entry))
             (jvalue (get-value entry)))
         (proc jkey jvalue)))
     (iterator (entry-set jmap))))


  (define (alist->lstring alist isep osep)
    (fold-right
     (lambda (pair str)
       (format "~a~a~a~a"
               (car pair)
               isep
               (cadr pair)
               (if (> (string-length str) 0)
                   (string-append osep str)
                   "")))
     ""
     alist))

  )
@


1.3
log
@merged from rel-0-4-dev
@
text
@d14 1
a14 1
;;; Portions created by the Initial Developer are Copyright (C) 2005
d35 1
d38 3
d49 4
a52 1
  (define-generic-java-methods has-more-elements has-next next next-element)
d78 6
d89 1
a89 1
        l))
d107 1
a107 1
        l))
d119 39
@


1.3.4.1
log
@added scheme->java ->jbool converter
@
text
@d14 1
a14 1
;;; Portions created by the Initial Developer are Copyright (C) 2005-2006
a34 1
   ->jbool
a44 3
  (define-java-classes
    (<jbool> |java.lang.Boolean|))

a70 6
  (define (->jbool x)
    (define jtrue ((generic-java-field-accessor '|TRUE|) (java-null <jbool>)))
    (define jfalse ((generic-java-field-accessor '|FALSE|) (java-null <jbool>)))

    (if x jtrue jfalse))

@


1.3.4.2
log
@added  jmap/map jmap/for-each jarray/map jarray/for-each
@
text
@d14 1
a14 1
;;; Portions created by the Initial Developer are Copyright (C) 2005-2007
a37 2
   jmap/map jmap/for-each
   jarray/map jarray/for-each
d49 1
a49 1
  (define-generic-java-methods entry-set get-key get-value iterator has-more-elements has-next next next-element)
a115 33
  (define (jarray/map proc array)
    (define (R i acc)
      (if (>= i 0)
          (R (- i 1) (cons (proc (java-array-ref array i)) acc))
          acc))
    (R (- (java-array-length array) 1) '()))

  (define (jarray/for-each proc array)
    (define (R i)
      (when (>= i 0)
        (proc (java-array-ref array i))
        (R (- i 1))))

    (R (- (java-array-length array) 1)))


  (define (jmap/map proc jmap)
    (iterator/map
     (lambda (entry)
       (let ((jkey (get-key entry))
             (jvalue (get-value entry)))
         (proc jkey jvalue)))
     (iterator (entry-set jmap))))

  (define (jmap/for-each proc jmap)
    (iterator/for-each
     (lambda (entry)
       (let ((jkey (get-key entry))
             (jvalue (get-value entry)))
         (proc jkey jvalue)))
     (iterator (entry-set jmap))))


@


1.3.4.3
log
@added jlist/[map|for-each]
@
text
@a37 1
   jlist/map jlist/for-each
a133 6
  (define (jlist/map proc jlist)
    (iterator/map proc (iterator (entry-set jmap))))

  (define (jlist/for-each proc jmap)
    (iterator/for-each proc (iterator (entry-set jmap))))

@


1.3.4.4
log
@fixed jlist/[map|for-each] procedures
@
text
@d136 1
a136 1
    (iterator/map proc (iterator jlist)))
d138 2
a139 2
  (define (jlist/for-each proc jlist)
    (iterator/for-each proc (iterator jlist)))
@


1.3.4.5
log
@[enumeration|iterator]/map maintain element order
@
text
@d89 1
a89 1
        (reverse l)))
d107 1
a107 1
        (reverse l)))
@


1.2
log
@merged from rel-0-2-dev
@
text
@d31 1
d34 4
a37 1
  (let/cc typecase)
d39 2
d43 5
d71 48
@


1.2.6.1
log
@merged from rel-0-4-dev-sisc-1-11
@
text
@a30 1
(require-library 'sisc/libs/srfi/srfi-1) ; list library
d33 1
a33 4
  (let/cc typecase
   enumeration/map enumeration/for-each
   iterator/map iterator/for-each
   alist->lstring value->string)
a34 2
  (import s2j)
  (import string-io)
a36 5
  (import srfi-1)

  (define-generic-java-methods has-more-elements has-next next next-element)


a59 54
  (define (enumeration/map proc enum)
    (define (M l)
      (if (->boolean (has-more-elements enum))
        (let ((x (proc (next-element enum))))
          (M (cons x l)))
        l))

    (M '()))

  (define (enumeration/for-each proc enum)
    (define (F)
      (when (->boolean (has-more-elements enum))
        (proc (next-element enum))
        (F)))

    (F))


  (define (iterator/map proc iter)
    (define (M l)
      (if (->boolean (has-next iter))
        (let ((x (proc (next iter))))
          (M (cons x l)))
        l))

    (M '()))

  (define (iterator/for-each proc iter)
    (define (F)
      (when (->boolean (has-next iter))
        (proc (next iter))
        (F)))

    (F))

  (define (alist->lstring alist isep osep)
    (fold-right
     (lambda (pair str)
       (string-append
        (symbol->string (car pair))
        isep
        (value->string (cadr pair))
        (if str
            (string-append osep str)
            "")))
     #f
     alist))

  (define (value->string value)
    (typecase value
      ((<number>) (number->string value))
      ((<symbol>) (symbol->string value))
      ((<string>) value)
      (else (with-output-to-string (lambda () (pretty-print value))))))
@


1.2.6.2
log
@merged from rel-0-4-dev
@
text
@d37 1
a37 1
   alist->lstring)
d109 8
a116 8
       (format "~a~a~a~a"
               (car pair)
               isep
               (cadr pair)
               (if (> (string-length str) 0)
                   (string-append osep str)
                   "")))
     ""
d119 6
@


1.2.8.1
log
@added [enumeration|iterator]/[for-each|map], alist->lstring, value->string
@
text
@a30 1
(require-library 'sisc/libs/srfi/srfi-1) ; list library
d33 1
a33 4
  (let/cc typecase
   enumeration/map enumeration/for-each
   iterator/map iterator/for-each
   alist->lstring value->string)
a34 2
  (import s2j)
  (import string-io)
a36 5
  (import srfi-1)

  (define-generic-java-methods has-more-elements has-next next next-element)


a59 54
  (define (enumeration/map proc enum)
    (define (M l)
      (if (->boolean (has-more-elements enum))
        (let ((x (proc (next-element enum))))
          (M (cons x l)))
        l))

    (M '()))

  (define (enumeration/for-each proc enum)
    (define (F)
      (when (->boolean (has-more-elements enum))
        (proc (next-element enum))
        (F)))

    (F))


  (define (iterator/map proc iter)
    (define (M l)
      (if (->boolean (has-next iter))
        (let ((x (proc (next iter))))
          (M (cons x l)))
        l))

    (M '()))

  (define (iterator/for-each proc iter)
    (define (F)
      (when (->boolean (has-next iter))
        (proc (next iter))
        (F)))

    (F))

  (define (alist->lstring alist isep osep)
    (fold-right
     (lambda (pair str)
       (string-append
        (symbol->string (car pair))
        isep
        (value->string (cadr pair))
        (if str
            (string-append osep str)
            "")))
     #f
     alist))

  (define (value->string value)
    (typecase value
      ((<number>) (number->string value))
      ((<symbol>) (symbol->string value))
      ((<string>) value)
      (else (with-output-to-string (lambda () (pretty-print value))))))
@


1.2.8.2
log
@optimization in alist->lstring
@
text
@d37 1
a37 1
   alist->lstring)
d109 8
a116 8
       (format "~a~a~a~a"
               (car pair)
               isep
               (cadr pair)
               (if (> (string-length str) 0)
                   (string-append osep str)
                   "")))
     ""
d119 6
@


1.1
log
@file misc.scm was initially added on branch rel-0-2-dev.
@
text
@d1 60
@


1.1.2.1
log
@moved siscweb/util.scm to util/misc.scm
@
text
@a0 60
;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.


(module util/misc
  (let/cc typecase)

  (import type-system)

  (define-syntax let/cc
    (syntax-rules ()
      ((_ k body ...)
       (call/cc (lambda (k) body ...)))))


  (define-syntax typecase
    (syntax-rules (else)
      ((_ value
          ((type ...) expr ...) ...)
       (cond ((or (instance-of? value type) ...)
              expr ...)
             ...))
      ((_ value
          ((type ...) expr ...)
          ...
          (else expr1 ...))
       (cond ((or (instance-of? value type) ...)
              expr ...)
             ...
             (else expr1 ...)))))


  )
@

