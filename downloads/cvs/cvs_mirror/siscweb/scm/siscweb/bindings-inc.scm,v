head	1.1;
branch	1.1.1;
access;
symbols
	start:1.1.1.1 rel-0-1-dev:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.16.03.33.32;	author acolomba;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.02.16.03.33.32;	author acolomba;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.02.17.01.08.27;	author acolomba;	state dead;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.

(define-java-classes
  (<jstring> |java.lang.String|)
  (<hash-map> |java.util.HashMap|)
  (<http-servlet-request> |javax.servlet.http.HttpServletRequest|))


(define-generic-java-methods
 contains-key get get-attribute get-parameter get-parameter-map key-set put to-array)


(define-generics :parameter-map :parameter-map!)

(define-class (<bindings>)
  (parameter-map :parameter-map :parameter-map!))

(define-method (initialize (<bindings> bindings) (<http-servlet-request> request))
  (let ((my-bindings (get-attribute request (->jstring "bindings"))))
    (if (java-null? my-bindings)
        (:parameter-map! bindings (get-parameter-map request))
        (:parameter-map! bindings (:parameter-map (java-unwrap my-bindings))))))

(define-method (initialize (<bindings> bindings) (<list> alist))
  (:parameter-map! bindings (java-new <hash-map> (->jint (length alist))))
  (for-each (lambda (binding)
              (put (:parameter-map bindings)
                   (->jstring (car binding))
                   (->jarray (map (lambda (str) (->jstring str))
                                  (cdr binding))
                             <jstring>)))
            alist))


(define-generics exists-binding? get-bindings extract-single-binding extract-bindings bindings->alist)

(define-method (get-bindings (<http-servlet-request> request))
  (make <bindings> request))


(define-method (exists-binding? (<string> name) (<bindings> bindings))
  (->boolean (contains-key (:parameter-map bindings) (->jstring name))))

(define-method (exists-binding? (<symbol> name) (<bindings> bindings))
  (exists-binding? (symbol->string name) bindings))


(define-method (extract-single-binding (<string> name) (<bindings> bindings))
  (let ((binding (get (:parameter-map bindings) (->jstring name))))
    (if (java-null? binding)
        #f
        (->string (java-array-ref binding 0)))))

(define-method (extract-single-binding (<symbol> name) (<bindings> bindings))
  (extract-single-binding (symbol->string name) bindings))


(define-method (extract-bindings (<string> name) (<bindings> bindings))
  (let ((binding (get (:parameter-map bindings) (->jstring name))))
    (if (java-null? binding)
        '()
        (map ->string (->list binding)))))

(define-method (extract-bindings (<symbol> name) (<bindings> bindings))
  (extract-bindings (symbol->string name) bindings))


(define-method (bindings->alist (<bindings> bindings))
  (map (lambda (j-key)
         (list
          (->string j-key)
          (extract-bindings (->string j-key) bindings)))
       (->list (to-array (key-set (:parameter-map bindings))))))



;; a convenience form to assign bindings to variables
;; var is the scheme variable name, name is the binding name
(define-syntax let-bindings
  (syntax-rules (single multiple) ;for future use
    ((_ ((var name) ...) bindings body ...)
     (let* ((bnd bindings)
            (var (extract-single-binding name bnd))
            ... )
       body ...))))
@


1.1.1.1
log
@initial import
@
text
@@


1.1.1.2
log
@did away with the -inc business; i think it was a bad idea
@
text
@@

