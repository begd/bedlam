head	1.5;
access;
symbols
	rel-0-6-dev:1.5.0.4
	rel-0-5-fix:1.5.0.2
	rel-0-5:1.5
	rel-0-5-dev-safe-frames:1.4.4.1.0.2
	Root_rel-0-5-dev-safe-frames:1.4.4.1
	rel-0-4-fix-0:1.4
	rel-0-5-dev:1.4.0.4
	rel-0-4-fix:1.4.0.2
	rel-0-3-fix-3:1.3.2.2
	rel-0-3-fix-2:1.3.2.1
	rel-0-4-dev-sisc-1-11:1.3.4.2
	rel-0-3-fix-1:1.3
	rel-0-4-dev:1.3.0.4
	rel-0-3-fix:1.3.0.2
	rel-0-3:1.3
	rel-0-3-dev-1:1.2.4.1
	rel-0-2-fix-2:1.2.2.1
	rel-0-2-fix-1:1.2
	rel-0-2-fix:1.2.0.2
	rel-0-3-dev:1.2.0.4
	rel-0-2:1.2
	rel-0-2-dev:1.1.0.4
	rel-0-1-fix:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2007.04.12.03.51.16;	author acolomba;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.03.01.42.24;	author acolomba;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2005.11.25.20.43.32;	author acolomba;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2005.06.19.03.03.51;	author acolomba;	state Exp;
branches
	1.2.2.1
	1.2.4.1;
next	1.1;

1.1
date	2005.04.15.23.21.11;	author acolomba;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2005.04.15.23.21.12;	author acolomba;	state Exp;
branches;
next	;

1.1.4.1
date	2005.04.17.23.32.12;	author acolomba;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2005.05.22.20.19.25;	author acolomba;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2005.05.30.05.14.07;	author acolomba;	state Exp;
branches;
next	1.1.4.4;

1.1.4.4
date	2005.06.11.00.13.20;	author acolomba;	state Exp;
branches;
next	;

1.2.2.1
date	2005.07.31.20.04.03;	author acolomba;	state Exp;
branches;
next	;

1.2.4.1
date	2005.07.19.03.15.29;	author acolomba;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2005.11.15.07.31.33;	author acolomba;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2005.11.16.00.43.02;	author acolomba;	state Exp;
branches;
next	;

1.3.2.1
date	2006.02.25.17.12.05;	author acolomba;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.04.15.15.55.28;	author acolomba;	state Exp;
branches;
next	;

1.3.4.1
date	2006.01.16.00.22.14;	author acolomba;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2006.02.11.20.21.43;	author acolomba;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2006.04.08.21.40.41;	author acolomba;	state Exp;
branches;
next	;

1.4.4.1
date	2007.01.27.04.16.38;	author acolomba;	state Exp;
branches;
next	;


desc
@@


1.5
log
@merged from rel-0-5-dev
@
text
@;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005-2006
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.

;;; This tic-tac-toe program uses schelog to play against the human It
;;; substitutes the previous two-player example by the same name
;;; written by Scott G. Miller, which remains available at:
;;; http://cvs.sourceforge.net/viewcvs.py/siscweb/siscweb/examples/scm/examples/tic-tac-toe.scm?rev=1.2.4.1&view=markup

(require-library 'sisc/libs/srfi/srfi-1) ; list library
(require-library 'sisc/libs/srfi/srfi-42) ; eager comprehensions

(require-library 'siscweb/xhtml)
(require-library 'schelog)

(module examples/tic-tac-toe
  (tic-tac-toe)

  (import srfi-1)
  (import srfi-42)

  (import siscweb/bindings)
  (import siscweb/xhtml)

  (import schelog)


  (define (tic-tac-toe req)
    (set! req #f)
    (%which (winner)
      (%play (make-board) 'x winner)))


  ;; controller (in prolog? sure, why not)
  (define %play
    (%rel (board board2 player winner dummy)
      ;; in case of winner or draw,
      ;; shows the final board
      ((board player 'x)
       (%xwins board)
       (%is dummy (gameover board 'x)))
      ((board player 'o)
       (%owins board)
       (%is dummy (gameover board 'o)))
      ((board player 'd)
       (%gameover board)
       (%is dummy (gameover board 'd)))

      ;; Otherwise plays human or computer
      ((board 'o winner)
       (%move-human board 'o board2)
       (%play board2 'x winner))
      ((board 'x winner)
       (%move-computer board 'x board2)
       (%play board2 'o winner))))


  ;; asks the human for a move
  (define %move-human
    (%rel (board sign board2 pos)
      ((board sign board2)
       (%is pos (read-move board sign))
       (%is board2 (board-move board pos sign)))))

  ;; makes a move based on the strategy (see below)
  (define %move-computer
    (%rel (board sign board2 pos)
      ((board sign board2)
       ;; NB: sign is not used b/c the logic
       ;; is hard-coded for the computer to play X
       (%make-move board pos)
       (%is board2 (board-move board pos sign)))))



  ;; view
  (define (read-move board sign)
    (extract-single-binding
     'pos
     (get-bindings
      (send-xhtml/suspend
       (lambda (k-url)
         (make-read-move-page board sign))))))

  (define (make-read-move-page board sign)
    `(*TOP*
      (*PI* xml "version=\"1.0\"")
      (*DTD-INFO/PUBLIC* "html"
                         "-//W3C//DTD XHTML 1.0 Strict//EN"
                         "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
      (html (@@ (xmlns "http://www.w3.org/1999/xhtml")
               (xml:lang "en") (lang "en"))
       (head
        (title "Tic Tac Toe")
        (link (@@ (href-c "/css/default.css")
                 (rel "stylesheet")
                 (type "text/css"))))
       (body
        (h3 "Tic Tac Toe")
        ,(make-board-table board sign)
        (p (a (@@ (href-p ,tic-tac-toe)) "Start a new game >"))
        (p (a (@@ (href-c "/")) "^ Home"))))))


  (define (gameover board winner)
    (send-xhtml/back
     `(*TOP*
       (*PI* xml "version=\"1.0\"")
       (*DTD-INFO/PUBLIC* "html"
                          "-//W3C//DTD XHTML 1.0 Strict//EN"
                          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
       (html (@@ (xmlns "http://www.w3.org/1999/xhtml")
                (xml:lang "en") (lang "en"))
        (head
         (title "Tic Tac Toe")
         (link (@@ (href-c "/css/default.css")
                  (rel "stylesheet")
                  (type "text/css"))))
        (body
         (h3 "Tic Tac Toe")
         (h2 ,(case winner
                ((x) "X wins")
                ((o) "O wins")
                ((d) "DRAW")))
         ,(make-board-table board 'n)
         (p (a (@@ (href-p ,tic-tac-toe)) "Start a new game >"))
         (p (a (@@ (href-c "/")) "^ Home")))))))


  (define (make-board-table board sign)
    `(table (@@ (style "font-size: xx-large; border-style: 1px solid grey;")
               (border 1) (cellspacing 0))
      ,@@(list-ec
         (:range i 0 3)
         `(tr
           ,@@(list-ec
              (:range j 0 3)
              `(td (@@ (class "tic-tac-toe"))
                ,(let ((pos (+ (* 3 i) j 1))) ; 1 to 9
                   (case (board-ref board pos)
                     ((x) "X")
                     ((o) "O")
                     (else
                      (case sign
                        ((x o)
                          `(a (@@ (class "tic-tac-toe")
                                 (bindings ((pos . ,pos))))
                              ,(if (eq? sign 'x) "X" "O")))
                        (else
                         `(& nbsp))))))))))))


  ;;; model

  ;; a literal is fine as long as we don't alter it
  (define (make-board)
    '(e e e e e e e e e))

  ;; returns the cell value in position 1 <= n <= 9
  (define (board-ref board pos)
    (list-ref board (- pos 1)))

  ;; returns a zipper list reflecting the move
  (define (board-move board pos sign)
    (append (take board (- pos 1))
            (cons sign
                  (drop board pos))))



  ;; play strategy; ported to schelog from
  ;; www.cs.fsu.edu/~engelen/courses/COP402002/notes.pdf
  ;; the map:
  ;; 1 2 3
  ;; 4 5 6
  ;; 7 8 9

  ;; a cell; it doubles as a last-resort cell choice
  (define %cell
    (%rel (n) ((5)) ((1)) ((3)) ((7)) ((9)) ((2)) ((4)) ((6)) ((8))))

  ;; the winning lines on the board, ordered
  (define %ordered-line
    (%rel ()
      ((1 2 3))
      ((4 5 6))
      ((7 8 9))
      ((1 4 7))
      ((2 5 8))
      ((3 6 9))
      ((1 5 9))
      ((3 5 7))))

  ;; a winning line is a permutation of any winning ordered line
  (define %line
    (%rel (a b c)
      ((a b c)
       (%or (%ordered-line a b c)
            (%ordered-line a c b)
            (%ordered-line b a c)
            (%ordered-line b c a)
            (%ordered-line c a b)
            (%ordered-line c b a)))))

  ;; is a given position taken by player X?
  (define %x
    (%rel (board pos)
      ((board pos)
       (%cell pos)
       (%is #t (eq? 'x (board-ref board pos))))))

  ;; is a given position taken by player O?
  (define %o
    (%rel (board pos)
      ((board pos)
       (%cell pos)
       (%is #t (eq? 'o (board-ref board pos))))))

  ;; is a given position occupied?
  (define %full
    (%rel (board pos)
      ((board pos)
       (%or (%x board pos)
            (%o board pos)))))

  ;; is a given position empty?
  (define %empty
    (%rel (board pos)
      ((board pos)
       (%cell pos)
       (%not (%full board pos)))))

  ;; a winning move is one that completes a winning line
  (define %win
    (%rel (board a b c)
      ((board a)
       (%line a b c)
       (%x board b)
       (%x board c))))

  ;; a non-losing move is one that block the opponent from winning
  (define %block-win
    (%rel (board a b c)
      ((board a)
       (%line a b c)
       (%o board b)
       (%o board c))))

  ;; a move that makes a split is one at the intersection of
  ;; two winning lines, one element of each line is already
  ;; ours, and the other is still empty
  (define %split
    (%rel (board a b c d e)
      ((board a)
       (%x board b)
       (%x board c)
       (%=/= b c)
       (%line a b d)
       (%line a c e)
       (%empty board d)
       (%empty board e))))

  ;; same rule as above, but to prevent the opponent from
  ;; making a split
  (define %block-split
    (%rel (board a b c d e)
      ((board a)
       (%o board b)
       (%o board c)
       (%=/= b c)
       (%line board a b d)
       (%line board a c e)
       (%empty board d)
       (%empty board e))))

  ;; a move that builds a winning line is one that
  ;; starts from a cell already ours, and ends in a cell
  ;; that is still empty
  (define %build
    (%rel (board a b c)
      ((board a)
       (%x board b)
       (%line a b c)
       (%empty board c))))

  ;; a good move is one of the above moves, in order
  ;; of strategic importance
  (define %good
    (%rel (board pos)
      ((board pos)
       (%or (%win board pos)
            (%block-win board pos)
            (%split board pos)
            (%block-split board pos)
            (%build board pos)
            (%cell pos)))))

  ;; an actual move is a good move on an empty cell
  (define %make-move
    (%rel (board pos)
      ((board pos)
       (%good board pos)
       (%empty board pos))))

  ;; X wins if it occupies a winning line
  (define %xwins
    (%rel (board a b c)
      ((board)
       (%x board a)
       (%x board b)
       (%x board c)
       (%line a b c))))

  ;; O wins if it occupies a winning line
  (define %owins
    (%rel (board a b c)
      ((board)
       (%o board a)
       (%o board b)
       (%o board c)
       (%line a b c))))

  ;; the game is over if no cells are free
  (define %gameover
    (%rel (board any)
      ((board)
       (%not
        (%and (%cell any)
              (%empty board any))))))

  ;; a draw is a gameover with no winners
  (define %draw
    (%rel (board any)
      ((board)
       (%not (%xwins board))
       (%not (%owins board))
       (%gameover board))))
  )
@


1.4
log
@merged from rel-0-4-dev
@
text
@d173 1
a173 1
                                 (bindings ((pos ,pos))))
@


1.4.4.1
log
@single @@bindings are now sent as such
@
text
@d173 1
a173 1
                                 (bindings ((pos . ,pos))))
@


1.3
log
@merged from rel-0-3-dev
@
text
@d14 1
a14 1
;;; Portions created by the Initial Developer are Copyright (C) 2005
d32 1
a32 1
;;; substituted the previous two-player example by the same name
d38 2
a39 1
(require-library 'siscweb/html)
a47 1
  (import siscweb/html)
d49 1
d107 1
a107 1
      (send-html/suspend
d112 7
a118 16
    `(html
      (head
       (title "Tic Tac Toe")
       (link (@@ (href-c "/css/default.css")
                (rel "stylesheet")
                (type "text/css"))))
      (body
       (h3 "Tic Tac Toe")
       ,(make-board-table board sign)
       (p (a (@@ (href-p ,tic-tac-toe)) "Start a new game >"))
       (p (a (@@ (href-c "/")) "^ Home")))))


  (define (gameover board winner)
    (send-html/back
     `(html
d126 1
a126 5
        (h2 ,(case winner
               ((x) "X wins")
               ((o) "O wins")
               ((d) "DRAW")))
        ,(make-board-table board 'n)
d131 24
@


1.3.2.1
log
@merged from rel-0-4-dev-sisc-1-11
@
text
@d32 1
a32 1
;;; substitutes the previous two-player example by the same name
d38 1
a38 2

(require-library 'siscweb/xhtml)
d47 1
a48 1
  (import siscweb/xhtml)
d106 1
a106 1
      (send-xhtml/suspend
d111 16
a126 6
    `(*TOP*
      (*DTD-INFO/PUBLIC* "html"
                         "-//W3C//DTD XHTML 1.0 Strict//EN"
                         "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
      (html (@@ (xmlns "http://www.w3.org/1999/xhtml")
               (xml:lang "en") (lang "en"))
d134 5
a138 1
        ,(make-board-table board sign)
a142 23
  (define (gameover board winner)
    (send-xhtml/back
     `(*TOP*
       (*DTD-INFO/PUBLIC* "html"
                          "-//W3C//DTD XHTML 1.0 Strict//EN"
                          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
       (html (@@ (xmlns "http://www.w3.org/1999/xhtml")
                (xml:lang "en") (lang "en"))
        (head
         (title "Tic Tac Toe")
         (link (@@ (href-c "/css/default.css")
                  (rel "stylesheet")
                  (type "text/css"))))
        (body
         (h3 "Tic Tac Toe")
         (h2 ,(case winner
                ((x) "X wins")
                ((o) "O wins")
                ((d) "DRAW")))
         ,(make-board-table board 'n)
         (p (a (@@ (href-p ,tic-tac-toe)) "Start a new game >"))
         (p (a (@@ (href-c "/")) "^ Home")))))))

@


1.3.2.2
log
@merged from rel-0-4-dev
@
text
@d14 1
a14 1
;;; Portions created by the Initial Developer are Copyright (C) 2005-2006
a112 1
      (*PI* xml "version=\"1.0\"")
a132 1
       (*PI* xml "version=\"1.0\"")
@


1.3.4.1
log
@added DOCTYPE declarations
@
text
@d111 16
a126 4
    `(*TOP*
      (*DTD-INFO/PUBLIC* |HTML| "-//W3C//DTD HTML 4.01 Transitional//EN"
                         "http://www.w3.org/TR/html4/loose.dtd")
      (html
d134 5
a138 1
        ,(make-board-table board sign)
a142 21
  (define (gameover board winner)
    (send-html/back
     `(*TOP*
       (*DTD-INFO/PUBLIC* |HTML| "-//W3C//DTD HTML 4.01 Transitional//EN"
                          "http://www.w3.org/TR/html4/loose.dtd")
       (html
        (head
         (title "Tic Tac Toe")
         (link (@@ (href-c "/css/default.css")
                  (rel "stylesheet")
                  (type "text/css"))))
        (body
         (h3 "Tic Tac Toe")
         (h2 ,(case winner
                ((x) "X wins")
                ((o) "O wins")
                ((d) "DRAW")))
         ,(make-board-table board 'n)
         (p (a (@@ (href-p ,tic-tac-toe)) "Start a new game >"))
         (p (a (@@ (href-c "/")) "^ Home")))))))

@


1.3.4.2
log
@now outputs compliant xhtml
@
text
@d32 1
a32 1
;;; substitutes the previous two-player example by the same name
d38 1
a38 2

(require-library 'siscweb/xhtml)
d47 1
a48 1
  (import siscweb/xhtml)
d106 1
a106 1
      (send-xhtml/suspend
d112 3
a114 5
      (*DTD-INFO/PUBLIC* "html"
                         "-//W3C//DTD XHTML 1.0 Strict//EN"
                         "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
      (html (@@ (xmlns "http://www.w3.org/1999/xhtml")
               (xml:lang "en") (lang "en"))
d128 1
a128 1
    (send-xhtml/back
d130 3
a132 5
       (*DTD-INFO/PUBLIC* "html"
                          "-//W3C//DTD XHTML 1.0 Strict//EN"
                          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
       (html (@@ (xmlns "http://www.w3.org/1999/xhtml")
                (xml:lang "en") (lang "en"))
@


1.3.4.3
log
@explicitely outputs <?xml pi in pages
@
text
@d14 1
a14 1
;;; Portions created by the Initial Developer are Copyright (C) 2005-2006
a112 1
      (*PI* xml "version=\"1.0\"")
a132 1
       (*PI* xml "version=\"1.0\"")
@


1.2
log
@merged from rel-0-2-dev
@
text
@d11 1
a11 1
;;; The Original Code is tic-tac-toe.scm
d13 1
a13 1
;;; The Initial Developer of the Original Code is Scott G. Miller
d15 1
a15 1
;;; Scott G. Miller. All Rights Reserved.
a17 1
;;;     Alessandro Colomba
d31 4
d36 2
d39 1
a39 2
(require-library 'siscweb/bindings)
(require-library 'sisc/libs/srfi/srfi-1)
d44 3
a48 1
  (import srfi-1)
d50 2
a51 2
  (define (char->number n)
    (- (char->integer n) (char->integer #\0)))
d53 69
a121 88
  (define (process-move x-turn move rows)
    (if (string? move)
        (let* ([row (char->number (string-ref move 0))]
               [column (char->number (string-ref move 1))]
               [idx (+ column (* 3 row))])
          (append (take rows idx)
                  (cons (if x-turn "X" "O")
                        (drop rows (+ 1 idx)))))
        rows))

  (define (skip-threes ls)
    (cond [(null? ls) '()]
          [else (cons (car ls)
                      (if (> (length ls) 3)
                          (skip-threes (drop ls 3))
                          '()))]))

  (define (row-match-help rows)
    (let ([first (first rows)]
          [helpfunc (lambda (knil elem)
                      (and (equal? knil elem) knil))])
      (and (fold helpfunc first (skip-threes rows)) first)))

  (define (row-match rows)
    (or (row-match-help rows)
        (row-match-help (cdr rows))
        (row-match-help (cddr rows))))

  (define (column-match rows)
    (if (null? rows) #f
        (let loop ([r (cdr rows)] [n 2] [v (car rows)])
          (cond [(zero? n) v]
                [(equal? v (car r))
                 (loop (cdr r) (- n 1) v)]
                [else
                 (column-match (drop r n))]))))

  (define (diagonal-match rows)
    (or (and (equal? (list-ref rows 0)
                     (list-ref rows 4))
             (equal? (list-ref rows 4)
                     (list-ref rows 8))
             (first rows))
        (and (equal? (list-ref rows 2)
                     (list-ref rows 4))
             (equal? (list-ref rows 4)
                     (list-ref rows 6))
             (third rows))))

  (define (evaluate-game rows)
    (or (row-match rows)
        (column-match rows)
        (diagonal-match rows)
        (and (andmap (lambda (x) x) rows) 'cat)))

  (define (board k-url rows)
    `(form (@@ (name "move") (method "post") (action-e ,(if k-url k-url "")))
      (table (@@ (border "1"))
       ,@@(map (lambda (rownum)
                `(tr ,@@(map (lambda (colnum column-value)
                              `(td (@@ (width "40")
                                      (align "center"))
                                ,(if column-value
                                     column-value
                                     (if (not k-url)
                                         "--"
                                         `(input (@@ (type "submit")
                                                    (name "move")
                                                    (value ,(format "~a~a" rownum colnum))))))))
                            '(0 1 2)
                            (take (drop rows (* rownum 3)) 3))))
              '(0 1 2)))))

  (define (tic-tac-page rows)
    (lambda (k-url)
      `(html
        (head
         (title "Tic Tac Toe")
         (link (@@ (href-c "/css/default.css")
                  (rel "stylesheet")
                  (type "text/css"))))
        (body
         (h2 "Tic Tac Toe")
         (p
          ,(board k-url rows))
         (p (a (@@ (dispatch ,tic-tac-toe)) "Start Over"))
         (p (a (@@ (href-e ,k-url) (target "_blank")) "Clone me!"))
         (p (a (@@ (href-c "/")) "^ Home"))))))
d124 1
a124 1
  (define (game-over rows reason)
d127 5
a131 5
        (head
         (title "Tic Tac Toe")
         (link (@@ (rel "stylesheet")
                  (href-c "/css/default.css")
                  (type "text/css"))))
d133 7
a139 4
        (h2 ,reason)
        (p
         ,(board #f rows))
        (p (a (@@ (dispatch ,tic-tac-toe)) "Start Over"))
a141 16
  (define (tic-tac-step x-turn rows)
    (let ([game-state (evaluate-game rows)])
      (cond [(eq? game-state 'cat)
             (game-over rows "Cat!")]
            [(string? game-state)
             (game-over rows
                        (if (string=? game-state "X")
                            "X Wins!"
                            "O Wins!"))]
            [else
             (let-bindings ((move "move"))
                           (get-bindings
                            (send-html/suspend
                             (tic-tac-page rows)))
               (tic-tac-step (not x-turn)
                             (process-move x-turn move rows)))))))
a142 2
  (define (tic-tac-toe request)
    (tic-tac-step #t (list #f #f #f #f #f #f #f #f #f))))
d144 209
@


1.2.2.1
log
@merged from rel-0-3-dev
@
text
@d132 1
a132 1
         (p (a (@@ (href-p ,tic-tac-toe)) "Start Over"))
d149 1
a149 1
        (p (a (@@ (href-p ,tic-tac-toe)) "Start Over"))
@


1.2.4.1
log
@replaced deprecated @@dispatch with @@href-p
@
text
@d132 1
a132 1
         (p (a (@@ (href-p ,tic-tac-toe)) "Start Over"))
d149 1
a149 1
        (p (a (@@ (href-p ,tic-tac-toe)) "Start Over"))
@


1.2.4.2
log
@rewritten in schelog
@
text
@d11 1
a11 1
;;; The Original Code is SISCweb.
d13 1
a13 1
;;; The Initial Developer of the Original Code is Alessandro Colomba.
d15 1
a15 1
;;; Alessandro Colomba. All Rights Reserved.
d18 1
a31 4
;;; This tic-tac-toe program uses schelog to play against the human It
;;; substituted the previous two-player example by the same name
;;; written by Scott G. Miller, which remains available at:
;;; http://cvs.sourceforge.net/viewcvs.py/siscweb/siscweb/examples/scm/examples/tic-tac-toe.scm?rev=1.2.4.1&view=markup
a32 2
(require-library 'sisc/libs/srfi/srfi-1) ; list library
(require-library 'sisc/libs/srfi/srfi-42) ; eager comprehensions
d34 2
a35 1
(require-library 'schelog)
a39 3
  (import srfi-1)
  (import srfi-42)

d42 1
d44 2
a45 2
  (import schelog)

d47 88
a134 69
  (define (tic-tac-toe req)
    (set! req #f)
    (%which (winner)
      (%play (make-board) 'x winner)))


  ;; controller (in prolog? sure, why not)
  (define %play
    (%rel (board board2 player winner dummy)
      ;; in case of winner or draw,
      ;; shows the final board
      ((board player 'x)
       (%xwins board)
       (%is dummy (gameover board 'x)))
      ((board player 'o)
       (%owins board)
       (%is dummy (gameover board 'o)))
      ((board player 'd)
       (%gameover board)
       (%is dummy (gameover board 'd)))

      ;; Otherwise plays human or computer
      ((board 'o winner)
       (%move-human board 'o board2)
       (%play board2 'x winner))
      ((board 'x winner)
       (%move-computer board 'x board2)
       (%play board2 'o winner))))


  ;; asks the human for a move
  (define %move-human
    (%rel (board sign board2 pos)
      ((board sign board2)
       (%is pos (read-move board sign))
       (%is board2 (board-move board pos sign)))))

  ;; makes a move based on the strategy (see below)
  (define %move-computer
    (%rel (board sign board2 pos)
      ((board sign board2)
       ;; NB: sign is not used b/c the logic
       ;; is hard-coded for the computer to play X
       (%make-move board pos)
       (%is board2 (board-move board pos sign)))))



  ;; view
  (define (read-move board sign)
    (extract-single-binding
     'pos
     (get-bindings
      (send-html/suspend
       (lambda (k-url)
         (make-read-move-page board sign))))))

  (define (make-read-move-page board sign)
    `(html
      (head
       (title "Tic Tac Toe")
       (link (@@ (href-c "/css/default.css")
                (rel "stylesheet")
                (type "text/css"))))
      (body
       (h3 "Tic Tac Toe")
       ,(make-board-table board #f)
       (p (a (@@ (href-p ,tic-tac-toe)) "Start a new game >"))
       (p (a (@@ (href-c "/")) "^ Home")))))
d137 1
a137 1
  (define (gameover board winner)
d140 5
a144 5
       (head
        (title "Tic Tac Toe")
        (link (@@ (href-c "/css/default.css")
                 (rel "stylesheet")
                 (type "text/css"))))
d146 4
a149 7
        (h3 "Tic Tac Toe")
        (h2 ,(case winner
               ((x) "X wins")
               ((o) "O wins")
               ((d) "DRAW")))
        ,(make-board-table board #t)
        (p (a (@@ (href-p ,tic-tac-toe)) "Start a new game >"))
d152 16
d169 2
a171 206
  (define (make-board-table board game-over?)
    `(table (@@ (style "font-size: xx-large; border-style: 1px solid grey;")
               (border 1) (cellspacing 0))
      ,@@(list-ec
         (:range i 0 3)
         `(tr
           ,@@(list-ec
              (:range j 0 3)
              `(td
                ,(let ((pos (+ (* 3 i) j 1))) ; 1 to 9
                   (case (board-ref board pos)
                     ((x) "X")
                     ((o) "O")
                     (else
                      (if game-over?
                          `(& nbsp)
                          `(a (@@ (bindings ((pos ,pos))))
                              "#")))))))))))


  ;;; model

  ;; a literal is fine as long as we don't alter it
  (define (make-board)
    '(e e e e e e e e e))

  ;; returns the cell value in position 1 <= n <= 9
  (define (board-ref board pos)
    (list-ref board (- pos 1)))

  ;; returns a zipper list reflecting the move
  (define (board-move board pos sign)
    (append (take board (- pos 1))
            (cons sign
                  (drop board pos))))



  ;; play strategy; ported to schelog from
  ;; www.cs.fsu.edu/~engelen/courses/COP402002/notes.pdf
  ;; the map:
  ;; 1 2 3
  ;; 4 5 6
  ;; 7 8 9

  ;; a cell; it doubles as a last-resort cell choice
  (define %cell
    (%rel (n) ((5)) ((1)) ((3)) ((7)) ((9)) ((2)) ((4)) ((6)) ((8))))

  ;; the winning lines on the board, ordered
  (define %ordered-line
    (%rel ()
      ((1 2 3))
      ((4 5 6))
      ((7 8 9))
      ((1 4 7))
      ((2 5 8))
      ((3 6 9))
      ((1 5 9))
      ((3 5 7))))

  ;; a winning line is a permutation of any winning ordered line
  (define %line
    (%rel (a b c)
      ((a b c)
       (%or (%ordered-line a b c)
            (%ordered-line a c b)
            (%ordered-line b a c)
            (%ordered-line b c a)
            (%ordered-line c a b)
            (%ordered-line c b a)))))

  ;; is a given position taken by player X?
  (define %x
    (%rel (board pos)
      ((board pos)
       (%cell pos)
       (%is #t (eq? 'x (board-ref board pos))))))

  ;; is a given position taken by player O?
  (define %o
    (%rel (board pos)
      ((board pos)
       (%cell pos)
       (%is #t (eq? 'o (board-ref board pos))))))

  ;; is a given position occupied?
  (define %full
    (%rel (board pos)
      ((board pos)
       (%or (%x board pos)
            (%o board pos)))))

  ;; is a given position empty?
  (define %empty
    (%rel (board pos)
      ((board pos)
       (%cell pos)
       (%not (%full board pos)))))

  ;; a winning move is one that completes a winning line
  (define %win
    (%rel (board a b c)
      ((board a)
       (%line a b c)
       (%x board b)
       (%x board c))))

  ;; a non-losing move is one that block the opponent from winning
  (define %block-win
    (%rel (board a b c)
      ((board a)
       (%line a b c)
       (%o board b)
       (%o board c))))

  ;; a move that makes a split is one at the intersection of
  ;; two winning lines, one element of each line is already
  ;; ours, and the other is still empty
  (define %split
    (%rel (board a b c d e)
      ((board a)
       (%x board b)
       (%x board c)
       (%=/= b c)
       (%line a b d)
       (%line a c e)
       (%empty board d)
       (%empty board e))))

  ;; same rule as above, but to prevent the opponent from
  ;; making a split
  (define %block-split
    (%rel (board a b c d e)
      ((board a)
       (%o board b)
       (%o board c)
       (%=/= b c)
       (%line board a b d)
       (%line board a c e)
       (%empty board d)
       (%empty board e))))

  ;; a move that builds a winning line is one that
  ;; starts from a cell already ours, and ends in a cell
  ;; that is still empty
  (define %build
    (%rel (board a b c)
      ((board a)
       (%x board b)
       (%line a b c)
       (%empty board c))))

  ;; a good move is one of the above moves, in order
  ;; of strategic importance
  (define %good
    (%rel (board pos)
      ((board pos)
       (%or (%win board pos)
            (%block-win board pos)
            (%split board pos)
            (%block-split board pos)
            (%build board pos)
            (%cell pos)))))

  ;; an actual move is a good move on an empty cell
  (define %make-move
    (%rel (board pos)
      ((board pos)
       (%good board pos)
       (%empty board pos))))

  ;; X wins if it occupies a winning line
  (define %xwins
    (%rel (board a b c)
      ((board)
       (%x board a)
       (%x board b)
       (%x board c)
       (%line a b c))))

  ;; O wins if it occupies a winning line
  (define %owins
    (%rel (board a b c)
      ((board)
       (%o board a)
       (%o board b)
       (%o board c)
       (%line a b c))))

  ;; the game is over if no cells are free
  (define %gameover
    (%rel (board any)
      ((board)
       (%not
        (%and (%cell any)
              (%empty board any))))))

  ;; a draw is a gameover with no winners
  (define %draw
    (%rel (board any)
      ((board)
       (%not (%xwins board))
       (%not (%owins board))
       (%gameover board))))
  )
@


1.2.4.3
log
@stylistic changes
@
text
@d119 1
a119 1
       ,(make-board-table board sign)
d138 1
a138 1
        ,(make-board-table board 'n)
d144 1
a144 1
  (define (make-board-table board sign)
d152 1
a152 1
              `(td (@@ (class "tic-tac-toe"))
d158 4
a161 7
                      (case sign
                        ((x o)
                          `(a (@@ (class "tic-tac-toe")
                                 (bindings ((pos ,pos))))
                              ,(if (eq? sign 'x) "X" "O")))
                        (else
                         `(& nbsp))))))))))))
@


1.1
log
@file tic-tac-toe.scm was initially added on branch rel-0-1-fix.
@
text
@d1 171
@


1.1.4.1
log
@merged from rel-0-1-fix
@
text
@a0 161
;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is tic-tac-toe.scm
;;;
;;; The Initial Developer of the Original Code is Scott G. Miller
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Scott G. Miller. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.


(require-library 'siscweb/html)
(require-library 'siscweb/bindings)
(require-library 'sisc/libs/srfi/srfi-1)

(module examples/tic-tac-toe
  (tic-tac-toe)

  (import siscweb/html)
  (import siscweb/bindings)
  (import srfi-1)

  (define (char->number n)
    (- (char->integer n) (char->integer #\0)))

  (define (process-move x-turn move rows)
    (if (string? move)
        (let* ([row (char->number (string-ref move 0))]
               [column (char->number (string-ref move 1))]
               [idx (+ column (* 3 row))])
          (append (take rows idx)
                  (cons (if x-turn "X" "O")
                        (drop rows (+ 1 idx)))))
        rows))

  (define (skip-threes ls)
    (cond [(null? ls) '()]
          [else (cons (car ls)
                      (if (> (length ls) 3)
                          (skip-threes (drop ls 3))
                          '()))]))

  (define (row-match-help rows)
    (let ([first (first rows)]
          [helpfunc (lambda (knil elem)
                      (and (equal? knil elem) knil))])
      (and (fold helpfunc first (skip-threes rows)) first)))

  (define (row-match rows)
    (or (row-match-help rows)
        (row-match-help (cdr rows))
        (row-match-help (cddr rows))))

  (define (column-match rows)
    (if (null? rows) #f
        (let loop ([r (cdr rows)] [n 2] [v (car rows)])
          (cond [(zero? n) v]
                [(equal? v (car r))
                 (loop (cdr r) (- n 1) v)]
                [else
                 (column-match (drop r n))]))))

  (define (diagonal-match rows)
    (or (and (equal? (list-ref rows 0)
                     (list-ref rows 4))
             (equal? (list-ref rows 4)
                     (list-ref rows 8))
             (first rows))
        (and (equal? (list-ref rows 2)
                     (list-ref rows 4))
             (equal? (list-ref rows 4)
                     (list-ref rows 6))
             (third rows))))

  (define (evaluate-game rows)
    (or (row-match rows)
        (column-match rows)
        (diagonal-match rows)
        (and (andmap (lambda (x) x) rows) 'cat)))

  (define (board k-url rows)
    `(form (@@ (name "move") (method "post") (action ,k-url))
      (table (@@ (border "1"))
       ,@@(map (lambda (rownum)
                `(tr ,@@(map (lambda (colnum column-value)
                              `(td (@@ (width "40")
                                      (align "center"))
                                ,(or column-value
                                     (and (not k-url) "--")
                                     `(input (@@ (type "submit")
                                                (name "move")
                                                (value ,(format "~a~a" rownum colnum)))))))
                            '(0 1 2)
                            (take (drop rows (* rownum 3)) 3))))
              '(0 1 2)))))

  (define (tic-tac-page rows)
    (lambda (k-url)
      `(html
        (body
         (h1 "Tic Tac Toe")
         (p
          ,(board k-url rows))
         (p
          (a (@@ (href "."))
           "Start Over."))
         (p (a (@@ (href ,k-url) (target "_blank")) "Clone me!"))
         (p (a (@@ (href "/siscweb-examples/")) "^ Home"))))))


  (define (game-over rows reason)
    (send-html/back
     `(html
       (body
        (h1 ,reason)
        (p
         ,(board #f rows))
        (p
         (a (@@ (href "."))
            "Start Over"))
         (p (a (@@ (href "/siscweb-examples/")) "^ Home"))))))

  (define (tic-tac-step x-turn rows)
    (let ([game-state (evaluate-game rows)])
      (cond [(eq? game-state 'cat)
             (game-over rows "Cat!")]
            [(string? game-state)
             (game-over rows
                        (if (string=? game-state "X")
                            "X Wins!"
                            "O Wins!"))]
            [else
             (let-bindings ((move "move"))
                           (get-bindings
                            (send-html/suspend
                             (tic-tac-page rows)))
               (tic-tac-step (not x-turn)
                             (process-move x-turn move rows)))))))

  (define (tic-tac-toe request)
    (tic-tac-step #t (list #f #f #f #f #f #f #f #f #f))))
@


1.1.4.2
log
@now uses context-href and stylesheet; minor aestethic changes
@
text
@a119 5
        (head
         (title "Tic Tac Toe")
         (link (@@ (context-href "/css/default.css")
                  (rel "stylesheet")
                  (type "text/css"))))
d121 1
a121 1
         (h2 "Tic Tac Toe")
d124 3
a126 1
         (p (url-dispatch ,tic-tac-toe "Start Over"))
d128 1
a128 1
         (p (a (@@ (context-href "/")) "^ Home"))))))
a133 5
        (head
         (title "Tic Tac Toe")
         (link (@@ (rel "stylesheet")
                  (context-href "/siscweb-examples/css/default.css")
                  (type "text/css"))))
d135 1
a135 1
        (h2 ,reason)
d138 4
a141 2
        (p (url-dispatch ,tic-tac-toe "Start Over"))
        (p (a (@@ (context-href "/")) "^ Home"))))))
a161 1

@


1.1.4.3
log
@modified to match changes in siscweb/html
@
text
@d102 1
a102 1
    `(form (@@ (name "move") (method "post") (action-e ,k-url))
d122 1
a122 1
         (link (@@ (href-c "/css/default.css")
d129 3
a131 3
         (p (a (@@ (dispatch ,tic-tac-toe)) "Start Over"))
         (p (a (@@ (href-e ,k-url) (target "_blank")) "Clone me!"))
         (p (a (@@ (href-c "/")) "^ Home"))))))
d140 1
a140 1
                  (href-c "/css/default.css")
d146 2
a147 2
        (p (a (@@ (dispatch ,tic-tac-toe)) "Start Over"))
        (p (a (@@ (href-c "/")) "^ Home"))))))
@


1.1.4.4
log
@ugly fix to avoid putting #f in the sxml
@
text
@a17 1
;;;     Alessandro Colomba
d102 1
a102 1
    `(form (@@ (name "move") (method "post") (action-e ,(if k-url k-url "")))
d108 5
a112 7
                                ,(if column-value
                                     column-value
                                     (if (not k-url)
                                         "--"
                                         `(input (@@ (type "submit")
                                                    (name "move")
                                                    (value ,(format "~a~a" rownum colnum))))))))
@


1.1.2.1
log
@initial import
@
text
@a0 161
;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is tic-tac-toe.scm
;;;
;;; The Initial Developer of the Original Code is Scott G. Miller
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Scott G. Miller. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.


(require-library 'siscweb/html)
(require-library 'siscweb/bindings)
(require-library 'sisc/libs/srfi/srfi-1)

(module examples/tic-tac-toe
  (tic-tac-toe)

  (import siscweb/html)
  (import siscweb/bindings)
  (import srfi-1)

  (define (char->number n)
    (- (char->integer n) (char->integer #\0)))

  (define (process-move x-turn move rows)
    (if (string? move)
        (let* ([row (char->number (string-ref move 0))]
               [column (char->number (string-ref move 1))]
               [idx (+ column (* 3 row))])
          (append (take rows idx)
                  (cons (if x-turn "X" "O")
                        (drop rows (+ 1 idx)))))
        rows))

  (define (skip-threes ls)
    (cond [(null? ls) '()]
          [else (cons (car ls)
                      (if (> (length ls) 3)
                          (skip-threes (drop ls 3))
                          '()))]))

  (define (row-match-help rows)
    (let ([first (first rows)]
          [helpfunc (lambda (knil elem)
                      (and (equal? knil elem) knil))])
      (and (fold helpfunc first (skip-threes rows)) first)))

  (define (row-match rows)
    (or (row-match-help rows)
        (row-match-help (cdr rows))
        (row-match-help (cddr rows))))

  (define (column-match rows)
    (if (null? rows) #f
        (let loop ([r (cdr rows)] [n 2] [v (car rows)])
          (cond [(zero? n) v]
                [(equal? v (car r))
                 (loop (cdr r) (- n 1) v)]
                [else
                 (column-match (drop r n))]))))

  (define (diagonal-match rows)
    (or (and (equal? (list-ref rows 0)
                     (list-ref rows 4))
             (equal? (list-ref rows 4)
                     (list-ref rows 8))
             (first rows))
        (and (equal? (list-ref rows 2)
                     (list-ref rows 4))
             (equal? (list-ref rows 4)
                     (list-ref rows 6))
             (third rows))))

  (define (evaluate-game rows)
    (or (row-match rows)
        (column-match rows)
        (diagonal-match rows)
        (and (andmap (lambda (x) x) rows) 'cat)))

  (define (board k-url rows)
    `(form (@@ (name "move") (method "post") (action ,k-url))
      (table (@@ (border "1"))
       ,@@(map (lambda (rownum)
                `(tr ,@@(map (lambda (colnum column-value)
                              `(td (@@ (width "40")
                                      (align "center"))
                                ,(or column-value
                                     (and (not k-url) "--")
                                     `(input (@@ (type "submit")
                                                (name "move")
                                                (value ,(format "~a~a" rownum colnum)))))))
                            '(0 1 2)
                            (take (drop rows (* rownum 3)) 3))))
              '(0 1 2)))))

  (define (tic-tac-page rows)
    (lambda (k-url)
      `(html
        (body
         (h1 "Tic Tac Toe")
         (p
          ,(board k-url rows))
         (p
          (a (@@ (href "."))
           "Start Over."))
         (p (a (@@ (href ,k-url) (target "_blank")) "Clone me!"))
         (p (a (@@ (href "/siscweb-examples/")) "^ Home"))))))


  (define (game-over rows reason)
    (send-html/back
     `(html
       (body
        (h1 ,reason)
        (p
         ,(board #f rows))
        (p
         (a (@@ (href "."))
            "Start Over"))
         (p (a (@@ (href "/siscweb-examples/")) "^ Home"))))))

  (define (tic-tac-step x-turn rows)
    (let ([game-state (evaluate-game rows)])
      (cond [(eq? game-state 'cat)
             (game-over rows "Cat!")]
            [(string? game-state)
             (game-over rows
                        (if (string=? game-state "X")
                            "X Wins!"
                            "O Wins!"))]
            [else
             (let-bindings ((move "move"))
                           (get-bindings
                            (send-html/suspend
                             (tic-tac-page rows)))
               (tic-tac-step (not x-turn)
                             (process-move x-turn move rows)))))))

  (define (tic-tac-toe request)
    (tic-tac-step #t (list #f #f #f #f #f #f #f #f #f))))
@

