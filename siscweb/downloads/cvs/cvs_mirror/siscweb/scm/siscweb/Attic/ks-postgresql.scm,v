head	1.1;
access;
symbols
	rel-0-3-dev-1:1.1.2.4
	rel-0-3-dev:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2005.08.20.01.31.53;	author acolomba;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.08.20.01.31.53;	author acolomba;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.08.20.01.36.08;	author acolomba;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2005.08.25.02.25.09;	author acolomba;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2005.08.28.14.37.02;	author acolomba;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2005.10.24.03.47.27;	author acolomba;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2005.11.17.02.49.39;	author acolomba;	state dead;
branches;
next	;


desc
@@


1.1
log
@file ks-postgresql.scm was initially added on branch rel-0-3-dev.
@
text
@@


1.1.2.1
log
@initial import
@
text
@a0 155
;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.


(require-library 'sisc/libs/srfi/srfi-19) ; time data types and procedures
(require-library 'sisc/libs/srfi/srfi-45) ; primitives for expressing iterative lazy algorithms

(require-library 'util/misc)
(require-library 'sql/jdbc)
(require-library 'sql/query)
(require-library 'sql/postgresql)

(module siscweb/k-store
  (ks/clear! ks/get ks/put!
   ks/open ks/close
   ks/purge-expired!)

  (import s2j)
  (import hashtable)

  (import srfi-19)
  (import srfi-45)

  (import util/misc)
  (import sql/jdbc)
  (import sql/query)
  (import sql/postgresql)

  (define-generic-java-methods
    (get-id |getId|))


  (define data-source #f)

  (define (get-connection)
    (jdbc/get-connection data-source))

  (define (ks/open ds)
    (set! data-source ds))

  (define (ks/close)
    (set! data-source #f))

  (define (ks/put! session-id hash k ttl parent-hash)
    (define insert-continuation-sql
      (string-append "INSERT INTO continuation\n"
                     "    (id, jsessionid, hash, creation_time, ttl, expiration_time, procedure, parent)\n"
                     "VALUES (nextval('continuation_seq'), ?, ?, ?, ?, ?, ?,\n"
                     "        (SELECT  id\n"
                     "         FROM    continuation\n"
                     "         WHERE   1=1\n"
                     "             AND jsessionid = ?\n"
                     "             AND hash = ?))"))
    (jdbc/call/conn
     (get-connection)
     (lambda (conn)
       (jdbc/call/tran
        conn
        (lambda (conn)
          (sql/execute-update conn insert-continuation-sql
                              session-id hash
                              (current-time)
                              ttl
                              (add-duration
                               (current-time)
                               (make-time 'time-duration 0 ttl))
                              k session-id parent-hash))))))
                              

  (define (ks/get session-id k-hash)
    (define select-continuation-sql
      (string-append "SELECT  procedure,\n"
                     "        ttl\n"
                     "FROM    continuation\n"
                     "WHERE   1=1\n"
                     "    AND jsessionid = ?\n"
                     "    AND hash = ?\n"))

    (define update-continuation-sql
      (string-append "UPDATE  continuation\n"
                     "    SET visit_time = ?,\n"
                     "        expiration_time = ?\n"
                     "WHERE   1=1\n"
                     "    AND jsessionid = ?\n"
                     "    AND hash = ?\n"))
    (let ((k #f))
      (jdbc/call/conn
       (get-connection)
       (lambda (conn)
         (jdbc/call/tran
          conn
          (lambda (conn)
            (sql/for-each-row (sql/execute-query conn select-continuation-sql
                                                 session-id k-hash)
                              ((proc 'procedure)
                               (ttl 'ttl))
                              (sql/execute-update conn update-continuation-sql
                                                  (current-time)
                                                  (add-duration
                                                   (current-time)
                                                   (make-time 'time-duration 0 ttl))
                                                  session-id k-hash)
                              (set! k proc))))))
      k))


  (define (ks/clear! session-id)
    (define delete-continuations-sql
      (string-append "DELETE FROM continuation\n"
                     "WHERE   1=1\n"
                     "    AND TRIM(jsessionid) = ?\n"))

    (jdbc/call/conn
     (get-connection)
     (lambda (c)
       (sql/execute-update c delete-continuations-sql session-id))))


  (define (ks/purge-expired!)
    (define purge-continuations-sql
      (string-append "DELETE FROM continuation\n"
                     "WHERE   1=1\n"
                     "    AND expiration_time < now()\n"))
    (jdbc/call/conn
     (get-connection)
     (lambda (c)
       (sql/execute-update c purge-continuations-sql))))
  )
@


1.1.2.2
log
@added Ben Simon as contributor
@
text
@a17 1
;;; Ben Simon
d95 1
a95 1

@


1.1.2.3
log
@added ks/setup, ks/teardown functions
@
text
@a42 1
   ks/setup ks/teardown
a155 34

  (define (ks/setup)
    (define create-table-continuation-sql
      (string-append "CREATE TABLE continuation (\n"
                     "    id                      integer         PRIMARY KEY,\n"
                     "    jsessionid              char(32)        NOT NULL,\n"
                     "    hash                    char(40)        NOT NULL,\n"
                     "    creation_time           date            DEFAULT now() NOT NULL,\n"
                     "    visit_time              date,\n"
                     "    ttl                     integer         DEFAULT 1200 NOT NULL,\n"
                     "    expiration_time         date            NOT NULL,\n"
                     "    parent                  integer,\n"
                     "    procedure               bytea,          \n"
                     "    FOREIGN KEY (parent)                    REFERENCES continuation(id) \n"
                     "                                            ON DELETE SET NULL);\n"
                     "CREATE UNIQUE INDEX continuation_uniq_idx ON continuation(jsessionid, hash);\n"
                     "CREATE INDEX continuation_expr_time_idx ON continuation(expiration_time);\n"
                     "CREATE INDEX continuation_parent_idx ON continuation(parent);\n"
                     "CREATE SEQUENCE continuation_seq;\n"))
    (jdbc/call/conn
     (get-connection)
     (lambda (c)
       (sql/execute-update c create-table-continuation-sql))))

  (define (ks/teardown)
    (define drop-table-continuation-sql
      (string-append "DROP TABLE continuation;\n"
                     "DROP SEQUENCE continuation_seq\n"))

    (jdbc/call/conn
     (get-connection)
     (lambda (c)
       (sql/execute-update c drop-table-continuation-sql))))

@


1.1.2.4
log
@now conforms to contcentric module, which requires ks/put! to accept a
group hash; the group hash is ignored
@
text
@d73 1
a73 1
  (define (ks/put! session-id k-hash g-hash k ttl current-k-hash)
d90 1
a90 1
                              session-id k-hash
d96 1
a96 1
                              k session-id current-k-hash))))))
@


1.1.2.5
log
@renamed module name to match file name; more changes are upcoming
@
text
@d41 1
a41 1
(module siscweb/ks-postgres
@


1.1.2.6
log
@moved from project root to opt/sql/
@
text
@@


