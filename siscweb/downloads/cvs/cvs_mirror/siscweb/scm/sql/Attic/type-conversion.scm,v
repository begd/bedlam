head	1.3;
access;
symbols
	rel-0-3-dev-1:1.2.4.1
	rel-0-2-fix-2:1.2
	rel-0-2-fix-1:1.2
	rel-0-2-fix:1.2.0.2
	rel-0-3-dev:1.2.0.4
	rel-0-2:1.2
	rel-0-2-dev:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2005.11.25.20.46.38;	author acolomba;	state dead;
branches;
next	1.2;

1.2
date	2005.06.19.03.03.51;	author acolomba;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2005.06.10.01.38.14;	author acolomba;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.06.10.01.38.14;	author acolomba;	state Exp;
branches;
next	;

1.2.4.1
date	2005.08.13.04.36.11;	author acolomba;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2005.11.17.02.49.39;	author acolomba;	state dead;
branches;
next	;


desc
@@


1.3
log
@merged from rel-0-3-dev
@
text
@;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.


(require-library 'sisc/libs/srfi/srfi-19) ; time data types and procedures

(require-library 'sql/types)


(module sql/type-conversion
  (get-sql->scheme-proc scheme->sql
   add-sql->scheme-table)

  (import s2j)
  (import hashtable)
  (import type-system)

  (import srfi-19)

  (define-java-classes
    (<big-decimal> |java.math.BigDecimal|)
    (<big-integer> |java.math.BigInteger|)
    (<date> |java.sql.Date|)
    (<double> |java.lang.Double|)
    (<integer> |java.lang.Integer|)
    (<object> |java.lang.Object|)
    (<time> |java.sql.Time|)
    (<timestamp> |java.sql.Timestamp|))


  (define conversion-table
    (make-hashtable eq? #f))

  (define (add-sql->scheme-table vendor alist)
    (hashtable/put! conversion-table
                    vendor
                    (alist->hashtable alist eqv? #f)))


  (define (get-sql->scheme-proc sql-type vendor)
    (hashtable/get (hashtable/get conversion-table vendor) sql-type))



  (define (scheme->sql value)
    (cond ((null? value) (java-null <object>))
          ((boolean? value) (->jboolean value))
          ((or (string? value)
              (symbol? value))
           (->jstring value))
          ((char? value) (->jchar value))
          ((vector? value) (java-wrap value)) ;; FIXME
          ((procedure? value) (java-wrap value)) ;; FIXME
          ((pair? value) (java-wrap value)) ;; FIXME
          ((procedure? value) (java-wrap value))
          ((and (number? value)
                (integer? value))
           (java-new <integer> (->jint value))) ;; FIXME
          ((and (number? value)
                (real? value))
           (java-new <big-decimal> (->jdouble value))) ;; FIXME
          ((and (number? value)
                (rational? value))
           ((java-new <double> (->jdouble value)))) ;; FIXME
          ((date? value)
           (let ((t (date->time-utc value)))
             (java-new <date> (->jlong (* 1000 (time-second t))))))
          ((time? value)
           (java-new <timestamp> (->jlong (* 1000 (time-second value)))))
          ((else value))))
)
@


1.2
log
@merged from rel-0-2-dev
@
text
@@


1.2.4.1
log
@moved scheme->sql type conversion function outside; substituted
instead with hashtable of per-vendor scheme->sql conversion functions
@
text
@d38 2
a39 2
  (get-sql->scheme-proc add-sql->scheme-table
   get-scheme->sql-proc add-scheme->sql-proc)
d41 1
d43 1
d45 14
a58 1
  (define sql->scheme-tables
d62 1
a62 1
    (hashtable/put! sql->scheme-tables
d68 1
a68 1
    (hashtable/get (hashtable/get sql->scheme-tables vendor) sql-type))
a70 8
  (define scheme->sql-procs
    (make-hashtable eq? #f))

  (define (add-scheme->sql-proc vendor proc)
    (hashtable/put! scheme->sql-procs vendor proc
                    (lambda (x)
                      (error (string-append "sql/type-conversion : unknown vendor "
                                            (symbol->string vendor))))))
d72 26
a97 2
  (define (get-scheme->sql-proc vendor)
    (hashtable/get scheme->sql-procs vendor))
@


1.2.4.2
log
@moved from project root to opt/sql/
@
text
@@


1.1
log
@file type-conversion.scm was initially added on branch rel-0-2-dev.
@
text
@d1 98
@


1.1.2.1
log
@moved content of util/sql.scm to sql/hsqldb.scm, sql/jdbc.scm,
sql/query.scm, sql/result-set.scm, sql/type-conversion.scm,
sql/types.scm; also introduced some support for vendor-dependent
sql->scheme type conversions; fixed make-rs-cursor to be more
efficient
@
text
@a0 98
;;; The contents of this file are subject to the Mozilla Public License Version
;;; 1.1 (the "License"); you may not use this file except in compliance with
;;; the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS" basis,
;;; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;; for the specific language governing rights and limitations under the
;;; License.
;;;
;;; The Original Code is SISCweb.
;;;
;;; The Initial Developer of the Original Code is Alessandro Colomba.
;;; Portions created by the Initial Developer are Copyright (C) 2005
;;; Alessandro Colomba. All Rights Reserved.
;;;
;;; Contributor(s):
;;;
;;; Alternatively, the contents of this file may be used under the terms of
;;; either the GNU General Public License Version 2 or later (the "GPL"), or
;;; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
;;; in which case the provisions of the GPL or the LGPL are applicable instead
;;; of those above. If you wish to allow use of your version of this file only
;;; under the terms of either the GPL or the LGPL, and not to allow others to
;;; use your version of this file under the terms of the MPL, indicate your
;;; decision by deleting the provisions above and replace them with the notice
;;; and other provisions required by the GPL or the LGPL. If you do not delete
;;; the provisions above, a recipient may use your version of this file under
;;; the terms of any one of the MPL, the GPL or the LGPL.


(require-library 'sisc/libs/srfi/srfi-19) ; time data types and procedures

(require-library 'sql/types)


(module sql/type-conversion
  (get-sql->scheme-proc scheme->sql
   add-sql->scheme-table)

  (import s2j)
  (import hashtable)
  (import type-system)

  (import srfi-19)

  (define-java-classes
    (<big-decimal> |java.math.BigDecimal|)
    (<big-integer> |java.math.BigInteger|)
    (<date> |java.sql.Date|)
    (<double> |java.lang.Double|)
    (<integer> |java.lang.Integer|)
    (<object> |java.lang.Object|)
    (<time> |java.sql.Time|)
    (<timestamp> |java.sql.Timestamp|))


  (define conversion-table
    (make-hashtable eq? #f))

  (define (add-sql->scheme-table vendor alist)
    (hashtable/put! conversion-table
                    vendor
                    (alist->hashtable alist eqv? #f)))


  (define (get-sql->scheme-proc sql-type vendor)
    (hashtable/get (hashtable/get conversion-table vendor) sql-type))



  (define (scheme->sql value)
    (cond ((null? value) (java-null <object>))
          ((boolean? value) (->jboolean value))
          ((or (string? value)
              (symbol? value))
           (->jstring value))
          ((char? value) (->jchar value))
          ((vector? value) (java-wrap value)) ;; FIXME
          ((procedure? value) (java-wrap value)) ;; FIXME
          ((pair? value) (java-wrap value)) ;; FIXME
          ((procedure? value) (java-wrap value))
          ((and (number? value)
                (integer? value))
           (java-new <integer> (->jint value))) ;; FIXME
          ((and (number? value)
                (real? value))
           (java-new <big-decimal> (->jdouble value))) ;; FIXME
          ((and (number? value)
                (rational? value))
           ((java-new <double> (->jdouble value)))) ;; FIXME
          ((date? value)
           (let ((t (date->time-utc value)))
             (java-new <date> (->jlong (* 1000 (time-second t))))))
          ((time? value)
           (java-new <timestamp> (->jlong (* 1000 (time-second value)))))
          ((else value))))
)
@

