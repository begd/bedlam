head	1.4;
access;
symbols
	rel-0-6-dev:1.4.0.4
	rel-0-5-fix:1.4.0.2
	rel-0-5:1.4
	rel-0-5-dev-safe-frames:1.3.0.6
	Root_rel-0-5-dev-safe-frames:1.3
	rel-0-4-fix-0:1.3
	rel-0-5-dev:1.3.0.4
	rel-0-4-fix:1.3.0.2
	rel-0-3-fix-3:1.2
	rel-0-3-fix-2:1.2
	rel-0-4-dev-sisc-1-11:1.2
	rel-0-3-fix-1:1.2
	rel-0-4-dev:1.2.0.4
	rel-0-3-fix:1.2.0.2
	rel-0-3:1.2
	rel-0-3-dev:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2007.04.12.03.51.19;	author acolomba;	state Exp;
branches
	1.4.2.1
	1.4.4.1;
next	1.3;

1.3
date	2006.09.03.01.42.22;	author acolomba;	state Exp;
branches
	1.3.4.1
	1.3.6.1;
next	1.2;

1.2
date	2005.11.25.20.46.38;	author acolomba;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2005.10.24.03.40.25;	author acolomba;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.10.24.03.40.25;	author acolomba;	state Exp;
branches;
next	;

1.2.4.1
date	2006.06.11.22.33.28;	author acolomba;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2006.07.08.02.32.36;	author acolomba;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2006.07.08.21.36.26;	author acolomba;	state Exp;
branches;
next	;

1.3.4.1
date	2007.04.01.23.55.26;	author acolomba;	state Exp;
branches;
next	;

1.3.6.1
date	2007.03.25.03.33.53;	author acolomba;	state Exp;
branches;
next	1.3.6.2;

1.3.6.2
date	2007.04.01.20.35.11;	author acolomba;	state Exp;
branches;
next	;

1.4.2.1
date	2007.09.09.01.59.54;	author acolomba;	state Exp;
branches;
next	;

1.4.4.1
date	2007.10.13.18.49.32;	author acolomba;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2007.10.13.22.33.00;	author acolomba;	state Exp;
branches;
next	;


desc
@@


1.4
log
@merged from rel-0-5-dev
@
text
@/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is SISCweb.
 *
 * The Initial Developer of the Original Code is Alessandro Colomba.
 * Portions created by the Alessandro Colomba are Copyright (C) 2005-2007
 * Alessandro Colomba. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

package siscweb.contcentric;

import java.io.Serializable;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;

import siscweb.util.Logger;
import siscweb.web.RequestScope;


public class ContinuationGroup implements Comparable, Serializable
{
    private static final long serialVersionUID = -3448029499944547457L;
    private String id;
    private Long ttl;
    private String sessionId;
    private Date creationDate;
    private Date visitDate;
    private Date expirationDate;
    private Map continuations;

    private Frame frame;

    public ContinuationGroup ()
    { }

    public ContinuationGroup(final String id, final Long ttl, final String sessionId, final Frame frame)
    {
        this.id = id;
        this.creationDate = new Date();
        this.ttl = ttl;
        this.sessionId = sessionId;
        this.frame = frame;

        this.expirationDate = new Date(new Date().getTime() + 1000 * ttl.intValue());
        this.continuations = new HashMap();

        if(Logger.logger.isLoggable(Level.FINEST)) {
            Logger.logger.finest("Created continuation group id : " +
                    this.getId() + ", session : " + this.getSessionId() +
                    ", ttl : " + this.getTtl());
        }
    }

    public void touch()
    {
        final Date now = new Date();
        setVisitDate(now);

        if(Logger.logger.isLoggable(Level.FINEST)) {
            final long remainingTtl = (this.expirationDate.getTime() - now.getTime()) / 1000;

            Logger.logger.finest("Touched continuation group id : " +
                    this.getId()+ ", session : " + this.getSessionId() +
                    ", ttl : " + ttl + ", remaining-ttl : " + remainingTtl);
        }

        setExpirationDate(new Date(now.getTime() + 1000 * getTtl().longValue()));
    }

    public void addContinuation(Continuation continuation)
    {
        continuation.setGroup(this);
        this.continuations.put(continuation.getId(), continuation);

        if(Logger.logger.isLoggable(Level.FINEST)) {
            Logger.logger.finest("Added continuation id : " + continuation.getId() +
                    ", group : " + this.getId());
        }
    }

    public String getId()
    {
        return id;
    }

    private void setId(final String id)
    {
        this.id = id;
    }

    public Date getCreationDate()
    {
        return creationDate;
    }

    private void setCreationDate(final Date creationDate)
    {
        this.creationDate = creationDate;
    }

    public Date getExpirationDate()
    {
        return expirationDate;
    }

    private void setExpirationDate(final Date expirationDate)
    {
        this.expirationDate = expirationDate;
    }

    public Long getTtl()
    {
        return ttl;
    }

    public void setTtl(final Long ttl)
    {
        this.ttl = ttl;
    }

    public Date getVisitDate()
    {
        return visitDate;
    }

    private void setVisitDate(final Date visitDate)
    {
        this.visitDate = visitDate;
    }

    public Frame getFrame()
    {
        return this.frame;
    }

    public void setFrame(Frame frame)
    {
        this.frame = frame;
    }


    public String getSessionId()
    {
        return sessionId;
    }

    private void setSessionId(final String sessionId)
    {
        this.sessionId = sessionId;
    }

    public Map getContinuations()
    {
        return this.continuations;
    }

    private void setContinuations(final Map continuations)
    {
        this.continuations = continuations;
    }

    public int compareTo(final Object obj)
    {
        ContinuationGroup group = (ContinuationGroup) obj;

        return this.getExpirationDate().compareTo(group.getExpirationDate());
    }
}
@


1.4.4.1
log
@merged from rel-0-5-fix
@
text
@d45 1
d61 3
d77 2
a78 2
                    this.id + ", session : " + this.sessionId +
                    ", ttl : " + this.ttl);
d98 1
a98 1
    public void addContinuation(final Continuation continuation)
d114 5
d124 5
d164 6
d175 5
d185 5
d192 1
a192 1
        final ContinuationGroup group = (ContinuationGroup) obj;
a195 12
    
    public boolean equals(Object obj)
    {
        return obj != null && 
            obj instanceof ContinuationGroup && 
            this.getExpirationDate().equals(((ContinuationGroup) obj).getExpirationDate());
    }
    
    public int hashCode()
    {
        return this.getExpirationDate().hashCode();
    }
@


1.4.4.2
log
@merged from rel-0-5-fix
@
text
@d68 1
a68 1
        this.expirationDate = new Date(new Date().getTime() + 1000L * ttl.intValue());
d166 1
a166 1

d169 2
a170 2
        return obj != null &&
            obj instanceof ContinuationGroup &&
d173 1
a173 1

@


1.4.2.1
log
@minor syntactical cleanup
@
text
@d45 1
d61 3
d77 2
a78 2
                    this.id + ", session : " + this.sessionId +
                    ", ttl : " + this.ttl);
d98 1
a98 1
    public void addContinuation(final Continuation continuation)
d114 5
d124 5
d164 6
d175 5
d185 5
d192 1
a192 1
        final ContinuationGroup group = (ContinuationGroup) obj;
a195 12
    
    public boolean equals(Object obj)
    {
        return obj != null && 
            obj instanceof ContinuationGroup && 
            this.getExpirationDate().equals(((ContinuationGroup) obj).getExpirationDate());
    }
    
    public int hashCode()
    {
        return this.getExpirationDate().hashCode();
    }
@


1.3
log
@merged from rel-0-4-dev
@
text
@d17 1
a17 1
 * Portions created by the Alessandro Colomba are Copyright (C) 2005
d45 1
d59 1
d64 1
a64 1
    public ContinuationGroup(final String id, final Long ttl, final String sessionId)
d70 2
d159 11
@


1.3.4.1
log
@merged from rel-0-5-dev-safe-frames
@
text
@d17 1
a17 1
 * Portions created by the Alessandro Colomba are Copyright (C) 2005-2007
a44 1
import siscweb.web.RequestScope;
a57 1
    private Frame frame;
d62 1
a62 1
    public ContinuationGroup(final String id, final Long ttl, final String sessionId, final Frame frame)
a67 2
        this.frame = frame;

a154 11
    public Frame getFrame()
    {
        return this.frame;
    }

    public void setFrame(Frame frame)
    {
        this.frame = frame;
    }


@


1.3.6.1
log
@added link to webcell frame
@
text
@a44 1
import siscweb.web.RequestScope;
a57 1
    private Frame frame;
a70 3
        // NOTE: HACK!
        this.frame = RequestScope.getFrame();

a154 11
    public Frame getFrame()
    {
        return this.frame;
    }

    public void setFrame(Frame frame)
    {
        this.frame = frame;
    }


@


1.3.6.2
log
@de-hacked ContinuationGroup
@
text
@d17 1
a17 1
 * Portions created by the Alessandro Colomba are Copyright (C) 2005-2007
d64 1
a64 1
    public ContinuationGroup(final String id, final Long ttl, final String sessionId, final Frame frame)
a69 2
        this.frame = frame;

d73 3
@


1.2
log
@merged from rel-0-3-dev
@
text
@d42 1
d44 1
d46 2
a47 1
public class ContinuationGroup implements Serializable
d68 1
a68 1
        this.touch();
d70 6
d82 9
d98 5
d174 7
@


1.2.4.1
log
@added comparator based on expiration date
@
text
@d44 1
a44 1
public class ContinuationGroup implements Comparable, Serializable
a150 6

    public int compareTo(Object obj) {
        ContinuationGroup group = (ContinuationGroup) obj;

        return this.getExpirationDate().compareTo(group.getExpirationDate());
    }
@


1.2.4.2
log
@added logging
@
text
@a41 3
import java.util.logging.Level;

import siscweb.util.Logger;
d65 1
a65 1
        this.expirationDate = new Date(new Date().getTime() + 1000 * ttl.intValue());
a66 6

        if(Logger.logger.isLoggable(Level.FINEST)) {
            Logger.logger.finest("Created continuation group id : " +
                    this.getId() + ", session : " + this.getSessionId() +
                    ", ttl : " + this.getTtl());
        }
a72 9

        if(Logger.logger.isLoggable(Level.FINEST)) {
            long remainingTtl = (this.expirationDate.getTime() - now.getTime()) / 1000;

            Logger.logger.info("Touched continuation group id : " +
                    this.getId()+ ", session : " + this.getSessionId() +
                    ", ttl : " + ttl + ", remaining-ttl : " + remainingTtl);
        }

a79 5

        if(Logger.logger.isLoggable(Level.FINEST)) {
            Logger.logger.finest("Added continuation id : " + continuation.getId() +
                    ", group : " + this.getId());
        }
@


1.2.4.3
log
@fixed logging level
@
text
@d84 1
a84 1
            final long remainingTtl = (this.expirationDate.getTime() - now.getTime()) / 1000;
d86 1
a86 1
            Logger.logger.finest("Touched continuation group id : " +
d175 1
a175 2
    public int compareTo(final Object obj)
    {
@


1.1
log
@file ContinuationGroup.java was initially added on branch rel-0-3-dev.
@
text
@d1 151
@


1.1.2.1
log
@initial import
@
text
@a0 151
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is SISCweb.
 *
 * The Initial Developer of the Original Code is Alessandro Colomba.
 * Portions created by the Alessandro Colomba are Copyright (C) 2005
 * Alessandro Colomba. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

package siscweb.contcentric;

import java.io.Serializable;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;


public class ContinuationGroup implements Serializable
{
    private static final long serialVersionUID = -3448029499944547457L;
    private String id;
    private Long ttl;
    private String sessionId;
    private Date creationDate;
    private Date visitDate;
    private Date expirationDate;
    private Map continuations;


    public ContinuationGroup ()
    { }

    public ContinuationGroup(final String id, final Long ttl, final String sessionId)
    {
        this.id = id;
        this.creationDate = new Date();
        this.ttl = ttl;
        this.sessionId = sessionId;
        this.touch();
        this.continuations = new HashMap();
    }

    public void touch()
    {
        final Date now = new Date();
        setVisitDate(now);
        setExpirationDate(new Date(now.getTime() + 1000 * getTtl().longValue()));
    }

    public void addContinuation(Continuation continuation)
    {
        continuation.setGroup(this);
        this.continuations.put(continuation.getId(), continuation);
    }

    public String getId()
    {
        return id;
    }

    private void setId(final String id)
    {
        this.id = id;
    }

    public Date getCreationDate()
    {
        return creationDate;
    }

    private void setCreationDate(final Date creationDate)
    {
        this.creationDate = creationDate;
    }

    public Date getExpirationDate()
    {
        return expirationDate;
    }

    private void setExpirationDate(final Date expirationDate)
    {
        this.expirationDate = expirationDate;
    }

    public Long getTtl()
    {
        return ttl;
    }

    public void setTtl(final Long ttl)
    {
        this.ttl = ttl;
    }

    public Date getVisitDate()
    {
        return visitDate;
    }

    private void setVisitDate(final Date visitDate)
    {
        this.visitDate = visitDate;
    }

    public String getSessionId()
    {
        return sessionId;
    }

    private void setSessionId(final String sessionId)
    {
        this.sessionId = sessionId;
    }

    public Map getContinuations()
    {
        return this.continuations;
    }

    private void setContinuations(final Map continuations)
    {
        this.continuations = continuations;
    }
}
@

